{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"CHANGELOG/","title":"ChangeLog","text":"","boost":-1},{"location":"CHANGELOG/#version-2507","title":"Version 25.07","text":"","boost":-1},{"location":"CHANGELOG/#security-fix","title":"Security fix","text":"<ul> <li><code>ext_mod</code>: Add temporary workaround for zip including absolute path</li> </ul>","boost":-1},{"location":"CHANGELOG/#compilation","title":"Compilation","text":"<ul> <li>Raise the minimum Elixir tested version to 1.14.0 (#4281)</li> <li>Raise Erlang/OTP minimum requirement to 25.0 (#4281)</li> <li><code>configure.ac</code>: Allow to specify minimal erlang version using <code>--with-min-erlang</code></li> <li><code>Makefile.in</code>: Add target <code>test-&lt;group&gt;</code></li> <li><code>rebar3-format.sh</code>: Replace csplit with perl</li> <li>Container: Bump Erlang/OTP 27.3.4.1, Elixir 1.18.4</li> <li>Installers: Bump Erlang/OTP 27.3.4.1, Elixir 1.18.4, libexpat 2.7.1, OpenSSL 3.5.1</li> </ul>","boost":-1},{"location":"CHANGELOG/#configuration-and-tests","title":"Configuration and Tests","text":"<ul> <li>Add <code>rest_proxy*</code> options to configure proxy used by rest module</li> <li><code>ejabberd_c2s</code>: Add <code>auth_password_types_hidden_in_scram1</code> option</li> <li><code>ejabberd_http</code>: Remove unused <code>default_host</code> option and state element</li> <li><code>ejabberd_http</code>: New option <code>hosts_alias</code> and function <code>resolve_host_alias/1</code> (#4400)</li> <li>New predefined keywords: <code>CONFIG_PATH</code> and <code>LOG_PATH</code></li> <li>Fix macro used in string options when defined in env var</li> <li>Use auxiliary function to get <code>$HOME</code>, use Mnesia directory when not set (#4402)</li> <li><code>ejabberd_config</code>: Better <code>lists:uniq</code> substitute</li> <li>Tests: update readme and compose to work with current sw versions</li> <li>Update Elvis to 4.1.1, fix some warnings and enable their tests</li> </ul>","boost":-1},{"location":"CHANGELOG/#erlangotp-28-support","title":"Erlang/OTP 28 support","text":"<ul> <li>Add workaround in <code>p1_acme</code> for Jose 1.11.10 not supporting OTP 28 <code>ecPrivkeyVer1</code> (#4393)</li> <li>Bump <code>fast_xml</code> and <code>xmpp</code> for improved Erlang/OTP 28 support</li> <li>Bump <code>xmpp</code> and <code>p1_acme</code> patched with Erlang/OTP 28 support</li> <li>Fix <code>make options</code> in Erlang/OTP 28 (#4352)</li> <li>Fix crash in <code>rebar3 cover</code> with Erlang/OTP 28 (#4353)</li> <li>Rebar/Rebar3: Update binaries to work with Erlang/OTP 25-28 (#4354)</li> <li>CI and Runtime: Add Erlang/OTP 28 to the versions matrix</li> </ul>","boost":-1},{"location":"CHANGELOG/#sql","title":"SQL","text":"<ul> <li>Fix mnesia to sql exporter after changes to auth tables</li> <li>Update code for switching to new schema type to users table changes</li> <li>Add mssql specific implementation of <code>delete_old_mam_messages</code></li> <li>Make <code>delete_old_mam_messages_batch</code> work with sqlite</li> <li><code>ejabberd_sm_sql</code>: Use misc:encode_pid/1</li> <li><code>mysql.sql</code>: Fix typo in commit 7862c6a when creating users table</li> <li><code>pg.sql</code>: Fix missing comma in postgres schema (#4409)</li> </ul>","boost":-1},{"location":"CHANGELOG/#core-and-modules","title":"Core and Modules","text":"<ul> <li><code>ejabberd_s2s_in</code>: Allow S2S connections to accept client certificates that have only server purpose (#4392)</li> <li><code>ext_mod</code>: Recommend to write README.md instead txt (processone/ejabberd-contrib#363)</li> <li><code>ext_mod</code>: Support library path installed from Debian (processone/ejabberd-contrib#363)</li> <li><code>ext_mod</code>: When upgrading module, clean also the compiled directories</li> <li><code>gen_mod</code>: Add support to prepare module stopping before actually stopping any module</li> <li><code>mod_antispam</code>: Imported from ejabberd-contrib and improved (#4373)</li> <li><code>mod_auth_fast</code>: Clear tokens on kick, change pass and unregister (#4397)(#4398)(#4399)</li> <li><code>mod_conversejs</code>: Add link in WebAdmin to local Converse if configured</li> <li><code>mod_mam</code>: Present mam full text search in xep-431 compatible way</li> <li><code>mod_mam_mnesia</code>: Handle objects that don't need conversion in <code>transform/0</code></li> <li><code>mod_matrix_gw</code>: Don't send empty messages in Matrix rooms (#4385)</li> <li><code>mod_matrix_gw</code>: Support older Matrix rooms versions starting from version 4</li> <li><code>mod_matrix_gw</code>: When encoding JSON, handle term that is key-value list (#4379)</li> <li><code>mod_matrix_gw_s2s</code>: Fix key validation in <code>check_signature</code></li> <li><code>mod_mix</code> and <code>mod_muc_rtbl</code>: Support list of IDs in <code>pubsub-items-retract</code> (processone/xmpp#100)</li> <li><code>mod_pubsub_serverinfo</code>: Imported module from ejabberd-contrib (#4408)</li> <li><code>mod_register</code>: Normalize username when determining if user want to change pass</li> <li><code>mod_register</code>: Strip query data when returning errors</li> <li>WebAdmin: New hooks <code>webadmin_menu_system</code> to add items to system menu</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2504","title":"Version 25.04","text":"","boost":-1},{"location":"CHANGELOG/#security-fixes","title":"Security fixes","text":"<ul> <li>Fixes issue with handling of user provided occupant-id in messages and presences sent to muc room. Server was replacing   just first instance of occupant-id with its own version, leaving other ones untouched. That would mean that depending   on order in which clients send occupant-id, they could see value provided by sender, and that could be used to spoof   as different sender.</li> </ul>","boost":-1},{"location":"CHANGELOG/#commands-api","title":"Commands API","text":"<ul> <li><code>kick_users</code>: New command to kick all logged users for a given host</li> </ul>","boost":-1},{"location":"CHANGELOG/#bugfixes","title":"Bugfixes","text":"<ul> <li>Fix issue with sql schema auto upgrade when using <code>sqlite</code> database</li> <li>Fix problem with container update, that could ignore previous data stored in <code>mnesia</code> database</li> <li>Revert limit of allowed characters in shared roster group names, that will again allow using symbols like <code>:</code></li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2503","title":"Version 25.03","text":"","boost":-1},{"location":"CHANGELOG/#commands-api_1","title":"Commands API","text":"<ul> <li><code>ejabberdctl</code>: New option <code>CTL_OVER_HTTP</code> (#4340)</li> <li><code>ejabberd_web_admin</code>: Support commands with tuple arguments</li> <li><code>mod_adhoc_api</code>: New module to execute API Commands using Ad-Hoc Commands (#4357)</li> <li><code>mod_http_api</code>: Sort list elements in a command result</li> <li>Show warning when registering command with an existing name</li> <li>Fix commands unregistration</li> <li><code>change_room_option</code>: Add forgotten support to set <code>enable_hats</code> room option</li> <li><code>change_room_option</code>: Verify room option value before setting it (#4337)</li> <li><code>create_room_with_opts</code>: Recommend using <code>;</code> and <code>=</code> separators</li> <li><code>list_cluster_detailed</code>: Fix crash when a node is down</li> <li><code>mnesia_list_tables</code>: Allow using this internal command</li> <li><code>mnesia_table_change_storage</code>: Allow using this internal command</li> <li><code>status</code>: Separate command result with newline</li> <li><code>update_sql</code>: Fix updating tables created by ejabberd internally</li> <li><code>update_sql</code>: Fix MySQL support</li> </ul>","boost":-1},{"location":"CHANGELOG/#configuration","title":"Configuration","text":"<ul> <li><code>acl</code>: Fix bug matching the acl <code>shared_group: NAME</code></li> <li><code>define_keyword</code>: New option to define keywords (#4350)</li> <li><code>define_macro</code>: Add option to <code>globals()</code> because it's useless inside <code>host_config</code></li> <li><code>ejabberd.yml.example</code>: Enable <code>mod_muc_occupantid</code> by default</li> <li>Add support to use keywords in toplevel, listener and modules</li> <li>Show warning also when deprecated listener option is set as disabled (#4345)</li> </ul>","boost":-1},{"location":"CHANGELOG/#container","title":"Container","text":"<ul> <li>Bump versions to Erlang/OTP 27.3 and Elixir 1.18.3</li> <li>Add <code>ERL_FLAGS</code> to compile elixir on qemu cross-platform</li> <li>Copy files to stable path, add ecs backwards compatibility</li> <li>Fix warning about relative workdir</li> <li>Improve entrypoint script: register account, or set random</li> <li>Link path to Mnesia spool dir for backwards compatibility</li> <li>Place <code>sockets/</code> outside <code>database/</code></li> <li>Use again direct METHOD, qemu got fixed (#4280)</li> <li><code>ejabberd.yml.example</code>: Copy main example configuration file</li> <li><code>ejabberd.yml.example</code>: Define and use macros in the default configuration file</li> <li><code>ejabberd.yml.example</code>: Enable <code>CTL_OVER_HTTP</code> by default</li> <li><code>ejabberd.yml.example</code>: Listen for webadmin in a port number lower than any other</li> <li><code>ejabberdapi</code>: Compile during build</li> <li><code>CONTAINER.md</code>: Include documentation for ecs container image</li> </ul>","boost":-1},{"location":"CHANGELOG/#core-and-modules_1","title":"Core and Modules","text":"<ul> <li><code>ejabberd_auth</code>: Add support for <code>auth_stored_password_types</code></li> <li><code>ejabberd_router</code>: Don't rewrite \"self-addressed\" privileged IQs as results (#4348)</li> <li><code>misc</code>: Fix json version of <code>json_encode_with_kv_list</code> for nested kv lists (#4338)</li> <li>OAuth: Fix crashes when oauth is feed with invalid jid (#4355)</li> <li>PubSub: Bubble up db errors in <code>nodetree_tree_sql:set_node</code></li> <li><code>mod_configure</code>: Add option <code>access</code> to let configure the access name</li> <li><code>mod_mix_pam</code>: Remove <code>Channels</code> roster group of mix channels (#4297)</li> <li><code>mod_muc</code>: Document MUC room option vcard_xupdate</li> <li><code>mod_privilege</code>: Accept non-privileged IQs from privileged components (#4341)</li> <li><code>mod_private</code>: Improve exception handling</li> <li><code>mod_private</code>: Don't warn on conversion errors</li> <li><code>mod_private</code>: Handle invalid PEP-native bookmarks</li> <li><code>mod_private</code>: Don't crash on invalid bookmarks</li> <li><code>mod_s2s_bidi</code>: Stop processing other handlers in s2s_in_handle_info (#4344)</li> <li><code>mod_s2s_bidi</code>: Fix issue with wrong namespace</li> </ul>","boost":-1},{"location":"CHANGELOG/#dependencies","title":"Dependencies","text":"<ul> <li><code>ex_doc</code>: Bump to 0.37.2</li> <li><code>stringprep</code>: Bump to 1.0.31</li> <li><code>provider_asn1</code>: Bump to 0.4.1</li> <li><code>xmpp</code> Bump to bring fix for ssdp hash calculation</li> <li><code>xmpp</code> Bump to get support for webchat_url (#3041)</li> <li><code>xmpp</code> Bump to get XEP-0317 Hats namespaces version 0.2.0</li> <li><code>xmpp</code> Bump to bring SSDP to XEP version 0.4</li> <li><code>yconf</code> Bump to support macro inside string</li> </ul>","boost":-1},{"location":"CHANGELOG/#development-and-testing","title":"Development and Testing","text":"<ul> <li><code>mix.exs</code>: Keep debug info when building <code>dev</code> release</li> <li><code>mix.exs</code>: The <code>ex_doc</code> dependency is only relevant for the <code>edoc</code> Mix environment</li> <li><code>ext_mod</code>: add <code>$libdir/include</code> to include path</li> <li><code>ext_mod</code>: fix greedy include path (#4359)</li> <li><code>gen_mod</code>: Support registering commands and <code>hook_subscribe</code> in <code>start/2</code> result</li> <li><code>c2s_handle_bind</code>: New event in <code>ejabberd_c2s</code> (#4356)</li> <li><code>muc_disco_info_extras</code>: New event <code>mod_muc_room</code> useful for <code>mod_muc_webchat_url</code> (#3041)</li> <li>VSCode: Fix compiling support</li> <li>Add tests for config features <code>define_macro</code> and <code>define_keyword</code></li> <li>Allow test to run using <code>ct_run</code></li> <li>Fixes to handle re-running test after <code>update_sql</code></li> <li>Uninstall <code>mod_example</code> when the tests has finished</li> </ul>","boost":-1},{"location":"CHANGELOG/#documentation","title":"Documentation","text":"<ul> <li>Add XEPs that are indirectly supported and required by XEP-0479</li> <li>Document that XEP-0474 0.4.0 was recently upgraded</li> <li>Don't use backtick quotes for ejabberd name</li> <li>Fix values allowed in db_type of mod_auth_fast documentation</li> <li>Reword explanation about ACL names and definitions</li> <li>Update moved or broken URLs in documentation</li> </ul>","boost":-1},{"location":"CHANGELOG/#installers","title":"Installers","text":"<ul> <li>Bump Erlang/OTP 27.3 and Elixir 1.18.3</li> <li>Bump OpenSSL 3.4.1</li> <li>Bump crosstool-NG 1.27.0</li> <li>Fix building Termcap and Linux-PAM</li> </ul>","boost":-1},{"location":"CHANGELOG/#matrix-gateway","title":"Matrix Gateway","text":"<ul> <li>Preserve XMPP message IDs in Matrix rooms</li> <li>Better Matrix room topic and room roles to MUC conversion, support room aliases in invites</li> <li>Add <code>muc#user</code> element to presences and an initial empty subject</li> <li>Fix <code>gen_iq_handler:remove_iq_handler</code> call</li> <li>Properly handle IQ requests</li> <li>Support Matrix room aliases</li> <li>Fix handling of 3PI events</li> </ul>","boost":-1},{"location":"CHANGELOG/#unix-domain-socket","title":"Unix Domain Socket","text":"<ul> <li>Add support for socket relative path</li> <li>Use <code>/tmp</code> for temporary socket, as path is restricted to 107 chars</li> <li>Handle unix socket when logging remote client</li> <li>When stopping listener, delete Unix Domain Socket file</li> <li><code>get_auto_url</code> option: Don't build auto URL if port is unix domain socket (#4345)</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2412","title":"Version 24.12","text":"","boost":-1},{"location":"CHANGELOG/#miscelanea","title":"Miscelanea","text":"<ul> <li>Elixir: support loading Elixir modules for auth (#4315)</li> <li>Environment variables <code>EJABBERD_MACRO</code> to define macros</li> <li>Fix problem starting ejabberd when first host uses SQL, other one mnesia</li> <li>HTTP Websocket: Enable <code>allow_unencrypted_sasl2</code> on websockets (#4323)</li> <li>Relax checks for channels bindings for connections using external encryption</li> <li>Redis: Add support for unix domain socket (#4318)</li> <li>Redis: Use eredis 1.7.1 from Nordix when using mix/rebar3 and Erlang 21+</li> <li><code>mod_auth_fast</code>: New module with support XEP-0484: Fast Authentication Streamlining Tokens</li> <li><code>mod_http_api</code>: Fix crash when module not enabled (for example, in CT tests)</li> <li><code>mod_http_api</code>: New option <code>default_version</code></li> <li><code>mod_muc</code>: Make rsm handling in disco items, correctly count skipped rooms</li> <li><code>mod_offline</code>: Only delete offline msgs when user has MAM enabled (#4287)</li> <li><code>mod_priviled</code>: Handle properly roster iq</li> <li><code>mod_pubsub</code>: Send notifications on PEP item retract</li> <li><code>mod_s2s_bidi</code>: Catch extra case in check for s2s bidi element</li> <li><code>mod_scram_upgrade</code>: Don't abort the upgrade</li> <li><code>mod_shared_roster</code>: The name of a new group is lowercased</li> <li><code>mod_shared_roster</code>: Get back support for <code>groupid@vhost</code> in <code>displayed</code></li> <li><code>mod_stun_disco</code>: Fix syntax of credentials response</li> </ul>","boost":-1},{"location":"CHANGELOG/#commands-api_2","title":"Commands API","text":"<ul> <li>Change arguments and result to consistent names (API v3)</li> <li><code>create_rooms_file</code>: Improve to support vhosts with different config</li> <li><code>evacuate_kindly</code>: New command to kick users and prevent login (#4309)</li> <li><code>join_cluster</code>: Explain that this returns immediately (since 5a34020, 24.06)</li> <li><code>mod_muc_admin</code>: Rename argument <code>name</code> to <code>room</code> for consistency</li> </ul>","boost":-1},{"location":"CHANGELOG/#documentation_1","title":"Documentation","text":"<ul> <li>Fix some documentation syntax, add links to toplevel, modules and API</li> <li><code>CONTAINER.md</code>: Add kubernetes yaml examples to use with podman</li> <li><code>SECURITY.md</code>: Add security policy and reporting guidelines</li> <li><code>ejabberd.service</code>: Disable the systemd watchdog by default</li> <li><code>ejabberd.yml.example</code>: Use non-standard STUN port</li> </ul>","boost":-1},{"location":"CHANGELOG/#webadmin","title":"WebAdmin","text":"<ul> <li>Shared group names are case sensitive, use original case instead of lowercase</li> <li>Use lowercase username and server authentication credentials</li> <li>Fix calculation of node's uptime days</li> <li>Fix link to displayed group when it is from another vhost</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2410","title":"Version 24.10","text":"","boost":-1},{"location":"CHANGELOG/#miscelanea_1","title":"Miscelanea","text":"<ul> <li><code>ejabberd_c2s</code>: Optionally allow unencrypted SASL2</li> <li><code>ejabberd_system_monitor</code>: Handle call by <code>gen_event:swap_handler</code> (#4233)</li> <li><code>ejabberd_http_ws</code>: Remove support for old websocket connection protocol</li> <li><code>ejabberd_stun</code>: Omit <code>auth_realm</code> log message</li> <li><code>ext_mod</code>: Handle <code>info</code> message when contrib module transfers table ownership</li> <li><code>mod_block_strangers</code>: Add feature announcement to disco-info (#4039)</li> <li><code>mod_mam</code>: Advertise XEP-0424 feature in server disco-info (#3340)</li> <li><code>mod_muc_admin</code>: Better handling of malformed jids in <code>send_direct_invitation</code> command</li> <li><code>mod_muc_rtbl</code>: Fix call to <code>gen_server:stop</code> (#4260)</li> <li><code>mod_privilege</code>: Support \"IQ permission\" from XEP-0356 0.4.1 (#3889)</li> <li><code>mod_pubsub</code>: Don't blindly echo PEP notification</li> <li><code>mod_pubsub</code>: Skip non-delivery errors for local pubsub generated notifications</li> <li><code>mod_pubsub</code>: Fall back to default plugin options</li> <li><code>mod_pubsub</code>: Fix choice of node config defaults</li> <li><code>mod_pubsub</code>: Fix merging of default node options</li> <li><code>mod_pubsub</code>: Fix default node config parsing</li> <li><code>mod_register</code>: Support to block IPs in a vhost using <code>append_host_config</code> (#4038)</li> <li><code>mod_s2s_bidi</code>: Add support for S2S Bidirectional</li> <li><code>mod_scram_upgrade</code>: Add support for SCRAM upgrade tasks</li> <li><code>mod_vcard</code>: Return error stanza when storage doesn't support vcard update (#4266)</li> <li><code>mod_vcard</code>: Return explicit error stanza when user attempts to modify other's vcard</li> <li>Minor improvements to support <code>mod_tombstones</code> (#2456)</li> <li>Update <code>fast_xml</code> to use <code>use_maps</code> and remove obsolete elixir files</li> <li>Update <code>fast_tls</code> and <code>xmpp</code> to improve s2s fallback for invalid direct tls connections</li> <li><code>make-binaries</code>: Bump dependency versions: Elixir 1.17.2, OpenSSL 3.3.2, ...</li> </ul>","boost":-1},{"location":"CHANGELOG/#administration","title":"Administration","text":"<ul> <li><code>ejabberdctl</code>: If <code>ERLANG_NODE</code> lacks host, add hostname (#4288)</li> <li><code>ejabberd_app</code>: At server start, log Erlang and Elixir versions</li> <li>MySQL: Fix column type in the schema update of <code>archive</code> table in schema update</li> </ul>","boost":-1},{"location":"CHANGELOG/#commands-api_3","title":"Commands API","text":"<ul> <li><code>get_mam_count</code>: New command to get number of archived messages for an account</li> <li><code>set_presence</code>: Return error when session not found</li> <li><code>update</code>: Fix command output</li> <li>Add <code>mam</code> and <code>offline</code> tags to the related purge commands</li> </ul>","boost":-1},{"location":"CHANGELOG/#code-quality","title":"Code Quality","text":"<ul> <li>Fix warnings about unused macro definitions reported by Erlang LS</li> <li>Fix Elvis report: Fix dollar space syntax</li> <li>Fix Elvis report: Remove spaces in weird places</li> <li>Fix Elvis report: Don't use ignored variables</li> <li>Fix Elvis report: Remove trailing whitespace characters</li> <li>Define the types of options that <code>opt_type.sh</code> cannot derive automatically</li> <li><code>ejabberd_http_ws</code>: Fix dialyzer warnings</li> <li><code>mod_matrix_gw</code>: Remove useless option <code>persist</code></li> <li><code>mod_privilege</code>: Replace <code>try...catch</code> with a clean alternative</li> </ul>","boost":-1},{"location":"CHANGELOG/#development-help","title":"Development Help","text":"<ul> <li><code>elvis.config</code>: Fix file syntax, set vim mode, disable many tests</li> <li><code>erlang_ls.config</code>: Let it find paths, update to Erlang 26, enable crossref</li> <li><code>hooks_deps</code>: Hide false-positive warnings about <code>gen_mod</code></li> <li><code>Makefile</code>: Add support for <code>make elvis</code> when using rebar3</li> <li><code>.vscode/launch.json</code>: Experimental support for debugging with Neovim</li> <li>CI: Add Elvis tests</li> <li>CI: Add XMPP Interop tests</li> <li>Runtime: Cache hex.pm archive from rebar3 and mix</li> </ul>","boost":-1},{"location":"CHANGELOG/#documentation_2","title":"Documentation","text":"<ul> <li>Add links in top-level options documentation to their Docs website sections</li> <li>Document which SQL servers can really use <code>update_sql_schema</code></li> <li>Improve documentation of <code>ldap_servers</code> and <code>ldap_backups</code> options (#3977)</li> <li><code>mod_register</code>: Document behavior when <code>access</code> is set to <code>none</code> (#4078)</li> </ul>","boost":-1},{"location":"CHANGELOG/#elixir","title":"Elixir","text":"<ul> <li>Handle case when elixir support is enabled but not available</li> <li>Start ExSync manually to ensure it's started if (and only if) Relive</li> <li><code>mix.exs</code>: Fix <code>mix release</code> error: <code>logger</code> being regular and included application (#4265)</li> <li><code>mix.exs</code>: Remove from <code>extra_applications</code> the apps already defined in <code>deps</code> (#4265)</li> </ul>","boost":-1},{"location":"CHANGELOG/#webadmin_1","title":"WebAdmin","text":"<ul> <li>Add links in user page to offline and roster pages</li> <li>Add new \"MAM Archive\" page to webadmin</li> <li>Improve many pages to handle when modules are disabled</li> <li><code>mod_admin_extra</code>: Move some webadmin pages to their modules</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2407","title":"Version 24.07","text":"","boost":-1},{"location":"CHANGELOG/#core","title":"Core","text":"<ul> <li><code>ejabberd_options</code>: Add trailing <code>@</code> to <code>@VERSION@</code> parsing</li> <li><code>mod_http_api</code>: Fix problem parsing tuples when using OTP 27 json library (#4242)</li> <li><code>mod_http_api</code>: Restore args conversion of <code>{\"k\":\"v\"}</code> to tuple lists</li> <li><code>mod_matrix_gw</code>: Add misc:json_encode_With_kv_lists and use it in matrix sign function</li> <li><code>mod_muc</code>: Output <code>muc#roominfo_avatarhash</code> in room disco info as per updated XEP-0486 (#4234)</li> <li><code>mod_muc</code>: Improve cross version handling of muc retractions</li> <li><code>node_pep</code>: Add missing feature <code>item-ids</code> to node_pep</li> <li><code>mod_register</code>: Send welcome message as <code>chat</code> too (#4246)</li> <li><code>ejabberd_hooks</code>: Support for ejabberd hook subscribers, useful for mod_prometheus</li> <li><code>ejabberd.app</code>: Don't add <code>iex</code> to included_applications</li> <li><code>make-installers</code>: Fix path in scripts in regular user install (#4258)</li> <li>Test: New tests for API commands</li> </ul>","boost":-1},{"location":"CHANGELOG/#documentation_3","title":"Documentation","text":"<ul> <li><code>mod_matrix_gw</code>: Fix <code>matrix_id_as_jid</code> option documentation</li> <li><code>mod_register</code>: Add example configuration of <code>welcome_message</code> option</li> <li><code>mix.exs</code>: Add ejabberd example config files to the hex package</li> <li>Update <code>CODE_OF_CONDUCT.md</code></li> </ul>","boost":-1},{"location":"CHANGELOG/#ext_mod","title":"ext_mod","text":"<ul> <li>Fetch dependencies from hex.pm when mix is available</li> <li>files_to_path is deprecated, use compile_to_path</li> <li>Compile all Elixir files in a library with one function call</li> <li>Improve error result when problem compiling elixir file</li> <li>Handle case when contrib module has no <code>*.ex</code> and no <code>*.erl</code></li> <li><code>mix.exs</code>: Include Elixir's Logger in the OTP release, useful for mod_libcluster</li> </ul>","boost":-1},{"location":"CHANGELOG/#logs","title":"Logs","text":"<ul> <li>Print message when starting ejabberd application fails</li> <li>Use error_logger when printing startup failure message</li> <li>Use proper format depending on the formatter (#4256)</li> </ul>","boost":-1},{"location":"CHANGELOG/#sql_1","title":"SQL","text":"<ul> <li>Add option <code>update_sql_schema_timeout</code> to allow schema update use longer timeouts</li> <li>Add ability to specify custom timeout for sql operations</li> <li>Allow to configure number of restart in <code>sql_transaction()</code></li> <li>Make sql query in testsuite compatible with pg9.1</li> <li>In <code>mysql.sql</code>, fix update instructions for the <code>archive</code> table, <code>origin_id</code> column (#4259)</li> </ul>","boost":-1},{"location":"CHANGELOG/#webadmin_2","title":"WebAdmin","text":"<ul> <li><code>ejabberd.yml.example</code>: Add <code>api_permissions</code> group for webadmin (#4249)</li> <li>Don't use host from url in webadmin, prefer host used for authentication</li> <li>Fix number of accounts shown in the online-users page</li> <li>Fix crash when viewing old shared roster groups (#4245)</li> <li>Support groupid with spaces when making shared roster result (#4245)</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2406","title":"Version 24.06","text":"","boost":-1},{"location":"CHANGELOG/#core_1","title":"Core","text":"<ul> <li><code>econf</code>: Add ability to use additional custom errors when parsing options</li> <li><code>ejabberd_logger</code>: Reloading configuration will update logger settings</li> <li><code>gen_mod</code>: Add support to specify a hook global, not vhost-specific</li> <li><code>mod_configure</code>: Retract <code>Get User Password</code> command to update XEP-0133 1.3.0</li> <li><code>mod_conversejs</code>: Simplify support for <code>@HOST@</code> in <code>default_domain</code> option (#4167)</li> <li><code>mod_mam</code>: Document that XEP-0441 is implemented as well</li> <li><code>mod_mam</code>: Update support for XEP-0425 version 0.3.0, keep supporting 0.2.1 (#4193)</li> <li><code>mod_matrix_gw</code>: Fix support for <code>@HOST@</code> in <code>matrix_domain</code> option (#4167)</li> <li><code>mod_muc_log</code>: Hide join/leave lines, add method to show them</li> <li><code>mod_muc_log</code>: Support <code>allowpm</code> introduced in 2bd61ab</li> <li><code>mod_muc_room</code>: Use ejabberd hooks instead of function calls to <code>mod_muc_log</code> (#4191)</li> <li><code>mod_private</code>): Cope with bookmark decoding errors</li> <li><code>mod_vcard_xupdate</code>: Send hash after avatar get set for first time</li> <li><code>prosody2ejabberd</code>: Handle the <code>approved</code> attribute. As feature isn't implemented, discard it (#4188)</li> </ul>","boost":-1},{"location":"CHANGELOG/#sql_2","title":"SQL","text":"<ul> <li><code>update_sql_schema</code>: Enable this option by default</li> <li>CI: Don't load database schema files for mysql and pgsql</li> <li>Support Unix Domain Socket with updated p1_pgsql and p1_mysql (#3716)</li> <li>Fix handling of <code>mqtt_pub</code> table definition from <code>mysql.sql</code> and fix <code>should_update_schema/1</code> in <code>ejabberd_sql_schema.erl</code></li> <li>Don't start sql connection pools for unknown hosts</li> <li>Add <code>update_primary_key</code> command to sql schema updater</li> <li>Fix crash running <code>export2sql</code> when MAM enabled but MUC disabled</li> <li>Improve detection of types in odbc</li> </ul>","boost":-1},{"location":"CHANGELOG/#commands-api_4","title":"Commands API","text":"<ul> <li>New ban commands use private storage to keep ban information (#4201)</li> <li><code>join_cluster_here</code>: New command to join a remote node into our local cluster</li> <li>Don't name integer and string results in API examples (#4198)</li> <li><code>get_user_subscriptions</code>: Fix validation of user field in that command</li> <li><code>mod_admin_extra</code>: Handle case when <code>mod_private</code> is not enabled (#4201)</li> <li><code>mod_muc_admin</code>: Improve validation of arguments in several commands</li> </ul>","boost":-1},{"location":"CHANGELOG/#compile","title":"Compile","text":"<ul> <li><code>ejabberdctl</code>: Comment ERTS_VSN variable when not used (#4194)</li> <li><code>ejabberdctl</code>: Fix iexlive after <code>make prod</code> when using Elixir</li> <li><code>ejabberdctl</code>: If <code>INET_DIST_INTERFACE</code> is IPv6, set required option (#4189)</li> <li><code>ejabberdctl</code>: Make native dynamic node names work when using fully qualified domain names</li> <li><code>rebar.config.script</code>: Support relaxed dependency version (#4192)</li> <li><code>rebar.config</code>: Update deps version to rebar3's relaxed versioning</li> <li><code>rebar.lock</code>: Track file, now that rebar3 uses loose dependency versioning</li> <li><code>configure.ac</code>: When using rebar3, unlock dependencies that are disabled (#4212)</li> <li><code>configure.ac</code>: When using rebar3 with old Erlang, unlock some dependencies (#4213)</li> <li><code>mix:exs</code>: Move <code>xmpp</code> from <code>included_applications</code> to <code>applications</code></li> </ul>","boost":-1},{"location":"CHANGELOG/#dependencies_1","title":"Dependencies","text":"<ul> <li>Base64url: Use only when using rebar2 and Erlang lower than 24</li> <li>Idna: Bump from 6.0.0 to 6.1.1</li> <li>Jiffy: Use Json module when Erlang/OTP 27, jiffy with older ones</li> <li>Jose: Update to the new 1.11.10 for Erlang/OTP higher than 23</li> <li>Luerl: Update to 1.2.0 when OTP same or higher than 20, simplifies commit a09f222</li> <li>P1_acme: Update to support Jose 1.11.10 and Ipv6 support (#4170)</li> <li>P1_acme: Update to use Erlang's json library instead of jiffy when OTP 27</li> <li>Port_compiler: Update to 1.15.0 that supports Erlang/OTP 27.0</li> </ul>","boost":-1},{"location":"CHANGELOG/#development-help_1","title":"Development Help","text":"<ul> <li><code>.gitignore</code>: Ignore ctags/etags files</li> <li><code>make dialyzer</code>: Add support to run Dialyzer with Mix</li> <li><code>make format|indent</code>: New targets to format and indent source code</li> <li><code>make relive</code>: Add Sync tool with Rebar3, ExSync with Mix</li> <li><code>hook_deps</code>: Use precise name: hooks are added and later deleted, not removed</li> <li><code>hook_deps</code>: Fix to handle FileNo as tuple <code>{FileNumber, CharacterPosition}</code></li> <li>Add support to test also EUnit suite</li> <li>Fix <code>code:lib_dir</code> call to work with Erlang/OTP 27.0-rc2</li> <li>Set process flags when Erlang/OTP 27 to help debugging</li> <li>Test retractions in mam_tests</li> </ul>","boost":-1},{"location":"CHANGELOG/#documentation_4","title":"Documentation","text":"<ul> <li>Add some XEPs support that was forgotten</li> <li>Fix documentation links to new URLs generated by MkDocs</li> <li>Remove <code>...</code> in example configuration: it is assumed and reduces verbosity</li> <li>Support for version note in modules too</li> <li>Mark toplevel options, commands and modules that changed in latest version</li> <li>Now modules themselves can have version annotations in <code>note</code></li> </ul>","boost":-1},{"location":"CHANGELOG/#installers-and-container","title":"Installers and Container","text":"<ul> <li>make-binaries: Bump Erlang/OTP to 26.2.5 and Elixir 1.16.3</li> <li>make-binaries: Bump OpenSSL to 3.3.1</li> <li>make-binaries: Bump Linux-PAM to 1.6.1</li> <li>make-binaries: Bump Expat to 2.6.2</li> <li>make-binaries: Revert temporarily an OTP commit that breaks MSSQL (#4178)</li> <li>CONTAINER.md: Invalid <code>CTL_ON_CREATE</code> usage in docker-compose example</li> </ul>","boost":-1},{"location":"CHANGELOG/#webadmin_3","title":"WebAdmin","text":"<ul> <li>ejabberd_ctl: Improve parsing of commas in arguments</li> <li>ejabberd_ctl: Fix output of UTF-8-encoded binaries</li> <li>WebAdmin: Remove webadmin_view for now, as commands allow more fine-grained permissions</li> <li>WebAdmin: Unauthorized response: include some text to direct to the logs</li> <li>WebAdmin: Improve home page</li> <li>WebAdmin: Sort alphabetically the menu items, except the most used ones</li> <li>WebAdmin: New login box in the left menu bar</li> <li>WebAdmin: Add make_command functions to produce HTML command element</li> <li>Document 'any' argument and result type, useful for internal commands</li> <li>Commands with 'internal' tag: don't list and block execution by frontends</li> <li>WebAdmin: Move content to commands; new pages; hook changes; new commands</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2402","title":"Version 24.02","text":"","boost":-1},{"location":"CHANGELOG/#core_2","title":"Core:","text":"<ul> <li>Added Matrix gateway in <code>mod_matrix_gw</code></li> <li>Support SASL2 and Bind2</li> <li>Support tls-server-end-point channel binding and sasl2 codec</li> <li>Support tls-exporter channel binding</li> <li>Support XEP-0474: SASL SCRAM Downgrade Protection</li> <li>Fix presenting features and returning results of inline bind2 elements</li> <li><code>disable_sasl_scram_downgrade_protection</code>: New option to disable XEP-0474</li> <li><code>negotiation_timeout</code>: Increase default value from 30s to 2m</li> <li>mod_carboncopy: Teach how to interact with bind2 inline requests</li> </ul>","boost":-1},{"location":"CHANGELOG/#other","title":"Other:","text":"<ul> <li>ejabberdctl: Fix startup problem when having set <code>EJABBERD_OPTS</code> and logger options</li> <li>ejabberdctl: Set EJABBERD_OPTS back to <code>\"\"</code>, and use previous flags as example</li> <li>eldap: Change logic for <code>eldap tls_verify=soft</code> and <code>false</code></li> <li>eldap: Don't set <code>fail_if_no_peer_cert</code> for eldap ssl client connections</li> <li>Ignore hints when checking for chat states</li> <li>mod_mam: Support XEP-0424 Message Retraction</li> <li>mod_mam: Fix XEP-0425: Message Moderation with SQL storage</li> <li>mod_ping: Support XEP-0198 pings when stream management is enabled</li> <li>mod_pubsub: Normalize pubsub <code>max_items</code> node options on read</li> <li>mod_pubsub: PEP nodetree: Fix reversed logic in node fixup function</li> <li>mod_pubsub: Only care about PEP bookmarks options when creating node from scratch</li> </ul>","boost":-1},{"location":"CHANGELOG/#sql_3","title":"SQL:","text":"<ul> <li>MySQL: Support <code>sha256_password</code> auth plugin</li> <li>ejabberd_sql_schema: Use the first unique index as a primary key</li> <li>Update SQL schema files for MAM's XEP-0424</li> <li>New option <code>sql_flags</code>: right now only useful to enable <code>mysql_alternative_upsert</code></li> </ul>","boost":-1},{"location":"CHANGELOG/#installers-and-container_1","title":"Installers and Container:","text":"<ul> <li>Container: Add ability to ignore failures in execution of <code>CTL_ON_*</code> commands</li> <li>Container: Update to Erlang/OTP 26.2, Elixir 1.16.1 and Alpine 3.19</li> <li>Container: Update this custom ejabberdctl to match the main one</li> <li>make-binaries: Bump OpenSSL 3.2.1, Erlang/OTP 26.2.2, Elixir 1.16.1</li> <li>make-binaries: Bump many dependency versions</li> </ul>","boost":-1},{"location":"CHANGELOG/#commands-api_5","title":"Commands API:","text":"<ul> <li><code>print_sql_schema</code>: New command available in ejabberdctl command-line script</li> <li>ejabberdctl: Rework temporary node name generation</li> <li>ejabberdctl: Print argument description, examples and note in help</li> <li>ejabberdctl: Document exclusive ejabberdctl commands like all the others</li> <li>Commands: Add a new <code>muc_sub</code> tag to all the relevant commands</li> <li>Commands: Improve syntax of many commands documentation</li> <li>Commands: Use list arguments in many commands that used separators</li> <li>Commands: <code>set_presence</code>: switch priority argument from string to integer</li> <li>ejabberd_commands: Add the command API version as a tag <code>vX</code></li> <li>ejabberd_ctl: Add support for list and tuple arguments</li> <li>ejabberd_xmlrpc: Fix support for restuple error response</li> <li>mod_http_api: When no specific API version is requested, use the latest</li> </ul>","boost":-1},{"location":"CHANGELOG/#compilation-with-rebar3elixirmix","title":"Compilation with Rebar3/Elixir/Mix:","text":"<ul> <li>Fix compilation with Erlang/OTP 27: don't use the reserved word 'maybe'</li> <li>configure: Fix explanation of <code>--enable-group</code> option (#4135)</li> <li>Add observer and runtime_tools in releases when <code>--enable-tools</code></li> <li>Update \"make translations\" to reduce build requirements</li> <li>Use Luerl 1.0 for Erlang 20, 1.1.1 for 21-26, and temporary fork for 27</li> <li>Makefile: Add <code>install-rel</code> and <code>uninstall-rel</code></li> <li>Makefile: Rename <code>make rel</code> to <code>make prod</code></li> <li>Makefile: Update <code>make edoc</code> to use ExDoc, requires mix</li> <li>Makefile: No need to use <code>escript</code> to run rebar|rebar3|mix</li> <li>configure: If <code>--with-rebar=rebar3</code> but rebar3 not system-installed, use local one</li> <li>configure: Use Mix or Rebar3 by default instead of Rebar2 to compile ejabberd</li> <li>ejabberdctl: Detect problem running iex or etop and show explanation</li> <li>Rebar3: Include Elixir files when making a release</li> <li>Rebar3: Workaround to fix protocol consolidation</li> <li>Rebar3: Add support to compile Elixir dependencies</li> <li>Rebar3: Compile explicitly our Elixir files when <code>--enable-elixir</code></li> <li>Rebar3: Provide proper path to <code>iex</code></li> <li>Rebar/Rebar3: Update binaries to work with Erlang/OTP 24-27</li> <li>Rebar/Rebar3: Remove Elixir as a rebar dependency</li> <li>Rebar3/Mix: If <code>dev</code> profile/environment, enable tools automatically</li> <li>Elixir: Fix compiling ejabberd as a dependency (#4128)</li> <li>Elixir: Fix ejabberdctl start/live when installed</li> <li>Elixir: Fix: <code>FORMATTER ERROR: bad return value</code> (#4087)</li> <li>Elixir: Fix: Couldn't find file <code>Elixir Hex API</code></li> <li>Mix: Enable stun by default when <code>vars.config</code> not found</li> <li>Mix: New option <code>vars_config_path</code> to set path to <code>vars.config</code> (#4128)</li> <li>Mix: Fix ejabberdctl iexlive problem locating iex in an OTP release</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2310","title":"Version 23.10","text":"","boost":-1},{"location":"CHANGELOG/#compilation_1","title":"Compilation:","text":"<ul> <li>Erlang/OTP: Raise the requirement to Erlang/OTP 20.0 as a minimum</li> <li>CI: Update tests to Erlang/OTP 26 and recent Elixir</li> <li>Move Xref and Dialyzer options from workflows to <code>rebar.config</code></li> <li>Add sections to <code>rebar.config</code> to organize its content</li> <li>Dialyzer dirty workarounds because <code>re:mp()</code> is not an exported type</li> <li>When installing module already configured, keep config as example</li> <li>Elixir 1.15 removed support for <code>--app</code></li> <li>Elixir: Improve support to stop external modules written in Elixir</li> <li>Elixir: Update syntax of function calls as recommended by Elixir compiler</li> <li>Elixir: When building OTP release with mix, keep <code>ERLANG_NODE=ejabberd@localhost</code></li> <li><code>ejabberdctl</code>: Pass <code>ERLANG_OPTS</code> when calling <code>erl</code> to parse the <code>INET_DIST_INTERFACE</code> (#4066</li> </ul>","boost":-1},{"location":"CHANGELOG/#commands","title":"Commands:","text":"<ul> <li><code>create_room_with_opts</code>: Fix typo and move examples to <code>args_example</code> (#4080)</li> <li><code>etop</code>: Let <code>ejabberdctl etop</code> work in a release (if <code>observer</code> application is available)</li> <li><code>get_roster</code>: Command now returns groups in a list instead of newlines (#4088)</li> <li><code>halt</code>: New command to halt ejabberd abruptly with an error status code</li> <li><code>ejabberdctl</code>: Fix calling ejabberdctl command with wrong number of arguments with Erlang 26</li> <li><code>ejabberdctl</code>: Improve printing lists in results</li> <li><code>ejabberdctl</code>: Support <code>policy=user</code> in the help and return proper arguments</li> <li><code>ejabberdctl</code>: Document how to stop a debug shell: control+g</li> </ul>","boost":-1},{"location":"CHANGELOG/#container_1","title":"Container:","text":"<ul> <li>Dockerfile: Add missing dependency for mssql databases</li> <li>Dockerfile: Reorder stages and steps for consistency</li> <li>Dockerfile: Use Alpine as base for <code>METHOD=package</code></li> <li>Dockerfile: Rename packages to improve compatibility</li> <li>Dockerfile: Provide specific OTP and elixir vsn for direct compilation</li> <li>Halt ejabberd if a command in <code>CTL_ON_</code> fails during ejabberd startup</li> </ul>","boost":-1},{"location":"CHANGELOG/#core_3","title":"Core:","text":"<ul> <li><code>auth_external_user_exists_check</code>: New option (#3377)</li> <li><code>gen_mod</code>: Extend <code>gen_mod</code> API to simplify hooks and IQ handlers registration</li> <li><code>gen_mod</code>: Add shorter forms for <code>gen_mod</code> hook/<code>iq_handler</code> API</li> <li><code>gen_mod</code>: Update modules to the new <code>gen_mod</code> API</li> <li><code>install_contrib_modules</code>: New option to define contrib modules to install automatically</li> <li><code>unix_socket</code>: New listener option, useful when setting unix socket files (#4059)</li> <li><code>ejabberd_systemd</code>: Add a few debug messages</li> <li><code>ejabberd_systemd</code>: Avoid using <code>gen_server</code> timeout (#4054)(#4058)</li> <li><code>ejabberd_listener</code>: Increase default listen queue backlog value to 128, which is the default value on both Linux and FreeBSD (#4025)</li> <li>OAuth: Handle <code>badpass</code> error message</li> <li>When sending message on behalf of user, trigger <code>user_send_packet</code> (#3990)</li> <li>Web Admin: In roster page move the <code>AddJID</code> textbox to top (#4067)</li> <li>Web Admin: Show a warning when visiting webadmin with non-privileged account (#4089)</li> </ul>","boost":-1},{"location":"CHANGELOG/#docs","title":"Docs:","text":"<ul> <li>Example configuration: clarify 5223 tls options; specify s2s shaper</li> <li>Make sure that <code>policy=user</code> commands have <code>host</code> instead of <code>server</code> arg in docs</li> <li>Improve syntax of many command descriptions for the Docs site</li> <li>Move example Perl extauth script from ejabberd git to Docs site</li> <li>Remove obsolete example files, and add link in Docs to the archived copies</li> </ul>","boost":-1},{"location":"CHANGELOG/#installers-make-binaries","title":"Installers (<code>make-binaries</code>):","text":"<ul> <li>Bump Erlang/OTP version to 26.1.1, and other dependencies</li> <li>Remove outdated workaround</li> <li>Don't build Linux-PAM examples</li> <li>Fix check for current Expat version</li> <li>Apply minor simplifications</li> <li>Don't duplicate config entries</li> <li>Don't hard-code musl version</li> <li>Omit unnecessary glibc setting</li> <li>Set kernel version for all builds</li> <li>Let curl fail on HTTP errors</li> </ul>","boost":-1},{"location":"CHANGELOG/#modules","title":"Modules:","text":"<ul> <li><code>mod_muc_log</code>: Add trailing backslash to URLs shown in disco info</li> <li><code>mod_muc_occupantid</code>: New module with support for XEP-0421 Occupant Id (#3397)</li> <li><code>mod_muc_rtbl</code>: Better error handling in (#4050)</li> <li><code>mod_private</code>: Add support for XEP-0402 PEP Native Bookmarks</li> <li><code>mod_privilege</code>: Don't fail to edit roster (#3942)</li> <li><code>mod_pubsub</code>: Fix usage of <code>plugins</code> option, which produced <code>default_node_config</code> ignore (#4070)</li> <li><code>mod_pubsub</code>: Add <code>pubsub_delete_item</code> hook</li> <li><code>mod_pubsub</code>: Report support of <code>config-node-max</code> in pep</li> <li><code>mod_pubsub</code>: Relay pubsub iq queries to muc members without using bare jid (#4093)</li> <li><code>mod_pubsub</code>: Allow pubsub node owner to overwrite items published by other persons</li> <li><code>mod_push_keepalive</code>: Delay <code>wake_on_start</code></li> <li><code>mod_push_keepalive</code>: Don't let hook crash</li> <li><code>mod_push</code>: Add <code>notify_on</code> option</li> <li><code>mod_push</code>: Set <code>last-message-sender</code> to bare JID</li> <li><code>mod_register_web</code>: Make redirect to page that end with <code>/</code> (#3177)</li> <li><code>mod_shared_roster_ldap</code>: Don't crash in <code>get_member_jid</code> on empty output (#3614)</li> </ul>","boost":-1},{"location":"CHANGELOG/#muc","title":"MUC:","text":"<ul> <li>Add support to register nick in a room (#3455)</li> <li>Convert <code>allow_private_message</code> MUC room option to <code>allowpm</code> (#3736)</li> <li>Update xmpp version to send <code>roomconfig_changesubject</code> in disco#info (#4085)</li> <li>Fix crash when loading room from DB older than ffa07c6, 23.04</li> <li>Fix support to retract a MUC room message</li> <li>Don't always store messages passed through <code>muc_filter_message</code> (#4083)</li> <li>Pass also MUC room retract messages over the <code>muc_filter_message</code> (#3397)</li> <li>Pass MUC room private messages over the <code>muc_filter_message</code> too (#3397)</li> <li>Store the subject author JID, and run <code>muc_filter_message</code> when sending subject (#3397)</li> <li>Remove existing role information for users that are kicked from room (#4035)</li> <li>Expand rule \"mucsub subscribers are members in members only rooms\" to more places</li> </ul>","boost":-1},{"location":"CHANGELOG/#sql_4","title":"SQL:","text":"<ul> <li>Add ability to force alternative upsert implementation in mysql</li> <li>Properly parse mysql version even if it doesn't have type tag</li> <li>Use prepared statement with mysql</li> <li>Add alternate version of mysql upsert</li> <li><code>ejabberd_auth_sql</code>: Reset scram fields when setting plain password</li> <li><code>mod_privacy_sql</code>: Fix return values from <code>calculate_diff</code></li> <li><code>mod_privacy_sql</code>: Optimize <code>set_list</code></li> <li><code>mod_privacy_sql</code>: Use more efficient way to calculate changes in <code>set_privacy_list</code></li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2304","title":"Version 23.04","text":"","boost":-1},{"location":"CHANGELOG/#general","title":"General:","text":"<ul> <li>New <code>s2s_out_bounce_packet</code> hook</li> <li>Re-allow anonymous connection for connection without client certificates (#3985)</li> <li>Stop <code>ejabberd_system_monitor</code> before stopping node</li> <li><code>captcha_url</code> option now accepts <code>auto</code> value, and it's the default</li> <li><code>mod_mam</code>: Add support for XEP-0425: Message Moderation</li> <li><code>mod_mam_sql</code>: Fix problem with results of mam queries using rsm with max and before</li> <li><code>mod_muc_rtbl</code>: New module for Real-Time Block List for MUC rooms (#4017)</li> <li><code>mod_roster</code>: Set roster name from XEP-0172, or the stored one (#1611)</li> <li><code>mod_roster</code>: Preliminary support to store extra elements in subscription request (#840)</li> <li><code>mod_pubsub</code>: Pubsub xdata fields <code>max_item/item_expira/children_max</code> use <code>max</code> not <code>infinity</code></li> <li><code>mod_vcard_xupdate</code>: Invalidate <code>vcard_xupdate</code> cache on all nodes when vcard is updated</li> </ul>","boost":-1},{"location":"CHANGELOG/#admin","title":"Admin:","text":"<ul> <li><code>ext_mod</code>: Improve support for loading <code>*.so</code> files from <code>ext_mod</code> dependencies</li> <li>Improve output in <code>gen_html_doc_for_commands</code> command</li> <li>Fix ejabberdctl output formatting (#3979)</li> <li>Log HTTP handler exceptions</li> </ul>","boost":-1},{"location":"CHANGELOG/#muc_1","title":"MUC:","text":"<ul> <li>New command <code>get_room_history</code></li> <li>Persist <code>none</code> role for outcasts</li> <li>Try to populate room history from mam when unhibernating</li> <li>Make <code>mod_muc_room:set_opts</code> process persistent flag first</li> <li>Allow passing affiliations and subscribers to <code>create_room_with_opts</code> command</li> <li>Store state in db in <code>mod_muc:create_room()</code></li> <li>Make subscribers members by default</li> </ul>","boost":-1},{"location":"CHANGELOG/#sql-schemas","title":"SQL schemas:","text":"<ul> <li>Fix a long standing bug in new schema migration</li> <li><code>update_sql</code> command: Many improvements in new schema migration</li> <li><code>update_sql</code> command: Add support to migrate MySQL too</li> <li>Change PostgreSQL SERIAL to BIGSERIAL columns</li> <li>Fix minor SQL schema inconsistencies</li> <li>Remove unnecessary indexes</li> <li>New SQL schema migrate fix</li> </ul>","boost":-1},{"location":"CHANGELOG/#ms-sql","title":"MS SQL:","text":"<ul> <li>MS SQL schema fixes</li> <li>Add <code>new</code> schema for MS SQL</li> <li>Add MS SQL support for new schema migration</li> <li>Minor MS SQL improvements</li> <li>Fix MS SQL error caused by <code>ORDER BY</code> in subquery</li> </ul>","boost":-1},{"location":"CHANGELOG/#sql-tests","title":"SQL Tests:","text":"<ul> <li>Add support for running tests on MS SQL</li> <li>Add ability to run tests on upgraded DB</li> <li>Un-deprecate <code>ejabberd_config:set_option/2</code></li> <li>Use python3 to run <code>extauth.py</code> for tests</li> <li>Correct README for creating test docker MS SQL DB</li> <li>Fix TSQLlint warnings in MSSQL test script</li> </ul>","boost":-1},{"location":"CHANGELOG/#testing","title":"Testing:","text":"<ul> <li>Fix Shellcheck warnings in shell scripts</li> <li>Fix Remark-lint warnings</li> <li>Fix Prospector and Pylint warnings in test <code>extauth.py</code></li> <li>Stop testing ejabberd with Erlang/OTP 19.3, as Github Actions no longer supports ubuntu-18.04</li> <li>Test only with oldest OTP supported (20.0), newest stable (25.3) and bleeding edge (26.0-rc2)</li> <li>Upload Common Test logs as artifact in case of failure</li> </ul>","boost":-1},{"location":"CHANGELOG/#ecs-container-image","title":"<code>ecs</code> container image:","text":"<ul> <li>Update Alpine to 3.17 to get Erlang/OTP 25 and Elixir 1.14</li> <li>Add <code>tini</code> as runtime init</li> <li>Set <code>ERLANG_NODE</code> fixed to <code>ejabberd@localhost</code></li> <li>Upload images as artifacts to Github Actions</li> <li>Publish tag images automatically to ghcr.io</li> </ul>","boost":-1},{"location":"CHANGELOG/#ejabberd-container-image","title":"<code>ejabberd</code> container image:","text":"<ul> <li>Update Alpine to 3.17 to get Erlang/OTP 25 and Elixir 1.14</li> <li>Add <code>METHOD</code> to build container using packages (#3983)</li> <li>Add <code>tini</code> as runtime init</li> <li>Detect runtime dependencies automatically</li> <li>Remove unused Mix stuff: ejabberd script and static COOKIE</li> <li>Copy captcha scripts to <code>/opt/ejabberd-*/lib</code> like the installers</li> <li>Expose only <code>HOME</code> volume, it contains all the required subdirs</li> <li>ejabberdctl: Don't use <code>.../releases/COOKIE</code>, it's no longer included</li> </ul>","boost":-1},{"location":"CHANGELOG/#installers_1","title":"Installers:","text":"<ul> <li>make-binaries: Bump versions, e.g. erlang/otp to 25.3</li> <li>make-binaries: Fix building with erlang/otp v25.x</li> <li>make-packages: Fix for installers workflow, which didn't find lynx</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2301","title":"Version 23.01","text":"","boost":-1},{"location":"CHANGELOG/#general_1","title":"General:","text":"<ul> <li>Add <code>misc:uri_parse/2</code> to allow declaring default ports for protocols</li> <li>CAPTCHA: Add support to define module instead of path to script</li> <li>Clustering: Handle <code>mnesia_system_event mnesia_up</code> when other node joins this (#3842)</li> <li>ConverseJS: Don't set i18n option because Converse enforces it instead of browser lang (#3951)</li> <li>ConverseJS: Try to redirect access to files <code>mod_conversejs</code> to CDN when there is no local copies</li> <li>ext_mod: compile C files and install them in ejabberd's <code>priv</code></li> <li>ext_mod: Support to get module status from Elixir modules</li> <li>make-binaries: reduce log output</li> <li>make-binaries: Bump zlib version to 1.2.13</li> <li>MUC: Don't store mucsub presence events in offline storage</li> <li>MUC: <code>hibernation_time</code> is not an option worth storing in room state (#3946)</li> <li>Multicast: Jid format when <code>multicastc</code> was cached (#3950)</li> <li>mysql: Pass <code>ssl</code> options to mysql driver</li> <li>pgsql: Do not set <code>standard_conforming_strings</code> to <code>off</code> (#3944)</li> <li>OAuth: Accept <code>jid</code> as a HTTP URL query argument</li> <li>OAuth: Handle when client is not identified</li> <li>PubSub: Expose the <code>pubsub#type</code> field in <code>disco#info</code> query to the node (#3914)</li> <li>Translations: Update German translation</li> </ul>","boost":-1},{"location":"CHANGELOG/#admin_1","title":"Admin:","text":"<ul> <li><code>api_permissions</code>: Fix option crash when doesn't have <code>who:</code> section</li> <li><code>log_modules_fully</code>: New option to list modules that will log everything</li> <li><code>outgoing_s2s_families</code>: Changed option's default to IPv6, and fall back to IPv4</li> <li>Fix bash completion when using Relive or other install methods</li> <li>Fix portability issue with some shells (#3970)</li> <li>Allow admin command to subscribe new users to <code>members_only</code> rooms</li> <li>Use alternative <code>split/2</code> function that works with Erlang/OTP as old as 19.3</li> <li>Silent warning in OTP24 about not specified <code>cacerts</code> in SQL connections</li> <li>Fix compilation warnings with Elixir 1.14</li> </ul>","boost":-1},{"location":"CHANGELOG/#doap","title":"DOAP:","text":"<ul> <li>Support extended <code>-protocol</code> erlang attribute</li> <li>Add extended RFCs and XEP details to some protocol attributes</li> <li><code>tools/generate-doap.sh</code>: New script to generate DOAP file, add <code>make doap</code> (#3915)</li> <li><code>ejabberd.doap</code>: New DOAP file describing ejabberd supported protocols</li> </ul>","boost":-1},{"location":"CHANGELOG/#mqtt","title":"MQTT:","text":"<ul> <li>Add MQTT bridge module</li> <li>Add support for certificate authentication in MQTT bridge</li> <li>Implement reload in MQTT bridge</li> <li>Add support for websockets to MQTT bridge</li> <li>Recognize ws5/wss5 urls in MQTT bridge</li> <li><code>mqtt_publish</code>: New hook for MQTT publish event</li> <li><code>mqtt_(un)subscribe</code>: New hooks for MQTT subscribe &amp; unsubscribe events</li> </ul>","boost":-1},{"location":"CHANGELOG/#vscode","title":"VSCode:","text":"<ul> <li>Improve <code>.devcontainer</code> to use use devcontainer image and <code>.vscode</code></li> <li>Add <code>.vscode</code> files to instruct VSCode how to run ejabberd</li> <li>Add Erlang LS default configuration</li> <li>Add Elvis default configuration</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2210","title":"Version 22.10","text":"","boost":-1},{"location":"CHANGELOG/#core_4","title":"Core:","text":"<ul> <li>Add <code>log_burst_limit_*</code> options (#3865)</li> <li>Support <code>ERL_DIST_PORT</code> option to work without epmd</li> <li>Auth JWT: Catch all errors from <code>jose_jwt:verify</code> and log debugging details (#3890)</li> <li>CAPTCHA: Support <code>@VERSION@</code> and <code>@SEMVER@</code> in <code>captcha_cmd</code> option (#3835)</li> <li>HTTP: Fix unix socket support (#3894)</li> <li>HTTP: Handle invalid values in <code>X-Forwarded-For</code> header more gracefuly</li> <li>Listeners: Let module take over socket</li> <li>Listeners: Don't register listeners that failed to start in config reload</li> <li><code>mod_admin_extra</code>: Handle empty roster group names</li> <li><code>mod_conversejs</code>: Fix crash when mod_register not enabled (#3824)</li> <li><code>mod_host_meta</code>: Complain at start if listener is not encrypted</li> <li><code>mod_ping</code>: Fix regression on <code>stop_ping</code> in clustering context (#3817)</li> <li><code>mod_pubsub</code>: Don't crash on command failures</li> <li><code>mod_shared_roster</code>: Fix cache invalidation</li> <li><code>mod_shared_roster_ldap</code>: Update roster_get hook to use <code>#roster_item{}</code></li> <li><code>prosody2ejabberd</code>: Fix parsing of scram password from prosody</li> </ul>","boost":-1},{"location":"CHANGELOG/#mix","title":"MIX:","text":"<ul> <li>Fix MIX's filter_nodes</li> <li>Return user jid on join</li> <li><code>mod_mix_pam</code>: Add new MIX namespaces to disco features</li> <li><code>mod_mix_pam</code>: Add handling of IQs with newer MIX namespaces</li> <li><code>mod_mix_pam</code>: Do roster pushes on join/leave</li> <li><code>mod_mix_pam</code>: Parse sub elements of the mix join remote result</li> <li><code>mod_mix_pam</code>: Provide MIX channels as roster entries via hook</li> <li><code>mod_mix_pam</code>: Display joined channels on webadmin page</li> <li><code>mod_mix_pam</code>: Adapt to renaming of <code>participant-id</code> from mix_roster_channel record</li> <li><code>mod_roster</code>: Change hook type from <code>#roster{}</code> to <code>#roster_item{}</code></li> <li><code>mod_roster</code>: Respect MIX <code>&lt;annotate/&gt;</code> setting</li> <li><code>mod_roster</code>: Adapt to change of mix_annotate type to boolean in roster_query</li> <li><code>mod_shared_roster</code>: Fix wrong hook type <code>#roster{}</code> (now <code>#roster_item{}</code>)</li> </ul>","boost":-1},{"location":"CHANGELOG/#muc_2","title":"MUC:","text":"<ul> <li>Store role, and use it when joining a moderated room (#3330)</li> <li>Don't persist <code>none</code> role (#3330)</li> <li>Allow MUC service admins to bypass max_user_conferences limitation</li> <li>Show allow_query_users room option in disco info (#3830)</li> <li>mod_muc_room: Don't set affiliation to <code>none</code> if it's already <code>none</code> in <code>process_item_change/3</code></li> <li>Fix mucsub unsubscribe notification payload to have muc_unsubcribe in it</li> <li>Allow muc_{un}subscribe hooks to modify sent packets</li> <li>Pass room state to muc_{un}subscribed hook</li> <li>The archive_msg export fun requires MUC Service for room archives</li> <li>Export <code>mod_muc_admin:get_room_pid/2</code></li> <li>Export function for getting room diagnostics</li> </ul>","boost":-1},{"location":"CHANGELOG/#sql_5","title":"SQL:","text":"<ul> <li>Handle errors reported from begin/commit inside transaction</li> <li>Make connection close errors bubble up from inside sql transaction</li> <li>Make first sql reconnect wait shorter time</li> <li>React to sql driver process exit earlier</li> <li>Skip connection exit message when we triggered reconnection</li> <li>Add syntax_tools to applications, required when using ejabberd_sql_pt (#3869)</li> <li>Fix mam delete_old_messages_batch for sql backend</li> <li>Use <code>INSERT ... ON DUPLICATE KEY UPDATE</code> for upsert on mysql</li> <li>Update mysql library</li> <li>Catch mysql connection being close earlier</li> </ul>","boost":-1},{"location":"CHANGELOG/#build","title":"Build:","text":"<ul> <li><code>make all</code>: Generate start scripts here, not in <code>make install</code> (#3821)</li> <li><code>make clean</code>: Improve this and \"distclean\"</li> <li><code>make deps</code>: Ensure deps configuration is ran when getting deps (#3823)</li> <li><code>make help</code>: Update with recent changes</li> <li><code>make install</code>: Don't leak DESTDIR in files copied by 'make install'</li> <li><code>make options</code>: Fix error reporting on OTP24+</li> <li><code>make update</code>: configure also in this case, similarly to <code>make deps</code></li> <li>Add definition to detect OTP older than 25, used by ejabberd_auth_http</li> <li>Configure eimp with mix to detect image convert properly (#3823)</li> <li>Remove unused macro definitions detected by rebar3_hank</li> <li>Remove unused header files which content is already in xmpp library</li> </ul>","boost":-1},{"location":"CHANGELOG/#container_2","title":"Container:","text":"<ul> <li>Get ejabberd-contrib sources to include them</li> <li>Copy <code>.ejabberd-modules</code> directory if available</li> <li>Do not clone repo inside container build</li> <li>Use <code>make deps</code>, which performs additional steps (#3823)</li> <li>Support <code>ERL_DIST_PORT</code> option to work without epmd</li> <li>Copy <code>ejabberd-docker-install.bat</code> from docker-ejabberd git and rename it</li> <li>Set a less frequent healthcheck to reduce CPU usage (#3826)</li> <li>Fix build instructions, add more podman examples</li> </ul>","boost":-1},{"location":"CHANGELOG/#installers_2","title":"Installers:","text":"<ul> <li>make-binaries: Include CAPTCHA script with release</li> <li>make-binaries: Edit rebar.config more carefully</li> <li>make-binaries: Fix linking of EIMP dependencies</li> <li>make-binaries: Fix GitHub release version checks</li> <li>make-binaries: Adjust Mnesia spool directory path</li> <li>make-binaries: Bump Erlang/OTP version to 24.3.4.5</li> <li>make-binaries: Bump Expat and libpng versions</li> <li>make-packages: Include systemd unit with RPM</li> <li>make-packages: Fix permissions on RPM systems</li> <li>make-installers: Support non-root installation</li> <li>make-installers: Override code on upgrade</li> <li>make-installers: Apply cosmetic changes</li> </ul>","boost":-1},{"location":"CHANGELOG/#external-modules","title":"External modules:","text":"<ul> <li>ext_mod: Support managing remote nodes in the cluster</li> <li>ext_mod: Handle correctly when COMMIT.json not found</li> <li>Don't bother with COMMIT.json user-friendly feature in automated user case</li> <li>Handle not found COMMIT.json, for example in GH Actions</li> <li>Add WebAdmin page for managing external modules</li> </ul>","boost":-1},{"location":"CHANGELOG/#workflows-actions","title":"Workflows Actions:","text":"<ul> <li>Update workflows to Erlang 25</li> <li>Update workflows: Ubuntu 18 is deprecated and 22 is added</li> <li>CI: Remove syntax_tools from applications, as fast_xml fails Dialyzer</li> <li>Runtime: Add Xref options to be as strict as CI</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2205","title":"Version 22.05","text":"","boost":-1},{"location":"CHANGELOG/#core_5","title":"Core","text":"<ul> <li>C2S: Don't expect that socket will be available in <code>c2s_terminated</code> hook</li> <li>Event handling process hook tracing</li> <li>Guard against <code>erlang:system_info(logical_processors)</code> not always returning a number</li> <li><code>domain_balancing</code>: Allow for specifying <code>type</code> only, without specifying <code>component_number</code></li> </ul>","boost":-1},{"location":"CHANGELOG/#mqtt_1","title":"MQTT","text":"<ul> <li>Add TLS certificate authentication for MQTT connections</li> <li>Fix login when generating client id, keep connection record (#3593)</li> <li>Pass property name as expected in mqtt_codec (fixes login using MQTT 5)</li> <li>Support MQTT subscriptions spread over the cluster (#3750)</li> </ul>","boost":-1},{"location":"CHANGELOG/#muc_3","title":"MUC","text":"<ul> <li>Attach meta field with real jid to mucsub subscription events</li> <li>Handle user removal</li> <li>Stop empty MUC rooms 30 seconds after creation</li> <li><code>default_room_options</code>: Update options configurable</li> <li><code>subscribe_room_many_max_users</code>: New option in <code>mod_muc_admin</code></li> </ul>","boost":-1},{"location":"CHANGELOG/#mod_conversejs","title":"mod_conversejs","text":"<ul> <li>Improved options to support <code>@HOST@</code> and <code>auto</code> values</li> <li>Set <code>auth</code> and <code>register</code> options based on ejabberd configuration</li> <li><code>conversejs_options</code>: New option</li> <li><code>conversejs_resources</code>: New option</li> </ul>","boost":-1},{"location":"CHANGELOG/#pubsub","title":"PubSub","text":"<ul> <li><code>mod_pubsub</code>: Allow for limiting <code>item_expire</code> value</li> <li><code>mod_pubsub</code>: Unsubscribe JID on whitelist removal</li> <li><code>node_pep</code>: Add config-node and multi-items features (#3714)</li> </ul>","boost":-1},{"location":"CHANGELOG/#sql_6","title":"SQL","text":"<ul> <li>Improve compatibility with various db engine versions</li> <li>Sync old-to-new schema script with reality (#3790)</li> <li>Slight improvement in MSSQL testing support, but not yet complete</li> </ul>","boost":-1},{"location":"CHANGELOG/#other-modules","title":"Other Modules","text":"<ul> <li><code>auth_jwt</code>: Checking if an user is active in SM for a JWT authenticated user (#3795)</li> <li><code>mod_configure</code>: Implement Get List of Registered/Online Users from XEP-0133</li> <li><code>mod_host_meta</code>: New module to serve host-meta files, see XEP-0156</li> <li><code>mod_mam</code>: Store all mucsub notifications not only message notifications</li> <li><code>mod_ping</code>: Delete ping timer if resource is gone after the ping has been sent</li> <li><code>mod_ping</code>: Don't send ping if resource is gone</li> <li><code>mod_push</code>: Fix notifications for pending sessions (XEP-0198)</li> <li><code>mod_push</code>: Keep push session ID on session resume</li> <li><code>mod_shared_roster</code>: Adjust special group cache size</li> <li><code>mod_shared_roster</code>: Normalize JID on unset_presence (#3752)</li> <li><code>mod_stun_disco</code>: Fix parsing of IPv6 listeners</li> </ul>","boost":-1},{"location":"CHANGELOG/#dependencies_2","title":"Dependencies","text":"<ul> <li>autoconf: Supported from 2.59 to the new 2.71</li> <li>fast_tls: Update to 1.1.14 to support OpenSSL 3</li> <li>jiffy: Update to 1.1.1 to support Erlang/OTP 25.0-rc1</li> <li>luerl: Update to 1.0.0, now available in hex.pm</li> <li>lager: This dependency is used only when Erlang is older than 22</li> <li>rebar2: Updated binary to work from Erlang/OTP 22 to 25</li> <li>rebar3: Updated binary to work from Erlang/OTP 22 to 25</li> <li><code>make update</code>: Fix when used with rebar 3.18</li> </ul>","boost":-1},{"location":"CHANGELOG/#compile_1","title":"Compile","text":"<ul> <li><code>mix release</code>: Copy <code>include/</code> files for ejabberd, deps and otp, in <code>mix.exs</code></li> <li><code>rebar3 release</code>: Fix ERTS path in <code>ejabberdctl</code></li> <li><code>configure.ac</code>: Set default ejabberd version number when not using git</li> <li><code>mix.exs</code>: Move some dependencies as optional</li> <li><code>mix.exs</code>: No need to use Distillery, Elixir has built-in support for OTP releases (#3788)</li> <li><code>tools/make-binaries</code>: New script for building Linux binaries</li> <li><code>tools/make-installers</code>: New script for building command line installers</li> </ul>","boost":-1},{"location":"CHANGELOG/#start","title":"Start","text":"<ul> <li>New <code>make relive</code> similar to <code>ejabberdctl live</code> without installing</li> <li><code>ejabberdctl</code>: Fix some warnings detected by ShellCheck</li> <li><code>ejabberdctl</code>: Mention in the help: <code>etop</code>, <code>ping</code> and <code>started</code>/<code>stopped</code></li> <li><code>make rel</code>: Switch to paths: <code>conf/</code>, <code>database/</code>, <code>logs/</code></li> <li><code>mix.exs</code>: Add <code>-boot</code> and <code>-boot_var</code> in <code>ejabberdctl</code> instead of adding <code>vm.args</code></li> <li><code>tools/captcha.sh</code>: Fix some warnings detected by ShellCheck</li> </ul>","boost":-1},{"location":"CHANGELOG/#commands_1","title":"Commands","text":"<ul> <li>Accept more types of ejabberdctl commands arguments as JSON-encoded</li> <li><code>delete_old_mam_messages_batch</code>: New command with rate limit</li> <li><code>delete_old_messages_batch</code>: New command with rate limit</li> <li><code>get_room_occupants_number</code>: Don't request the whole MUC room state (#3684, #1964)</li> <li><code>get_vcard</code>: Add support for MUC room vCard</li> <li><code>oauth_revoke_token</code>: Add support to work with all backends</li> <li><code>room_unused_*</code>: Optimize commands in SQL by reusing <code>created_at</code></li> <li><code>rooms_unused_...</code>: Let <code>get_all_rooms</code> handle <code>global</code> argument (#3726)</li> <li><code>stop|restart</code>: Terminate ejabberd_sm before everything else to ensure sessions closing (#3641)</li> <li><code>subscribe_room_many</code>: New command</li> </ul>","boost":-1},{"location":"CHANGELOG/#translations","title":"Translations","text":"<ul> <li>Updated Catalan</li> <li>Updated French</li> <li>Updated German</li> <li>Updated Portuguese</li> <li>Updated Portuguese (Brazil)</li> <li>Updated Spanish</li> </ul>","boost":-1},{"location":"CHANGELOG/#workflows","title":"Workflows","text":"<ul> <li>CI: Publish CT logs and Cover on failure to an external GH Pages repo</li> <li>CI: Test shell scripts using ShellCheck (#3738)</li> <li>Container: New workflow to build and publish containers</li> <li>Installers: Add job to create draft release</li> <li>Installers: New workflow to build binary packages</li> <li>Runtime: New workflow to test compilation, rel, starting and ejabberdctl</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2112","title":"Version 21.12","text":"","boost":-1},{"location":"CHANGELOG/#commands_2","title":"Commands","text":"<ul> <li><code>create_room_with_opts</code>: Fixed when using SQL storage</li> <li><code>change_room_option</code>: Add missing fields from config inside <code>mod_muc_admin:change_options</code></li> <li>piefxis: Fixed arguments of all commands</li> </ul>","boost":-1},{"location":"CHANGELOG/#modules_1","title":"Modules","text":"<ul> <li>mod_caps: Don't forget caps on XEP-0198 resumption</li> <li>mod_conversejs: New module to serve a simple page for Converse.js</li> <li>mod_http_upload_quota: Avoid <code>max_days</code> race</li> <li>mod_muc: Support MUC hats (XEP-0317, conversejs/prosody compatible)</li> <li>mod_muc: Optimize MucSub processing</li> <li>mod_muc: Fix exception in mucsub {un}subscription events multicast handler</li> <li>mod_multicast: Improve and optimize multicast routing code</li> <li>mod_offline: Allow storing non-composing x:events in offline</li> <li>mod_ping: Send ping from server, not bare user JID</li> <li>mod_push: Fix handling of MUC/Sub messages</li> <li>mod_register: New allow_modules option to restrict registration modules</li> <li>mod_register_web: Handle unknown host gracefully</li> <li>mod_register_web: Use mod_register configured restrictions</li> </ul>","boost":-1},{"location":"CHANGELOG/#pubsub_1","title":"PubSub","text":"<ul> <li>Add <code>delete_expired_pubsub_items</code> command</li> <li>Add <code>delete_old_pubsub_items</code> command</li> <li>Optimize publishing on large nodes (SQL)</li> <li>Support unlimited number of items</li> <li>Support <code>max_items=max</code> node configuration</li> <li>Bump default value for <code>max_items</code> limit from 10 to 1000</li> <li>Use configured <code>max_items</code> by default</li> <li>node_flat: Avoid catch-all clauses for RSM</li> <li>node_flat_sql: Avoid catch-all clauses for RSM</li> </ul>","boost":-1},{"location":"CHANGELOG/#sql_7","title":"SQL","text":"<ul> <li>Use <code>INSERT ... ON CONFLICT</code> in SQL_UPSERT for PostgreSQL &gt;= 9.5</li> <li>mod_mam export: assign MUC entries to the MUC service</li> <li>MySQL: Fix typo when creating index</li> <li>PgSQL: Add SASL auth support, PostgreSQL 14</li> <li>PgSQL: Add missing SQL migration for table <code>push_session</code></li> <li>PgSQL: Fix <code>vcard_search</code> definition in pgsql new schema</li> </ul>","boost":-1},{"location":"CHANGELOG/#other_1","title":"Other","text":"<ul> <li><code>captcha-ng.sh</code>: \"sort -R\" command not POSIX, added \"shuf\" and \"cat\" as fallback</li> <li>Make s2s connection table cleanup more robust</li> <li>Update export/import of scram password to XEP-0227 1.1</li> <li>Update Jose to 1.11.1 (the last in hex.pm correctly versioned)</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2107","title":"Version 21.07","text":"","boost":-1},{"location":"CHANGELOG/#compilation_2","title":"Compilation","text":"<ul> <li>Add rebar3 3.15.2 binary</li> <li>Add support for mix to: <code>./configure --enable-rebar=mix</code></li> <li>Improved <code>make rel</code> to work with rebar3 and mix</li> <li>Add <code>make dev</code> to build a development release with rebar3 or mix</li> <li>Hex: Add <code>sql/</code> and <code>vars.config</code> to Hex package files</li> <li>Hex: Update mix applications list to fix error <code>p1_utils is listed as both...</code></li> <li>There are so many targets in Makefile... add <code>make help</code></li> <li>Fix extauth.py failure in test suite with Python 3</li> <li>Added experimental support for GitHub Codespaces</li> <li>Switch test service from TravisCI to GitHub Actions</li> </ul>","boost":-1},{"location":"CHANGELOG/#commands_3","title":"Commands:","text":"<ul> <li>Display extended error message in ejabberdctl</li> <li>Remove SMP option from ejabberdctl.cfg, <code>-smp</code> was removed in OTP 21</li> <li><code>create_room</code>: After creating room, store in DB if it's persistent</li> <li><code>help</code>: Major changes in its usage and output</li> <li><code>srg_create</code>: Update to use <code>label</code> parameter instead of <code>name</code></li> </ul>","boost":-1},{"location":"CHANGELOG/#modules_2","title":"Modules:","text":"<ul> <li>ejabberd_listener: New <code>send_timeout</code> option</li> <li>mod_mix: Improvements to update to 0.14.1</li> <li>mod_muc_room: Don't leak owner JIDs</li> <li>mod_multicast: Routing for more MUC packets</li> <li>mod_multicast: Correctly strip only other bcc addresses</li> <li>mod_mqtt: Allow shared roster group placeholder in mqtt topic</li> <li>mod_pubsub: Several fixes when using PubSub with RSM</li> <li>mod_push: Handle MUC/Sub events correctly</li> <li>mod_shared_roster: Delete cache after performing change to be sure that in cache will be up to date data</li> <li>mod_shared_roster: Improve database and caching</li> <li>mod_shared_roster: Reconfigure cache when options change</li> <li>mod_vcard: Fix invalid_encoding error when using extended plane characters in vcard</li> <li>mod_vcard: Update econf:vcard() to generate correct vcard_temp record</li> <li>WebAdmin: New simple pages to view mnesia tables information and content</li> <li>WebSocket: Fix typos</li> </ul>","boost":-1},{"location":"CHANGELOG/#sql_8","title":"SQL:","text":"<ul> <li>MySQL Backend Patch for scram-sha512</li> <li>SQLite: When exporting for SQLite, use its specific escape options</li> <li>SQLite: Minor fixes for new_sql_schema support</li> <li>mod_privacy: Cast as boolean when exporting privacy_list_data to PostgreSQL</li> <li>mod_mqtt: Add mqtt_pub table definition for MSSQL</li> <li>mod_shared_roster: Add missing indexes to <code>sr_group</code> tables in all SQL databases</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2104","title":"Version 21.04","text":"","boost":-1},{"location":"CHANGELOG/#api-commands","title":"API Commands:","text":"<ul> <li><code>add_rosteritem/...</code>: Add argument guards to roster commands</li> <li><code>get_user_subscriptions</code>: New command for MUC/Sub</li> <li><code>remove_mam_for_user_with_peer</code>: Fix when removing room archive</li> <li><code>send_message</code>: Fix bug introduced in ejabberd 21.01</li> <li><code>set_vcard</code>: Return modules errors</li> </ul>","boost":-1},{"location":"CHANGELOG/#build-and-setup","title":"Build and setup:","text":"<ul> <li>Allow ejabberd to be compatible as a dependency for an Erlang project using rebar3</li> <li>CAPTCHA: New question/answer-based CAPTCHA script</li> <li><code>--enable-lua</code>: new configure option for luerl instead of --enable-tools</li> <li>Remove support for HiPE, it was experimental and Erlang/OTP 24 removes it</li> <li>Update <code>sql_query</code> record to handle the Erlang/OTP 24 compiler reports</li> <li>Updated dependencies to fix Dialyzer warnings</li> </ul>","boost":-1},{"location":"CHANGELOG/#miscellaneous","title":"Miscellaneous:","text":"<ul> <li>CAPTCHA: Update <code>FORM_TYPE</code> from captcha to register</li> <li>LDAP: fix eldap certificate verification</li> <li>MySQL: Fix for \"specified key was too long\"</li> <li>Translations: updated the Esperanto, Greek, and Japanese translations</li> <li>Websocket: Fix PONG responses</li> </ul>","boost":-1},{"location":"CHANGELOG/#modules_3","title":"Modules:","text":"<ul> <li><code>mod_block_strangers</code>: If stanza is type error, allow it passing</li> <li><code>mod_caps</code>: Don't request roster when not needed</li> <li><code>mod_caps</code>: Skip reading roster in one more case</li> <li><code>mod_mam</code>: Remove <code>queryid</code> from MAM fin element</li> <li><code>mod_mqtt</code>: When deregistering XMPP account, close its MQTT sessions</li> <li><code>mod_muc</code>: Take in account subscriber's affiliation when checking access to moderated room</li> <li><code>mod_muc</code>: Use monitors to track online and hard-killed rooms</li> <li><code>mod_muc</code>: When occupant is banned, remove his subscriptions too</li> <li><code>mod_privacy</code>: Make fetching roster lazy</li> <li><code>mod_pubsub</code>: Don't fail on PEP unsubscribe</li> <li><code>mod_pubsub</code>: Fix <code>gen_pubsub_node:get_state</code> return value</li> <li><code>mod_vcard</code>: Obtain and provide photo type in vCard LDAP</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2101","title":"Version 21.01","text":"","boost":-1},{"location":"CHANGELOG/#miscellaneous-changes","title":"Miscellaneous changes:","text":"<ul> <li><code>log_rotate_size</code> option: Fix handling of \u2018infinity\u2019 value</li> <li><code>mod_time</code>: Fix invalid timezone</li> <li>Auth JWT: New <code>check_decoded_jwt</code> hook runs the default JWT verifier</li> <li>MUC: Allow non-occupant non-subscribed service admin send private MUC message</li> <li>MUC: New <code>max_password</code> and <code>max_captcha_whitelist</code> options</li> <li>OAuth: New <code>oauth_cache_rest_failure_life_time</code> option</li> <li>PEP: Skip reading pep nodes that we know won\u2019t be requested due to caps</li> <li>SQL: Add sql script to migrate mysql from old schema to new</li> <li>SQL: Don\u2019t use REPLACE for upsert when there are \u201c-\u201d fields.</li> <li>Shared Rosters LDAP: Add multi-domain support (and flexibility)</li> <li>Sqlite3: Fix dependency version</li> <li>Stun: Block loopback addresses by default</li> <li>Several documentation fixes and clarifications</li> </ul>","boost":-1},{"location":"CHANGELOG/#commands_4","title":"Commands:","text":"<ul> <li><code>decide_room</code>: Use better fallback value for room activity time when skipping room</li> <li><code>delete_old_message</code>: Fix when using sqlite spool table</li> <li><code>module_install</code>: Make ext_mod compile module with debug_info flags</li> <li><code>room_unused_*</code>: Don\u2019t fetch subscribers list</li> <li><code>send_message</code>: Don\u2019t include empty in messages</li> <li><code>set_room_affiliation</code>: Validate affiliations</li> </ul>","boost":-1},{"location":"CHANGELOG/#running","title":"Running:","text":"<ul> <li>Docker: New <code>Dockerfile</code> and <code>devcontainer.json</code></li> <li>New <code>ejabberdctl foreground-quiet</code></li> <li>Systemd: Allow for listening on privileged ports</li> <li>Systemd: Integrate nicely with systemd</li> </ul>","boost":-1},{"location":"CHANGELOG/#translations_1","title":"Translations:","text":"<ul> <li>Moved gettext PO files to a new <code>ejabberd-po</code> repository</li> <li>Improved several translations: Catalan, Chinese, German, Greek, Indonesian, Norwegian, Portuguese (Brazil), Spanish.</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2012","title":"Version 20.12","text":"<ul> <li>Add support for <code>SCRAM-SHA-{256,512}-{PLUS}</code> authentication</li> <li>Don't use same value in cache for user don't exist and wrong password</li> <li><code>outgoing_s2s_ipv*_address</code>: New options to set ipv4/ipv6 outbound s2s out interface</li> <li>s2s_send_packet: this hook now filters outgoing s2s stanzas</li> <li>start_room: new hook runs when a room process is started</li> <li>check_decoded_jwt: new hook to check decoded JWT after success authentication</li> </ul>","boost":-1},{"location":"CHANGELOG/#admin_2","title":"Admin","text":"<ul> <li>Docker: Fix DB initialization</li> <li>New sql_odbc_driver option: choose the mssql ODBC driver</li> <li>Rebar3: Fully supported. Enable with <code>./configure --with-rebar=/path/to/rebar3</code></li> <li>systemd: start ejabberd in foreground</li> </ul>","boost":-1},{"location":"CHANGELOG/#modules_4","title":"Modules:","text":"<ul> <li>MAM: Make sure that jid used as base in mam xml_compress is bare</li> <li>MAM: Support for MAM Flipped Pages</li> <li>MUC: Always show MucSub subscribers nicks</li> <li>MUC: Don't forget not-persistent rooms in load_permanent_rooms</li> <li>MUC Admin: Better error reporting</li> <li>MUC Admin: Fix commands with hibernated rooms</li> <li>MUC Admin: Many improvements in rooms_unused_list/destroy</li> <li>MUC Admin: create_room_with_opts Store options only if room starts</li> <li>Pubsub: Remove 'dag' node plugin documentation</li> <li>Push: Fix API call return type on error</li> <li>Push: Support cache config changes on reload</li> <li>Register: Allow for account-removal-only setup again</li> <li>Roster: Make roster subscriptions work better with invalid roster state in db</li> <li>Vcard: Fix vCard search by User when using Mnesia</li> <li>WebAdmin: Allow vhost admins to view WebAdmin menus</li> <li>WebAdmin: Don't do double utf-8 conversion on translated strings</li> <li>WebAdmin: Mark dangerous buttons with CSS</li> <li>WebSocket: Make websocket send put back pressure on c2s process</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2007","title":"Version 20.07","text":"","boost":-1},{"location":"CHANGELOG/#changes-in-this-version","title":"Changes in this version","text":"<ul> <li>Add support for using unix sockets in listeners.</li> <li>Make this version compatible with erlang R23</li> <li>Make room permissions checks more strict for subscribers</li> <li>Fix problem with muc rooms crashing when using muc logger   with some locales</li> <li>Limit stat calls that logger module issues</li> <li>Don't throw errors when using user_regexp acl rule and   having non-matching host</li> <li>Fix problem with leaving old data when updating shared rosters</li> <li>Fix edge case that caused failure of resuming old sessions with   stream management.</li> <li>Fix crash when room that was started with logging enabled was later   changed to logging disabled</li> <li>Increase default shaper limits (this should help with delays for   clients that are using jingle)</li> <li>Fix couple compatibility problems which prevented working on   erlang R19</li> <li>Fix sending presence unavailable when session terminates for   clients that only send directed presences (helps with sometimes   not leaving muc rooms on disconnect).</li> <li>Prevent supervisor errors for sockets that were closed before   they were passed to handler modules</li> <li>Make stun module work better with ipv6 addresses</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2003","title":"Version 20.03","text":"","boost":-1},{"location":"CHANGELOG/#changes-in-this-version_1","title":"Changes in this version","text":"<ul> <li>Add support of ssl connection when connection to mysql   database (configured with <code>sql_ssl: true</code> option)</li> <li>Experimental support for cockroachdb when configured   with postgres connector</li> <li>Add cache and optimize queries issued by <code>mod_shared_roster</code>,   this should greatly improve performance of this module when   used with <code>sql</code> backend</li> <li>Fix problem with accessing webadmin</li> <li>Make webadmin work even when url is missing trailing slash</li> <li>When compiling external modules with ext_mod, use flags   that were detected during compilation of ejabberd</li> <li>Make config changed to ldap options be updated when issued   <code>reload_config</code> command</li> <li>Fix <code>room_empty_destory</code> command</li> <li>Fix reporting errors in <code>send_stanza</code> command when xml   passed to it couldn't be passed correctly</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2002","title":"Version 20.02","text":"","boost":-1},{"location":"CHANGELOG/#changes-in-this-version_2","title":"Changes in this version","text":"<ul> <li>Fix problems when trying to use string format with unicode   values directly in xmpp nodes</li> <li>Add missing oauth_client table declaration in lite.new.sql</li> <li>Improve compatibility with CocroachDB</li> <li>Fix importing of piefxis files that did use scram passwords</li> <li>Fix importing of piefxis files that had multiple includes   in them</li> <li>Update jiffy dependency</li> <li>Allow storage of emojis when using mssql database (Thanks   to Christoph Scholz)</li> <li>Make ejabberd_auth_http be able to use auth_opts</li> <li>Make custom_headers options in http modules correctly   override built-in values</li> <li>Fix return value of reload_config and dump_config commands</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-2001","title":"Version 20.01","text":"","boost":-1},{"location":"CHANGELOG/#new-features","title":"New features","text":"<ul> <li>Implement OAUTH authentication in mqtt</li> <li>Make logging infrastructure use new logger introduced   in Erlang (requires OTP22)</li> <li>New configuration parser/validator</li> <li>Initial work on being able to use CockroachDB as database backend</li> <li>Add gc command</li> <li>Add option to disable using prepared statements on Postgresql</li> <li>Implement routine for converting password to SCRAM format   for all backends not only SQL</li> <li>Add infrastructure for having module documentation directly   in individual module source code</li> <li>Generate man page automatically</li> <li>Implement copy feature in mod_carboncopy</li> </ul>","boost":-1},{"location":"CHANGELOG/#fixes","title":"Fixes","text":"<ul> <li>Make webadmin work with configurable paths</li> <li>Fix handling of result in xmlrpc module</li> <li>Make webadmin work even when accessed through not declared domain</li> <li>Better error reporting in xmlrpc</li> <li>Limit amount of results returned by disco queries to pubsub nodes</li> <li>Improve validation of configured JWT keys</li> <li>Fix race condition in Redis/SQL startup</li> <li>Fix loading order of third party modules</li> <li>Fix reloading of ACL rules</li> <li>Make account removal requests properly route response</li> <li>Improve handling of malformed inputs in send_message command</li> <li>Omit push notification if storing message in offline storage   failed</li> <li>Fix crash in stream management when timeout was not set</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-1909","title":"Version 19.09","text":"","boost":-1},{"location":"CHANGELOG/#admin_3","title":"Admin","text":"<ul> <li>The minimum required Erlang/OTP version is now 19.3</li> <li>Fix API call using OAuth (#2982)</li> <li>Rename MUC command arguments from Host to Service (#2976)</li> </ul>","boost":-1},{"location":"CHANGELOG/#webadmin_4","title":"Webadmin","text":"<ul> <li>Don't treat 'Host' header as a virtual XMPP host (#2989)</li> <li>Fix some links to Guide in WebAdmin and add new ones (#3003)</li> <li>Use select fields to input host in WebAdmin Backup (#3000)</li> <li>Check account auth provided in WebAdmin is a local host (#3000)</li> </ul>","boost":-1},{"location":"CHANGELOG/#acme","title":"ACME","text":"<ul> <li>Improve ACME implementation</li> <li>Fix IDA support in ACME requests</li> <li>Fix unicode formatting in ACME module</li> <li>Log an error message on IDNA failure</li> <li>Support IDN hostnames in ACME requests</li> <li>Don't attempt to create ACME directory on ejabberd startup</li> <li>Don't allow requesting certificates for localhost or IP-like domains</li> <li>Don't auto request certificate for localhost and IP-like domains</li> <li>Add listener for ACME challenge in example config</li> </ul>","boost":-1},{"location":"CHANGELOG/#authentication","title":"Authentication","text":"<ul> <li>JWT-only authentication for some users (#3012)</li> </ul>","boost":-1},{"location":"CHANGELOG/#muc_4","title":"MUC","text":"<ul> <li>Apply default role after revoking admin affiliation (#3023)</li> <li>Custom exit message is not broadcast (#3004)</li> <li>Revert \"Affiliations other than admin and owner cannot invite to members_only rooms\" (#2987)</li> <li>When join new room with password, set pass and password_protected (#2668)</li> <li>Improve rooms_* commands to accept 'global' as MUC service argument (#2976)</li> <li>Rename MUC command arguments from Host to Service (#2976)</li> </ul>","boost":-1},{"location":"CHANGELOG/#sql_9","title":"SQL","text":"<ul> <li>Fix transactions for Microsoft SQL Server (#2978)</li> <li>Spawn SQL connections on demand only</li> </ul>","boost":-1},{"location":"CHANGELOG/#misc","title":"Misc","text":"<ul> <li>Add support for XEP-0328: JID Prep</li> <li>Added gsfonts for captcha</li> <li>Log Mnesia table type on creation</li> <li>Replicate Mnesia 'bosh' table when nodes are joined</li> <li>Fix certificate selection for s2s (#3015)</li> <li>Provide meaningful error when adding non-local users to shared roster (#3000)</li> <li>Websocket: don't treat 'Host' header as a virtual XMPP host (#2989)</li> <li>Fix sm ack related c2s error (#2984)</li> <li>Don't hide the reason why c2s connection has failed</li> <li>Unicode support</li> <li>Correctly handle unicode in log messages</li> <li>Fix unicode processing in ejabberd.yml</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-1908","title":"Version 19.08","text":"","boost":-1},{"location":"CHANGELOG/#administration_1","title":"Administration","text":"<ul> <li>Improve ejabberd halting procedure</li> <li>Process unexpected erlang messages uniformly: logging a warning</li> <li>mod_configure: Remove modules management</li> </ul>","boost":-1},{"location":"CHANGELOG/#configuration_1","title":"Configuration","text":"<ul> <li>Use new configuration validator</li> <li>ejabberd_http: Use correct virtual host when consulting trusted_proxies</li> <li>Fix Elixir modules detection in the configuration file</li> <li>Make option 'validate_stream' global</li> <li>Allow multiple definitions of host_config and append_host_config</li> <li>Introduce option 'captcha_url'</li> <li>mod_stream_mgmt: Allow flexible timeout format</li> <li>mod_mqtt: Allow flexible timeout format in session_expiry option</li> </ul>","boost":-1},{"location":"CHANGELOG/#misc_1","title":"Misc","text":"<ul> <li>Fix SQL connections leakage</li> <li>New authentication method using JWT tokens</li> <li>extauth: Add 'certauth' command</li> <li>Improve SQL pool logic</li> <li>Add and improve type specs</li> <li>Improve extraction of translated strings</li> <li>Improve error handling/reporting when loading language translations</li> <li>Improve hooks validator and fix bugs related to hooks registration</li> <li>Gracefully close inbound s2s connections</li> <li>mod_mqtt: Fix usage of TLS</li> <li>mod_offline: Make count_offline_messages cache work when using mam for storage</li> <li>mod_privacy: Don't attempt to query 'undefined' active list</li> <li>mod_privacy: Fix race condition</li> </ul>","boost":-1},{"location":"CHANGELOG/#muc_5","title":"MUC","text":"<ul> <li>Add code for hibernating inactive muc_room processes</li> <li>Improve handling of unexpected iq in mod_muc_room</li> <li>Attach mod_muc_room processes to a supervisor</li> <li>Restore room when receiving message or generic iq for not started room</li> <li>Distribute routing of MUC messages across all CPU cores</li> </ul>","boost":-1},{"location":"CHANGELOG/#pubsub_2","title":"PubSub","text":"<ul> <li>Fix pending nodes retrieval for SQL backend</li> <li>Check access_model when publishing PEP</li> <li>Remove deprecated pubsub plugins</li> <li>Expose access_model and publish_model in pubsub#metadata</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-1905","title":"Version 19.05","text":"","boost":-1},{"location":"CHANGELOG/#admin_4","title":"Admin","text":"<ul> <li>The minimum required Erlang/OTP version is now 19.1</li> <li>Provide a suggestion when unknown command, module, option or request handler is detected</li> <li>Deprecate some listening options: captcha, register, web_admin, http_bind and xmlrpc</li> <li>Add commands to get Mnesia info: mnesia_info and mnesia_table_info</li> <li>Fix Register command to respect mod_register's Access option</li> <li>Fixes in Prosody import: privacy and rooms</li> <li>Remove TLS options from the example config</li> <li>Improve request_handlers validator</li> <li>Fix syntax in example Elixir config file</li> </ul>","boost":-1},{"location":"CHANGELOG/#auth","title":"Auth","text":"<ul> <li>Correctly support cache tags in ejabberd_auth</li> <li>Don't process failed EXTERNAL authentication by mod_fail2ban</li> <li>Don't call to mod_register when it's not loaded</li> <li>Make anonymous auth don't {de}register user when there are other resources</li> </ul>","boost":-1},{"location":"CHANGELOG/#developer","title":"Developer","text":"<ul> <li>Rename listening callback from start/2 to start/3</li> <li>New hook called when room gets destroyed: room_destroyed</li> <li>New hooks for tracking mucsub subscriptions changes: muc_subscribed, muc_unsubscribed</li> <li>Make static hooks analyzer working again</li> </ul>","boost":-1},{"location":"CHANGELOG/#muc_6","title":"MUC","text":"<ul> <li>Service admins are allowed to recreate room even if archive is nonempty</li> <li>New option user_mucsub_from_muc_archive</li> <li>Avoid late arrival of get_disco_item response</li> <li>Handle get_subscribed_rooms call from mod_muc_room pid</li> <li>Fix room state cleanup from db on change of persistent option change</li> <li>Make get_subscribed_rooms work even for non-persistant rooms</li> <li>Allow non-moderator subscribers to get list of room subscribers</li> </ul>","boost":-1},{"location":"CHANGELOG/#offline","title":"Offline","text":"<ul> <li>New option bounce_groupchat: make it not bounce mucsub/groupchat messages</li> <li>New option use_mam_for_storage: fetch data from mam instead of spool table</li> <li>When applying limit of max msgs in spool check only spool size</li> <li>Do not store mucsub wrapped messages with no-store hint in offline storage</li> <li>Always store ActivityMarker messages</li> <li>Don't issue count/message fetch queries for offline from mam when not needed</li> <li>Properly handle infinity as max number of message in mam offline storage</li> <li>Sort messages by stanza_id when using mam storage in mod_offline</li> <li>Return correct value from count_offline_messages with mam storage option</li> <li>Make mod_offline put msg ignored by mam in spool when mam storage is on</li> </ul>","boost":-1},{"location":"CHANGELOG/#sql_10","title":"SQL:","text":"<ul> <li>Add SQL schemas for MQTT tables</li> <li>Report better errors on SQL terms decode failure</li> <li>Fix PostgreSQL compatibility in mod_offline_sql:remove_old_messages</li> <li>Fix handling of list arguments on pgsql</li> <li>Preliminary support for SQL in process_rosteritems command</li> </ul>","boost":-1},{"location":"CHANGELOG/#tests","title":"Tests","text":"<ul> <li>Add tests for user mucsub mam from muc mam</li> <li>Add tests for offline with mam storage</li> <li>Add tests for offline use_mam_for_storage</li> <li>Initial Docker environment to run ejabberd test suite</li> <li>Test offline:use_mam_for_storage, mam:user_mucsub_from_muc_archive used together</li> </ul>","boost":-1},{"location":"CHANGELOG/#websocket","title":"Websocket","text":"<ul> <li>Add WebSockets support to mod_mqtt</li> <li>Return \"Bad request\" error when origin in websocket connection doesn't match</li> <li>Fix RFC6454 violation on websocket connection when validating Origin header</li> <li>Origin header validation on websocket connection</li> </ul>","boost":-1},{"location":"CHANGELOG/#other-modules_1","title":"Other modules","text":"<ul> <li>mod_adhoc: Use xml:lang from stanza when it's missing in  element</li> <li>mod_announce: Add 'sessionid' attribute when required</li> <li>mod_bosh: Don't put duplicate polling attribute in bosh payload</li> <li>mod_http_api: Improve argument error messages and log messages</li> <li>mod_http_upload: Feed whole image to eimp:identify/1</li> <li>mod_http_upload: Log nicer warning on unknown host</li> <li>mod_http_upload: Case-insensitive host comparison</li> <li>mod_mqtt: Support other socket modules</li> <li>mod_push: Check for payload in encrypted messages</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-1902","title":"Version 19.02","text":"","boost":-1},{"location":"CHANGELOG/#admin_5","title":"Admin","text":"<ul> <li>Fix in configure.ac the Erlang/OTP version: from 17.5 to 19.0</li> <li>reload_config command: Fix crash when sql_pool_size option is used</li> <li>reload_config command: Fix crash when SQL is not configured</li> <li>rooms_empty_destroy command: Several fixes to behave more conservative</li> <li>Fix serverhost-&gt;host parameter name for muc_(un)register_nick API</li> </ul>","boost":-1},{"location":"CHANGELOG/#configuration_2","title":"Configuration","text":"<ul> <li>Allow specifying tag for listener for api_permission purposes</li> <li>Change default ciphers to intermediate</li> <li>Define default ciphers/protocol_option in example config</li> <li>Don't crash on malformed 'modules' section</li> <li>mod_mam: New option clear_archive_on_room_destroy to prevent archive removal on room destroy</li> <li>mod_mam: New option access_preferences to restrict who can modify the MAM preferences</li> <li>mod_muc: New option access_mam to restrict who can modify that room option</li> <li>mod_offline: New option store_groupchat to allow storing group chat messages</li> </ul>","boost":-1},{"location":"CHANGELOG/#core_6","title":"Core","text":"<ul> <li>Add MQTT protocol support</li> <li>Fix (un)setting of priority</li> <li>Use OTP application startup infrastructure for starting dependencies</li> <li>Improve starting order of several dependencies</li> </ul>","boost":-1},{"location":"CHANGELOG/#mam","title":"MAM","text":"<ul> <li>mod_mam_mnesia/sql: Improve check for empty archive</li> <li>disallow room creation if archive not empty and clear_archive_on_room_destroy is false</li> <li>allow check if archive is empty for or user or room</li> <li>Additional checks for database failures</li> </ul>","boost":-1},{"location":"CHANGELOG/#muc_7","title":"MUC","text":"<ul> <li>Make sure that room_destroyed is called even when some code throws in terminate</li> <li>Update muc room state after adding extra access field to it</li> <li>MUC/Sub: Send mucsub subscriber notification events with from set to room jid</li> </ul>","boost":-1},{"location":"CHANGELOG/#shared-roster","title":"Shared Roster","text":"<ul> <li>Don't perform roster push for non-local contacts</li> <li>Handle versioning result when shared roster group has remote account</li> <li>Fix SQL queries</li> </ul>","boost":-1},{"location":"CHANGELOG/#miscelanea_2","title":"Miscelanea","text":"<ul> <li>CAPTCHA: Add no-store hint to CAPTCHA challenge stanzas</li> <li>HTTP: Reject http_api request with malformed Authentication header</li> <li>mod_carboncopy: Don't lose carbons on presence change or session resumption</li> <li>mod_mix: Fix submission-id and channel resource</li> <li>mod_ping: Fix ping IQ reply/timeout processing (17.x regression)</li> <li>mod_private: Hardcode item ID for PEP bookmarks</li> <li>mod_push: Improve notification error handling</li> <li>PIEFXIS: Fix user export when password is scrammed</li> <li>Prosody: Improve import of roster items, rooms and attributes</li> <li>Translations: fixed \"make translations\"</li> <li>WebAdmin: Fix support to restart module with new options</li> </ul>","boost":-1},{"location":"CHANGELOG/#version-1812","title":"Version 18.12","text":"<ul> <li>MAM data store compression</li> <li>Proxy protocol support</li> <li>MUC Self-Ping optimization (XEP-0410)</li> <li>Bookmarks conversion (XEP-0411)</li> </ul>","boost":-1},{"location":"CONTAINER/","title":"Containers","text":""},{"location":"CONTAINER/#ejabberd-container-images","title":"ejabberd Container Images","text":"<p>ejabberd is an open-source, robust, scalable and extensible realtime platform built using Erlang/OTP, that includes XMPP Server, MQTT Broker and SIP Service.</p> <p>This page documents those container images (images comparison):</p> <ul> <li> <p>   published in ghcr.io/processone/ejabberd,   built using ejabberd repository,   both for stable ejabberd releases and the <code>master</code> branch, in x64 and arm64 architectures.</p> </li> <li> <p>   published in docker.io/ejabberd/ecs,   built using docker-ejabberd/ecs repository   for ejabberd stable releases in x64 architectures.</p> </li> </ul> <p>For Microsoft Windows, see Docker Desktop for Windows 10, and Docker Toolbox for Windows 7.</p> <p>For Kubernetes Helm, see help-ejabberd.</p>"},{"location":"CONTAINER/#start-ejabberd","title":"Start ejabberd","text":""},{"location":"CONTAINER/#daemon","title":"daemon","text":"<p>Start ejabberd in a new container:</p> <pre><code>docker run --name ejabberd -d -p 5222:5222 ghcr.io/processone/ejabberd\n</code></pre> <p>That runs the container as a daemon, using ejabberd default configuration file and XMPP domain <code>localhost</code>.</p> <p>Restart the stopped ejabberd container:</p> <pre><code>docker restart ejabberd\n</code></pre> <p>Stop the running container:</p> <pre><code>docker stop ejabberd\n</code></pre> <p>Remove the ejabberd container:</p> <pre><code>docker rm ejabberd\n</code></pre>"},{"location":"CONTAINER/#with-erlang-console","title":"with Erlang console","text":"<p>Start ejabberd with an interactive Erlang console attached using the <code>live</code> command:</p> <pre><code>docker run --name ejabberd -it -p 5222:5222 ghcr.io/processone/ejabberd live\n</code></pre> <p>That uses the default configuration file and XMPP domain <code>localhost</code>.</p>"},{"location":"CONTAINER/#with-your-data","title":"with your data","text":"<p>Pass a configuration file as a volume and share the local directory to store database:</p> <pre><code>mkdir conf &amp;&amp; cp ejabberd.yml.example conf/ejabberd.yml\n\nmkdir database &amp;&amp; chown ejabberd database\n\ndocker run --name ejabberd -it \\\n  -v $(pwd)/conf/ejabberd.yml:/opt/ejabberd/conf/ejabberd.yml \\\n  -v $(pwd)/database:/opt/ejabberd/database \\\n  -p 5222:5222 ghcr.io/processone/ejabberd live\n</code></pre> <p>Notice that ejabberd runs in the container with an account named <code>ejabberd</code> with UID 9000 and group <code>ejabberd</code> with GID 9000, and the volumes you mount must grant proper rights to that account.</p>"},{"location":"CONTAINER/#next-steps","title":"Next steps","text":""},{"location":"CONTAINER/#register-admin-account","title":"Register admin account","text":""},{"location":"CONTAINER/#_1","title":"","text":"<p>If you set the <code>REGISTER_ADMIN_PASSWORD</code> environment variable, an account is automatically registered with that password, and admin privileges are granted to it. The account created depends on what variables you have set:</p> <ul> <li><code>EJABBERD_MACRO_ADMIN=juliet@example.org</code> -&gt; <code>juliet@example.org</code></li> <li><code>EJABBERD_MACRO_HOST=example.org</code> -&gt; <code>admin@example.org</code></li> <li>None of those variables are set -&gt; <code>admin@localhost</code></li> </ul> <p>The account registration is shown in the container log:</p> <pre><code>:&gt; ejabberdctl register admin example.org somePassw0rd\nUser admin@example.org successfully registered\n</code></pre> <p>Alternatively, you can register the account manually yourself and edit <code>conf/ejabberd.yml</code> and add the ACL as explained in ejabberd Docs: Administration Account.</p>"},{"location":"CONTAINER/#_2","title":"Containers","text":"<p>The default ejabberd configuration has already granted admin privilege to an account that would be called <code>admin@localhost</code>, so you just need to register it, for example:</p> <pre><code>docker exec -it ejabberd ejabberdctl register admin localhost passw0rd\n</code></pre>"},{"location":"CONTAINER/#check-ejabberd-log","title":"Check ejabberd log","text":"<p>Check the content of the log files inside the container, even if you do not put it on a shared persistent drive:</p> <pre><code>docker exec -it ejabberd tail -f logs/ejabberd.log\n</code></pre>"},{"location":"CONTAINER/#inspect-container-files","title":"Inspect container files","text":"<p>The container uses Alpine Linux. Start a shell inside the container:</p> <pre><code>docker exec -it ejabberd sh\n</code></pre>"},{"location":"CONTAINER/#open-debug-console","title":"Open debug console","text":"<p>Open an interactive debug Erlang console attached to a running ejabberd in a running container:</p> <pre><code>docker exec -it ejabberd ejabberdctl debug\n</code></pre>"},{"location":"CONTAINER/#captcha","title":"CAPTCHA","text":"<p>ejabberd includes two example CAPTCHA scripts. If you want to use any of them, first install some additional required libraries:</p> <pre><code>docker exec --user root ejabberd apk add imagemagick ghostscript-fonts bash\n</code></pre> <p>Now update your ejabberd configuration file, for example: <pre><code>docker exec -it ejabberd vi conf/ejabberd.yml\n</code></pre></p> <p>and add this option: <pre><code>captcha_cmd: \"$HOME/bin/captcha.sh\"\n</code></pre></p> <p>Finally, reload the configuration file or restart the container: <pre><code>docker exec ejabberd ejabberdctl reload_config\n</code></pre></p> <p>If the CAPTCHA image is not visible, there may be a problem generating it (the ejabberd log file may show some error message); or the image URL may not be correctly detected by ejabberd, in that case you can set the correct URL manually, for example: <pre><code>captcha_url: https://localhost:5443/captcha\n</code></pre></p> <p>For more details about CAPTCHA options, please check the CAPTCHA documentation section.</p>"},{"location":"CONTAINER/#advanced","title":"Advanced","text":""},{"location":"CONTAINER/#ports","title":"Ports","text":"<p>The container image exposes several ports (check also Docs: Firewall Settings):</p> <ul> <li><code>5222</code>: The default port for XMPP clients.</li> <li><code>5269</code>: For XMPP federation. Only needed if you want to communicate with users on other servers.</li> <li><code>5280</code>: For admin interface (URL is <code>admin/</code>).</li> <li><code>1880</code>: For admin interface (URL is <code>/</code>, useful for podman-desktop and docker-desktop) </li> <li><code>5443</code>: With encryption, used for admin interface, API, CAPTCHA, OAuth, Websockets and XMPP BOSH.</li> <li><code>1883</code>: Used for MQTT</li> <li><code>4369-4399</code>: EPMD and Erlang connectivity, used for <code>ejabberdctl</code> and clustering</li> <li><code>5210</code>: Erlang connectivity when <code>ERL_DIST_PORT</code> is set, alternative to EPMD </li> </ul>"},{"location":"CONTAINER/#volumes","title":"Volumes","text":"<p>ejabberd produces two types of data: log files and database spool files (Mnesia). This is the kind of data you probably want to store on a persistent or local drive (at least the database).</p> <p>The volumes you may want to map:</p> <ul> <li><code>/opt/ejabberd/conf/</code>: Directory containing configuration and certificates</li> <li><code>/opt/ejabberd/database/</code>: Directory containing Mnesia database. You should back up or export the content of the directory to persistent storage (host storage, local storage, any storage plugin)</li> <li><code>/opt/ejabberd/logs/</code>: Directory containing log files</li> <li><code>/opt/ejabberd/upload/</code>: Directory containing uploaded files. This should also be backed up.</li> </ul> <p>All these files are owned by an account named <code>ejabberd</code> with group <code>ejabberd</code> in the container. Its corresponding <code>UID:GID</code> is <code>9000:9000</code>. If you prefer bind mounts instead of volumes, then you need to map this to valid <code>UID:GID</code> on your host to get read/write access on mounted directories.</p> <p>If using Docker, try: <pre><code>mkdir database\nsudo chown 9000:9000 database\n</code></pre></p> <p>If using Podman, try: <pre><code>mkdir database\npodman unshare chown 9000:9000 database\n</code></pre></p> <p>It's possible to install additional ejabberd modules using volumes, check this Docs tutorial.</p>"},{"location":"CONTAINER/#commands-on-start","title":"Commands on start","text":"<p>The ejabberdctl script reads the <code>CTL_ON_CREATE</code> environment variable the first time the container is started, and reads <code>CTL_ON_START</code> every time the container is started. Those variables can contain one ejabberdctl command, or several commands separated with the blankspace and <code>;</code> characters.</p> <p>If any of those commands returns a failure, the container starting gets aborted. If there is a command with a result that can be ignored, prefix that command with <code>!</code></p> <p>This example, registers an <code>admin@localhost</code> account when the container is first created. Everytime the container starts, it shows the list of registered accounts, checks that the admin account exists and password is valid, changes the password of an account if it exists (ignoring any failure), and shows the ejabberd starts (check also the full example): <pre><code>    environment:\n      - CTL_ON_CREATE=register admin localhost asd\n      - CTL_ON_START=stats registeredusers ;\n                     check_password admin localhost asd ;\n                     ! change_password bot123 localhost qqq ;\n                     status\n</code></pre></p>"},{"location":"CONTAINER/#macros-in-environment","title":"Macros in environment","text":"<p>ejabberd reads <code>EJABBERD_MACRO_*</code> environment variables and uses them to define the corresponding macros, overwriting the corresponding macro definition if it was set in the configuration file. This is supported since ejabberd 24.12.</p> <p>For example, if you configure this in <code>ejabberd.yml</code>:</p> <pre><code>acl:\n  admin:\n    user: ADMIN\n</code></pre> <p>now you can define the admin account JID using an environment variable: <pre><code>    environment:\n      - EJABBERD_MACRO_ADMIN=admin@localhost\n</code></pre></p> <p>Check the full example for other example.</p>"},{"location":"CONTAINER/#ejabberd-contrib","title":"ejabberd-contrib","text":"<p>This section addresses those topics related to ejabberd-contrib:</p> <ul> <li>Download source code</li> <li>Install a module</li> <li>Install git for dependencies</li> <li>Install your module</li> </ul>"},{"location":"CONTAINER/#download-source-code","title":"Download source code","text":"<p>The <code>ejabberd</code> container image includes the ejabberd-contrib git repository source code, but <code>ecs</code> does not, so first download it: <pre><code>$ docker exec ejabberd ejabberdctl modules_update_specs\n</code></pre></p>"},{"location":"CONTAINER/#install-a-module","title":"Install a module","text":"<p>Compile and install any of the contributed modules, for example: <pre><code>docker exec ejabberd ejabberdctl module_install mod_statsdx\n\nModule mod_statsdx has been installed and started.\nIt's configured in the file:\n  /opt/ejabberd/.ejabberd-modules/mod_statsdx/conf/mod_statsdx.yml\nConfigure the module in that file, or remove it\nand configure in your main ejabberd.yml\n</code></pre></p>"},{"location":"CONTAINER/#install-git-for-dependencies","title":"Install git for dependencies","text":"<p>Some modules depend on erlang libraries, but the container images do not include <code>git</code> or <code>mix</code> to download them. Consequently, when you attempt to install such a module, there will be error messages like:</p> <pre><code>docker exec ejabberd ejabberdctl module_install ejabberd_observer_cli\n\nI'll download \"recon\" using git because I can't use Mix to fetch from hex.pm:\n  /bin/sh: mix: not found\nFetching dependency observer_cli:\n  /bin/sh: git: not found\n...\n</code></pre> <p>the solution is to install <code>git</code> in the container image:</p> <pre><code>docker exec --user root ejabberd apk add git\n\nfetch https://dl-cdn.alpinelinux.org/alpine/v3.21/main/x86_64/APKINDEX.tar.gz\nfetch https://dl-cdn.alpinelinux.org/alpine/v3.21/community/x86_64/APKINDEX.tar.gz\n(1/3) Installing pcre2 (10.43-r0)\n(2/3) Installing git (2.47.2-r0)\n(3/3) Installing git-init-template (2.47.2-r0)\nExecuting busybox-1.37.0-r12.trigger\nOK: 27 MiB in 42 packages\n</code></pre> <p>and now you can upgrade the module:</p> <pre><code>docker exec ejabberd ejabberdctl module_upgrade ejabberd_observer_cli\n\nI'll download \"recon\" using git because I can't use Mix to fetch from hex.pm:\n/bin/sh: mix: not found\nFetching dependency observer_cli: Cloning into 'observer_cli'...\nFetching dependency os_stats: Cloning into 'os_stats'...\nFetching dependency recon: Cloning into 'recon'...\nInlining: inline_size=24 inline_effort=150\nOld inliner: threshold=0 functions=[{insert,2},{merge,2}]\nModule ejabberd_observer_cli has been installed.\nNow you can configure it in your ejabberd.yml\nI'll download \"recon\" using git because I can't use Mix to fetch from hex.pm:\n/bin/sh: mix: not found\n</code></pre>"},{"location":"CONTAINER/#install-your-module","title":"Install your module","text":"<p>If you developed an ejabberd module, you can install it in your container image:</p> <ol> <li> <p>Create a local directory for <code>ejabberd-modules</code>:</p> <pre><code>mkdir docker-modules\n</code></pre> </li> <li> <p>Then create the directory structure for your custom module:</p> <pre><code>cd docker-modules\n\nmkdir -p sources/mod_hello_world/\ntouch sources/mod_hello_world/mod_hello_world.spec\n\nmkdir sources/mod_hello_world/src/\nmv mod_hello_world.erl sources/mod_hello_world/src/\n\nmkdir sources/mod_hello_world/conf/\necho -e \"modules:\\n  mod_hello_world: {}\" &gt; sources/mod_hello_world/conf/mod_hello_world.yml\n\ncd ..\n</code></pre> </li> <li> <p>Grant ownership of that directory to the UID that ejabberd will use inside the Docker image:</p> <pre><code>sudo chown 9000 -R docker-modules/\n</code></pre> </li> <li> <p>Start ejabberd in the container:</p> <pre><code>sudo docker run \\\n  --name hellotest \\\n  -d \\\n  --volume \"$(pwd)/docker-modules:/home/ejabberd/.ejabberd-modules/\" \\\n  -p 5222:5222 \\\n  -p 5280:5280 \\\n  ejabberd/ecs\n</code></pre> </li> <li> <p>Check the module is available for installing, and then install it:</p> <pre><code>sudo docker exec -it hellotest ejabberdctl modules_available\nmod_hello_world []\n\nsudo docker exec -it hellotest ejabberdctl module_install mod_hello_world\n</code></pre> </li> <li> <p>If the module works correctly, you will see <code>Hello</code> in the ejabberd logs when it starts:</p> <pre><code>sudo docker exec -it hellotest grep Hello logs/ejabberd.log\n2020-10-06 13:40:13.154335+00:00 [info]\n  &lt;0.492.0&gt;@mod_hello_world:start/2:15 Hello, ejabberd world!\n</code></pre> </li> </ol>"},{"location":"CONTAINER/#ejabberdapi","title":"ejabberdapi","text":"<p>When the container is running (and thus ejabberd), you can exec commands inside the container using <code>ejabberdctl</code> or any other of the available interfaces, see Understanding ejabberd \"commands\"</p> <p>Additionally, the container image includes the <code>ejabberdapi</code> executable. Please check the ejabberd-api homepage for configuration and usage details.</p> <p>For example, if you configure ejabberd like this: <pre><code>listen:\n  -\n    port: 5282\n    module: ejabberd_http\n    request_handlers:\n      \"/api\": mod_http_api\n\nacl:\n  loopback:\n    ip:\n      - 127.0.0.0/8\n      - ::1/128\n      - ::FFFF:127.0.0.1/128\n\napi_permissions:\n  \"admin access\":\n    who:\n      access:\n        allow:\n          acl: loopback\n    what:\n      - \"register\"\n</code></pre></p> <p>Then you could register new accounts with this query:</p> <pre><code>docker exec -it ejabberd ejabberdapi register --endpoint=http://127.0.0.1:5282/ --jid=admin@localhost --password=passw0rd\n</code></pre>"},{"location":"CONTAINER/#clustering","title":"Clustering","text":"<p>When setting several containers to form a cluster of ejabberd nodes, each one must have a different Erlang Node Name and the same Erlang Cookie.</p> <p>For this you can either:</p> <ul> <li>edit <code>conf/ejabberdctl.cfg</code> and set variables <code>ERLANG_NODE</code> and <code>ERLANG_COOKIE</code></li> <li>set the environment variables <code>ERLANG_NODE_ARG</code> and <code>ERLANG_COOKIE</code></li> </ul> <p>Example to connect a local <code>ejabberdctl</code> to a containerized ejabberd:</p> <ol> <li>When creating the container, export port 5210, and set <code>ERLANG_COOKIE</code>:     <pre><code>docker run --name ejabberd -it \\\n  -e ERLANG_COOKIE=`cat $HOME/.erlang.cookie` \\\n  -p 5210:5210 -p 5222:5222 \\\n  ghcr.io/processone/ejabberd\n</code></pre></li> <li>Set <code>ERL_DIST_PORT=5210</code> in <code>ejabberdctl.cfg</code> of container and local ejabberd</li> <li>Restart the container</li> <li>Now use <code>ejabberdctl</code> in your local ejabberd deployment</li> </ol> <p>To connect using a local <code>ejabberd</code> script: <pre><code>ERL_DIST_PORT=5210 _build/dev/rel/ejabberd/bin/ejabberd ping\n</code></pre></p> <p>Example using environment variables (see full example docker-compose.yml): <pre><code>    environment:\n      - ERLANG_NODE_ARG=ejabberd@node7\n      - ERLANG_COOKIE=dummycookie123\n</code></pre></p> <p>Once you have the ejabberd nodes properly set and running, you can tell the secondary nodes to join the master node using the <code>join_cluster</code> API call.</p> <p>Example using environment variables (see the full <code>docker-compose.yml</code> clustering example): <pre><code>environment:\n  - ERLANG_NODE_ARG=ejabberd@replica\n  - ERLANG_COOKIE=dummycookie123\n  - CTL_ON_CREATE=join_cluster ejabberd@main\n</code></pre></p>"},{"location":"CONTAINER/#change-mnesia-node-name","title":"Change Mnesia Node Name","text":"<p>To use the same Mnesia database in a container with a different hostname, it is necessary to change the old hostname stored in Mnesia.</p> <p>This section is equivalent to the ejabberd Documentation Change Computer Hostname, but particularized to containers that use this <code>ecs</code> container image from ejabberd 23.01 or older.</p>"},{"location":"CONTAINER/#setup-old-container","title":"Setup Old Container","text":"<p>Let's assume a container running ejabberd 23.01 (or older) from this <code>ecs</code> container image, with the database directory binded and one registered account. This can be produced with: <pre><code>OLDCONTAINER=ejaold\nNEWCONTAINER=ejanew\n\nmkdir database\nsudo chown 9000:9000 database\ndocker run -d --name $OLDCONTAINER -p 5222:5222 \\\n       -v $(pwd)/database:/opt/ejabberd/database \\\n       ghcr.io/processone/ejabberd:23.01\ndocker exec -it $OLDCONTAINER ejabberdctl started\ndocker exec -it $OLDCONTAINER ejabberdctl register user1 localhost somepass\ndocker exec -it $OLDCONTAINER ejabberdctl registered_users localhost\n</code></pre></p> <p>Methods to know the Erlang node name: <pre><code>ls database/ | grep ejabberd@\ndocker exec -it $OLDCONTAINER ejabberdctl status\ndocker exec -it $OLDCONTAINER grep \"started in the node\" logs/ejabberd.log\n</code></pre></p>"},{"location":"CONTAINER/#change-mnesia-node","title":"Change Mnesia Node","text":"<p>First of all let's store the Erlang node names and paths in variables. In this example they would be: <pre><code>OLDCONTAINER=ejaold\nNEWCONTAINER=ejanew\nOLDNODE=ejabberd@95145ddee27c\nNEWNODE=ejabberd@localhost\nOLDFILE=/opt/ejabberd/database/old.backup\nNEWFILE=/opt/ejabberd/database/new.backup\n</code></pre></p> <ol> <li> <p>Start your old container that can still read the Mnesia database correctly. If you have the Mnesia spool files, but don't have access to the old container anymore, go to Create Temporary Container and later come back here.</p> </li> <li> <p>Generate a backup file and check it was created: <pre><code>docker exec -it $OLDCONTAINER ejabberdctl backup $OLDFILE\nls -l database/*.backup\n</code></pre></p> </li> <li> <p>Stop ejabberd: <pre><code>docker stop $OLDCONTAINER\n</code></pre></p> </li> <li> <p>Create the new container. For example: <pre><code>docker run \\\n       --name $NEWCONTAINER \\\n       -d \\\n       -p 5222:5222 \\\n       -v $(pwd)/database:/opt/ejabberd/database \\\n       ghcr.io/processone/ejabberd:latest\n</code></pre></p> </li> <li> <p>Convert the backup file to new node name: <pre><code>docker exec -it $NEWCONTAINER ejabberdctl mnesia_change_nodename $OLDNODE $NEWNODE $OLDFILE $NEWFILE\n</code></pre></p> </li> <li> <p>Install the backup file as a fallback: <pre><code>docker exec -it $NEWCONTAINER ejabberdctl install_fallback $NEWFILE\n</code></pre></p> </li> <li> <p>Restart the container: <pre><code>docker restart $NEWCONTAINER\n</code></pre></p> </li> <li> <p>Check that the information of the old database is available. In this example, it should show that the account <code>user1</code> is registered: <pre><code>docker exec -it $NEWCONTAINER ejabberdctl registered_users localhost\n</code></pre></p> </li> <li> <p>When the new container is working perfectly with the converted Mnesia database, you may want to remove the unneeded files: the old container, the old Mnesia spool files, and the backup files.</p> </li> </ol>"},{"location":"CONTAINER/#create-temporary-container","title":"Create Temporary Container","text":"<p>In case the old container that used the Mnesia database is not available anymore, a temporary container can be created just to read the Mnesia database and make a backup of it, as explained in the previous section.</p> <p>This method uses <code>--hostname</code> command line argument for docker, and <code>ERLANG_NODE_ARG</code> environment variable for ejabberd. Their values must be the hostname of your old container and the Erlang node name of your old ejabberd node. To know the Erlang node name please check Setup Old Container.</p> <p>Command line example: <pre><code>OLDHOST=${OLDNODE#*@}\ndocker run \\\n       -d \\\n       --name $OLDCONTAINER \\\n       --hostname $OLDHOST \\\n       -p 5222:5222 \\\n       -v $(pwd)/database:/opt/ejabberd/database \\\n       -e ERLANG_NODE_ARG=$OLDNODE \\\n       ghcr.io/processone/ejabberd:latest\n</code></pre></p> <p>Check the old database content is available: <pre><code>docker exec -it $OLDCONTAINER ejabberdctl registered_users localhost\n</code></pre></p> <p>Now that you have ejabberd running with access to the Mnesia database, you can continue with step 2 of previous section Change Mnesia Node.</p>"},{"location":"CONTAINER/#build-container-image","title":"Build Container Image","text":"<p>The container image includes ejabberd as a standalone OTP release built using Elixir.</p>"},{"location":"CONTAINER/#build-ejabberd","title":"Build <code>ejabberd</code>","text":"<p>The ejabberd Erlang/OTP release is configured with:</p> <ul> <li><code>mix.exs</code>: Customize ejabberd release</li> <li><code>vars.config</code>: ejabberd compilation configuration options</li> <li><code>config/runtime.exs</code>: Customize ejabberd paths</li> <li><code>ejabberd.yml.template</code>: ejabberd default config file</li> </ul>"},{"location":"CONTAINER/#direct-build","title":"Direct build","text":"<p>Build ejabberd Community Server container image from ejabberd master git repository:</p> <pre><code>docker buildx build \\\n    -t personal/ejabberd \\\n    -f .github/container/Dockerfile \\\n    .\n</code></pre>"},{"location":"CONTAINER/#podman-build","title":"Podman build","text":"<p>To build the image using Podman, please notice:</p> <ul> <li><code>EXPOSE 4369-4399</code> port range is not supported, remove that in Dockerfile</li> <li>It mentions that <code>healthcheck</code> is not supported by the Open Container Initiative image format</li> <li>to start with command <code>live</code>, you may want to add environment variable <code>EJABBERD_BYPASS_WARNINGS=true</code></li> </ul> <pre><code>podman build \\\n    -t ejabberd \\\n    -f .github/container/Dockerfile \\\n    .\n\npodman run --name eja1 -d -p 5222:5222 localhost/ejabberd\n\npodman exec eja1 ejabberdctl status\n\npodman exec -it eja1 sh\n\npodman stop eja1\n\npodman run --name eja1 -it -e EJABBERD_BYPASS_WARNINGS=true -p 5222:5222 localhost/ejabberd live\n</code></pre>"},{"location":"CONTAINER/#build-ecs","title":"Build <code>ecs</code>","text":"<p>The ejabberd Erlang/OTP release is configured with:</p> <ul> <li><code>rel/config.exs</code>: Customize ejabberd release</li> <li><code>rel/dev.exs</code>: ejabberd environment configuration for development release</li> <li><code>rel/prod.exs</code>: ejabberd environment configuration for production release</li> <li><code>vars.config</code>: ejabberd compilation configuration options</li> <li><code>conf/ejabberd.yml</code>: ejabberd default config file</li> </ul> <p>Build ejabberd Community Server base image from ejabberd master on Github:</p> <pre><code>docker build -t personal/ejabberd .\n</code></pre> <p>Build ejabberd Community Server base image for a given ejabberd version:</p> <pre><code>./build.sh 18.03\n</code></pre>"},{"location":"CONTAINER/#composer-examples","title":"Composer Examples","text":""},{"location":"CONTAINER/#minimal-example","title":"Minimal Example","text":"<p>This is the barely minimal file to get a usable ejabberd.</p> <p>If using Docker, write this <code>docker-compose.yml</code> file and start it with <code>docker-compose up</code>:</p> <pre><code>services:\n  main:\n    image: ghcr.io/processone/ejabberd\n    container_name: ejabberd\n    ports:\n      - \"5222:5222\"\n      - \"5269:5269\"\n      - \"5280:5280\"\n      - \"5443:5443\"\n</code></pre> <p>If using Podman, write this <code>minimal.yml</code> file and start it with <code>podman kube play minimal.yml</code>:</p> <pre><code>apiVersion: v1\n\nkind: Pod\n\nmetadata:\n  name: ejabberd\n\nspec:\n  containers:\n\n  - name: ejabberd\n    image: ghcr.io/processone/ejabberd\n    ports:\n    - containerPort: 5222\n      hostPort: 5222\n    - containerPort: 5269\n      hostPort: 5269\n    - containerPort: 5280\n      hostPort: 5280\n    - containerPort: 5443\n      hostPort: 5443\n</code></pre>"},{"location":"CONTAINER/#customized-example","title":"Customized Example","text":"<p>This example shows the usage of several customizations: it uses a local configuration file, defines a configuration macro using an environment variable, stores the mnesia database in a local path, registers an account when it's created, and checks the number of registered accounts every time it's started.</p> <p>Prepare an ejabberd configuration file: <pre><code>mkdir conf &amp;&amp; cp ejabberd.yml.example conf/ejabberd.yml\n</code></pre></p> <p>Create the database directory and allow the container access to it:</p> <ul> <li>Docker:     <pre><code>mkdir database &amp;&amp; sudo chown 9000:9000 database\n</code></pre></li> <li>Podman:     <pre><code>mkdir database &amp;&amp; podman unshare chown 9000:9000 database\n</code></pre></li> </ul> <p>If using Docker, write this <code>docker-compose.yml</code> file and start it with <code>docker-compose up</code>:</p> <pre><code>version: '3.7'\n\nservices:\n\n  main:\n    image: ghcr.io/processone/ejabberd\n    container_name: ejabberd\n    environment:\n      - EJABBERD_MACRO_HOST=example.com\n      - EJABBERD_MACRO_ADMIN=admin@example.com\n      - REGISTER_ADMIN_PASSWORD=somePassw0rd\n      - CTL_ON_START=registered_users example.com ;\n                     status\n    ports:\n      - \"5222:5222\"\n      - \"5269:5269\"\n      - \"5280:5280\"\n      - \"5443:5443\"\n    volumes:\n      - ./conf/ejabberd.yml:/opt/ejabberd/conf/ejabberd.yml:ro\n      - ./database:/opt/ejabberd/database\n</code></pre> <p>If using Podman, write this <code>custom.yml</code> file and start it with <code>podman kube play custom.yml</code>:</p> <pre><code>apiVersion: v1\n\nkind: Pod\n\nmetadata:\n  name: ejabberd\n\nspec:\n  containers:\n\n  - name: ejabberd\n    image: ghcr.io/processone/ejabberd\n    env:\n    - name: EJABBERD_MACRO_HOST\n      value: example.com\n    - name: EJABBERD_MACRO_ADMIN\n      value: admin@example.com\n    - name: REGISTER_ADMIN_PASSWORD\n      value: somePassw0rd\n    - name: CTL_ON_START\n      value: registered_users example.com ;\n             status\n    ports:\n    - containerPort: 5222\n      hostPort: 5222\n    - containerPort: 5269\n      hostPort: 5269\n    - containerPort: 5280\n      hostPort: 5280\n    - containerPort: 5443\n      hostPort: 5443\n    volumeMounts:\n    - mountPath: /opt/ejabberd/conf/ejabberd.yml\n      name: config\n      readOnly: true\n    - mountPath: /opt/ejabberd/database\n      name: db\n\n  volumes:\n  - name: config\n    hostPath:\n      path: ./conf/ejabberd.yml\n      type: File\n  - name: db\n    hostPath:\n      path: ./database\n      type: DirectoryOrCreate\n</code></pre>"},{"location":"CONTAINER/#clustering-example","title":"Clustering Example","text":"<p>In this example, the main container is created first. Once it is fully started and healthy, a second container is created, and once ejabberd is started in it, it joins the first one.</p> <p>An account is registered in the first node when created (and we ignore errors that can happen when doing that - for example when account already exists), and it should exist in the second node after join.</p> <p>Notice that in this example the main container does not have access to the exterior; the replica exports the ports and can be accessed.</p> <p>If using Docker, write this <code>docker-compose.yml</code> file and start it with <code>docker-compose up</code>:</p> <pre><code>version: '3.7'\n\nservices:\n\n  main:\n    image: ghcr.io/processone/ejabberd\n    container_name: main\n    environment:\n      - ERLANG_NODE_ARG=ejabberd@main\n      - ERLANG_COOKIE=dummycookie123\n      - CTL_ON_CREATE=! register admin localhost asd\n    healthcheck:\n      test: netstat -nl | grep -q 5222\n      start_period: 5s\n      interval: 5s\n      timeout: 5s\n      retries: 120\n\n  replica:\n    image: ghcr.io/processone/ejabberd\n    container_name: replica\n    depends_on:\n      main:\n        condition: service_healthy\n    environment:\n      - ERLANG_NODE_ARG=ejabberd@replica\n      - ERLANG_COOKIE=dummycookie123\n      - CTL_ON_CREATE=join_cluster ejabberd@main\n      - CTL_ON_START=registered_users localhost ;\n                     status\n    ports:\n      - \"5222:5222\"\n      - \"5269:5269\"\n      - \"5280:5280\"\n      - \"5443:5443\"\n</code></pre> <p>If using Podman, write this <code>cluster.yml</code> file and start it with <code>podman kube play cluster.yml</code>:</p> <pre><code>apiVersion: v1\n\nkind: Pod\n\nmetadata:\n  name: cluster\n\nspec:\n  containers:\n\n  - name: first\n    image: ghcr.io/processone/ejabberd\n    env:\n    - name: ERLANG_NODE_ARG\n      value: main@cluster\n    - name: ERLANG_COOKIE\n      value: dummycookie123\n    - name: CTL_ON_CREATE\n      value: register admin localhost asd\n    - name: CTL_ON_START\n      value: stats registeredusers ;\n             status\n    - name: EJABBERD_MACRO_PORT_C2S\n      value: 6222\n    - name: EJABBERD_MACRO_PORT_C2S_TLS\n      value: 6223\n    - name: EJABBERD_MACRO_PORT_S2S\n      value: 6269\n    - name: EJABBERD_MACRO_PORT_HTTP_TLS\n      value: 6443\n    - name: EJABBERD_MACRO_PORT_HTTP\n      value: 6280\n    - name: EJABBERD_MACRO_PORT_MQTT\n      value: 6883\n    - name: EJABBERD_MACRO_PORT_PROXY65\n      value: 6777\n    volumeMounts:\n    - mountPath: /opt/ejabberd/conf/ejabberd.yml\n      name: config\n      readOnly: true\n\n  - name: second\n    image: ghcr.io/processone/ejabberd\n    env:\n    - name: ERLANG_NODE_ARG\n      value: replica@cluster\n    - name: ERLANG_COOKIE\n      value: dummycookie123\n    - name: CTL_ON_CREATE\n      value: join_cluster main@cluster ;\n             started ;\n             list_cluster\n    - name: CTL_ON_START\n      value: stats registeredusers ;\n             check_password admin localhost asd ;\n             status\n    ports:\n    - containerPort: 5222\n      hostPort: 5222\n    - containerPort: 5280\n      hostPort: 5280\n    volumeMounts:\n    - mountPath: /opt/ejabberd/conf/ejabberd.yml\n      name: config\n      readOnly: true\n\n  volumes:\n  - name: config\n    hostPath:\n      path: ./conf/ejabberd.yml\n      type: File\n</code></pre>"},{"location":"CONTAINER/#images-comparison","title":"Images Comparison","text":"<p>Let's summarize the differences between both container images. Legend:</p> <ul> <li> is the recommended alternative</li> <li> added in the latest release (ejabberd 25.03)</li> <li> added in the previous release (ejabberd 24.12)</li> <li> added in the pre-previous release (ejabberd 24.10)</li> </ul> Source code ejabberd/.github/container docker-ejabberd/ecs Generated by container.yml tests.yml Built for stable releases  <code>master</code> branch stable releases  <code>master</code> branch zip Architectures <code>linux/amd64</code> <code>linux/arm64</code> <code>linux/amd64</code> Software Erlang/OTP 27.3.4.1-alpine  Elixir 1.18.4 Alpine 3.19  Erlang/OTP 26.2  Elixir 1.15.7 Published in ghcr.io/processone/ejabberd docker.io/ejabberd/ecs ghcr.io/processone/ecs Additional content ejabberd-contrib included not included ejabberdapi included  included Ports 1880 for WebAdmin yes  yes  5210 for <code>ERL_DIST_PORT</code> supported supported  Paths <code>$HOME</code> <code>/opt/ejabberd/</code> <code>/home/ejabberd/</code> User data <code>$HOME</code> <code>/home/ejabberd/</code> <code>$HOME</code> <code>/opt/ejabberd/</code> <code>ejabberdctl</code> <code>ejabberdctl</code> <code>bin/ejabberdctl</code> <code>bin/ejabberdctl</code> <code>ejabberdctl</code> <code>captcha.sh</code> <code>$HOME/bin/captcha.sh</code> <code>$HOME/bin/captcha.sh</code> <code>*.sql</code> files <code>$HOME/sql/*.sql</code> <code>$HOME/database/*.sql</code> <code>$HOME/database/*.sql</code> <code>$HOME/sql/*.sql</code> Mnesia spool files <code>$HOME/database/</code> <code>$HOME/database/NODENAME/</code> <code>$HOME/database/NODENAME/</code> <code>$HOME/database/</code> Variables <code>EJABBERD_MACRO_*</code> supported  supported  Macros used in <code>ejabberd.yml</code> yes  yes  <code>EJABBERD_MACRO_ADMIN</code> Grant admin rights   (default <code>admin@localhost</code>)  Hardcoded <code>admin@localhost</code> <code>REGISTER_ADMIN_PASSWORD</code> Register admin account  unsupported <code>CTL_OVER_HTTP</code> enabled  unsupported"},{"location":"COPYING/","title":"License","text":"<p>As a special exception, the authors give permission to link this program with the OpenSSL library and distribute the resulting binary.</p>"},{"location":"COPYING/#gnu-general-public-license","title":"GNU GENERAL PUBLIC LICENSE","text":"<p>Version 2, June 1991</p> <pre><code>Copyright (C) 1989, 1991 Free Software Foundation, Inc.  \n51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA\n\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\n</code></pre>"},{"location":"COPYING/#preamble","title":"Preamble","text":"<p>The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.</p> <p>To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.</p> <p>We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.</p> <p>Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.</p> <p>Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"COPYING/#terms-and-conditions-for-copying-distribution-and-modification","title":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","text":"<p>0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\".</p> <p>Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.</p> <p>1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.</p> <p>You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.</p> <p>2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:</p> <p>a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change.</p> <p>b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.</p> <p>c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)</p> <p>These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.</p> <p>Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.</p> <p>In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.</p> <p>3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:</p> <p>a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,</p> <p>b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,</p> <p>c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.)</p> <p>The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.</p> <p>If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.</p> <p>4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.</p> <p>5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.</p> <p>6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.</p> <p>7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.</p> <p>If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.</p> <p>It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.</p> <p>This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.</p> <p>8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.</p> <p>9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.</p> <p>10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.</p> <p>NO WARRANTY</p> <p>11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <p>12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"COPYING/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>one line to give the program's name and an idea of what it does.\nCopyright (C) yyyy  name of author\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program is interactive, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>Gnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details\ntype `show w'.  This is free software, and you are welcome\nto redistribute it under certain conditions; type `show c' \nfor details.\n</code></pre> <p>The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program.</p> <p>You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names:</p> <pre><code>Yoyodyne, Inc., hereby disclaims all copyright\ninterest in the program `Gnomovision'\n(which makes passes at compilers) written \nby James Hacker.\n\nsignature of Ty Coon, 1 April 1989\nTy Coon, President of Vice\n</code></pre> <p>This General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License.</p>"},{"location":"README-DOCS/","title":"ejabberd Docs Source Code","text":"<p>The ejabberd Community Server has its source code available in the ejabberd git repository. Its documentation is published in the ejabberd Docs website, and its source code is available in the docs git repository.</p> <p>This is a community effort and you are welcome to submit issues or pull requests in order to improve the docs and benefit the ejabberd community.</p> <p>This documentation site is built using MkDocs and Material for MkDocs.</p>"},{"location":"README-DOCS/#installation","title":"Installation","text":"<p>To build the site you need Python 3.6 or later, then install the dependencies:</p>"},{"location":"README-DOCS/#pip","title":"pip","text":"<pre><code>mkdir -p .venv\npython3 -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n</code></pre> <p>Info</p> <p>From now on, remember to run <code>source .venv/bin/activate</code> before running any <code>mkdocs [...]</code> command.</p> <p>Tip</p> <p>You can freeze the dependencies to a file using <code>pip freeze &gt; requirements.txt</code>.</p>"},{"location":"README-DOCS/#debian","title":"Debian","text":"<p>You could install most dependencies using APT:</p> <pre><code>apt-get install mkdocs \\\n                mkdocs-material \\\n                mkdocs-material-extensions \\\n                mkdocs-redirects \\\n                python3-bs4\n</code></pre> <p>Warning</p> <p>Unfortunately Debian doesn't package <code>mkdocs-with-pdf</code>, so you should remove <code>with-pdf</code> plugin from <code>mkdocs.yml</code>.</p>"},{"location":"README-DOCS/#building","title":"Building","text":"<p>Now you can start a small webserver that builds the site dynamically:</p> <pre><code>mkdocs serve\n</code></pre> <p>or build the site into static html files in the <code>site/</code> directory:</p> <pre><code>mkdocs build\n</code></pre>"},{"location":"README-DOCS/#testing","title":"Testing","text":"<p>To verify the internal URLs in the site:</p> <pre><code>TEST=true mkdocs serve\n</code></pre> <p>To verify the internal URLs and also the external links:</p> <pre><code>TEST=true TEST_EXTERNAL=true mkdocs serve\n</code></pre>"},{"location":"README-DOCS/#updating-content","title":"Updating content","text":"<p>Some pages in this documentation are extracted from a running ejabberd node:</p> <ul> <li>admin/configuration/toplevel.md</li> <li>admin/configuration/modules.md</li> <li>developer/ejabberd-api/admin-api.md</li> <li>developer/ejabberd-api/admin-tags.md</li> </ul> <p>To update those pages, install ejabberd, start it and run <code>make all</code> in this repository. This gets documentation from ejabberd, processes it to obtain markdown content and moves the files to this repository.</p> <p>Additionally, there are several other pages that are markdown files copied from ejabberd git repository and docker-ejabberd git repository. Those repositories must be available next to docs.ejabberd.im before running <code>make all</code>.</p>"},{"location":"README-DOCS/#markdown-shorthands","title":"Markdown Shorthands","text":"<p>When editing ejabberd source code to document top-level options, modules or API commands, there is some additional syntax supported to generate HTML URLs:</p> <p>For example, this text in the ejabberd source code:</p> <pre><code>_`mod_muc_admin`_\n_`bookmarks_to_pep`_ API\n_`default_db`_\n_`basic.md#captcha|CAPTCHA`_\nhttps://xmpp.org/extensions/xep-0045.html[XEP-0045]\n(def:c2s)\n</code></pre> <p>gets converted into this markdown:</p> <pre><code>[mod_muc_admin](../../admin/configuration/modules.md#mod_muc_admin)\n[bookmarks_to_pep](../../developer/ejabberd-api/admin-api.md#bookmarks_to_pep) API\n[default_db](toplevel.md#default_db)\n[CAPTCHA](basic.md#captcha)\n[XEP-0045](https://xmpp.org/extensions/xep-0045.html)\n[](def:c2s)\n</code></pre> <p>There are example usage of those shorthands in ejabberd, for example in <code>mod_muc.erl</code>.</p>"},{"location":"README-DOCS/#glossary","title":"Glossary","text":""},{"location":"README-DOCS/#directly-in-markdown-file","title":"Directly in markdown file","text":"<p>To define a new term, write in markdown:</p> <pre><code>def:c2s\n: Client to Server connection in XMPP.\n</code></pre> <p>To link to that term, write in markdown:</p> <pre><code>Most connections in XMPP are [](def:c2s).\n</code></pre> <p>Glossary terms can be defined as singular nouns (<code>connection</code>, <code>port</code>), and later you can link to that term in plural noun (<code>connections</code>, <code>ports</code>).</p>"},{"location":"README-DOCS/#in-ejabberd-source-code","title":"In ejabberd source code","text":"<p>Term definition is done as expected; example usage: <pre><code>mod_doc() -&gt;\n    #{desc =&gt;\n          [?T(\"def:ad-hoc command\"), \"\",\n           ?T(\": Command that can be executed by an XMPP client using XEP-0050.\"), \"\",\n           ?T(\"This module implements XEP-0050.\")]\n</code></pre></p> <p>In order to link to a term definition, please write simply <code>(def:c2s)</code> because <code>[]</code> becomes escaped and wouldn't work. Later <code>make extract</code> will add the <code>[]</code> automatically. Example usage: <pre><code>mod_doc() -&gt;\n    #{desc =&gt;\n          ?T(\"This module implements some (def:ad-hoc commands) for adminitration.\")\n</code></pre></p>"},{"location":"README-GIT/","title":"Readme","text":"<p>ejabberd is an open-source, robust, scalable and extensible realtime platform built using Erlang/OTP, that includes XMPP Server, MQTT Broker and SIP Service.</p> <p>Check the features in ejabberd.im, ejabberd Docs, ejabberd at ProcessOne, and the list of supported protocols in ProcessOne and XMPP.org.</p>"},{"location":"README-GIT/#installation","title":"Installation","text":"<p>There are several ways to install ejabberd:</p> <ul> <li>Source code: compile yourself, see COMPILE</li> <li>Installers:</li> <li>ProcessOne Download Page or GitHub Releases for releases.</li> <li>GitHub Actions for master branch (<code>run</code>/<code>deb</code>/<code>rpm</code> for <code>x64</code> and <code>arm64</code>)</li> <li>Docker Containers:</li> <li><code>ecs</code> container image: Docker Hub and Github Packages, see ecs README (for <code>x64</code>)</li> <li><code>ejabberd</code> container image: Github Packages for releases and master branch, see CONTAINER (for <code>x64</code> and <code>arm64</code>)</li> <li>Using your Operating System package</li> <li>Using the Homebrew package manager</li> </ul> <p>More info can be found in the <code>Installation</code> part of ejabberd Docs.</p>"},{"location":"README-GIT/#documentation","title":"Documentation","text":"<p>Please check the ejabberd Docs website.</p> <p>When compiling from source code, you can get some help with:</p> <pre><code>./configure --help\nmake help\n</code></pre> <p>Once ejabberd is installed, try:</p> <pre><code>ejabberdctl help\nman ejabberd.yml\n</code></pre>"},{"location":"README-GIT/#development","title":"Development","text":"<p>Bug reports and features are tracked using GitHub Issues, please check CONTRIBUTING for details.</p> <p>Translations can be improved online using Weblate or in your local machine as explained in Localization.</p> <p>Documentation for developers is available in ejabberd docs: Developers.</p> <p>There are nightly builds of ejabberd, both for <code>master</code> branch and for Pull Requests:</p> <ul> <li>Installers: go to GitHub Actions: Installers, open the most recent commit, on the bottom of that commit page, download the <code>ejabberd-packages.zip</code> artifact.</li> <li><code>ejabberd</code> container image: go to ejabberd Github Packages</li> </ul> <p>Security reports or concerns should preferably be reported privately, please send an email to the address: contact at process-one dot net or some other method from ProcessOne Contact.</p> <p>For commercial offering and support, including ejabberd Business Edition and Fluux (ejabberd in the Cloud), please check ProcessOne ejabberd page.</p>"},{"location":"README-GIT/#security","title":"Security","text":"<p>For information on how to report security vulnerabilities, please refer to the SECURITY.md file. It contains guidelines on how to report vulnerabilities privately and securely, ensuring that any issues are addressed in a timely and confidential manner.</p>"},{"location":"README-GIT/#community","title":"Community","text":"<p>There are several places to get in touch with other ejabberd developers and administrators:</p> <ul> <li>ejabberd XMPP chatroom: ejabberd@conference.process-one.net</li> <li>GitHub Discussions</li> <li>Stack Overflow</li> </ul>"},{"location":"README-GIT/#license","title":"License","text":"<ul> <li>ejabberd is released under the GNU General Public License v2 (see COPYING)</li> <li>ejabberd translations under MIT License.</li> </ul>"},{"location":"SECURITY/","title":"Security Policy","text":""},{"location":"SECURITY/#supported-versions","title":"Supported Versions","text":"<p>We recommend that all users always use the latest version of ejabberd.</p> <p>To ensure the best experience and security, upgrade to the latest version available on this repo.</p>"},{"location":"SECURITY/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":""},{"location":"SECURITY/#private-reporting","title":"Private Reporting","text":"<p>Preferred Method: Use GitHub's private vulnerability reporting system by clicking the \"Report a Vulnerability\" button in the Security tab of this repository. This ensures your report is securely transmitted and tracked.  </p> <p>Alternative: If you cannot use the GitHub system, send an email to <code>contact@process-one.net</code> with the following details:  </p> <ul> <li>A clear description of the vulnerability.  </li> <li>Steps to reproduce the issue.  </li> <li>Any potential impact or exploitation scenarios.  </li> </ul>"},{"location":"SECURITY/#response-time","title":"Response Time","text":"<p>We aim to acknowledge receipt of your report within 72 hours. You can expect regular updates on the status of your report.  </p>"},{"location":"SECURITY/#resolution","title":"Resolution","text":"<p>If the vulnerability is confirmed, we will work on a patch or mitigation strategy. We will notify you once the issue is resolved and coordinate a public disclosure if needed.  </p>"},{"location":"SECURITY/#acknowledgements","title":"Acknowledgements","text":"<p>We value and appreciate the contributions of security researchers and community members. If you wish, we are happy to acknowledge your efforts publicly by listing your name (or alias) below in this document. Please let us know if you would like to be recognized when reporting the vulnerability.</p>"},{"location":"SECURITY/#public-discussion","title":"Public Discussion","text":"<p>For general inquiries or discussions about the project\u2019s security, feel free to chat with us here:</p> <ul> <li>XMPP room: <code>ejabberd@conference.process-one.net</code></li> <li>GitHub Discussions</li> </ul> <p>However, please note that if the issue is critical or potentially exploitable, do not share it publicly. Instead, we strongly recommend you contact the maintainers directly via the private reporting methods outlined above to ensure a secure and timely response.</p> <p>Thank you for helping us improve the security of ejabberd!</p>"},{"location":"glossary/","title":"Glossary","text":"<p> <p>bosh</p> <p>Bidirectional-streams Over Synchronous HTTP: an extension for 6251a85a-47d0-11ee-be56-0242ac120002:ae25168f4e33267f23a785e43c62ae37: defined in XEP-0124 that allows long lived connections for XMPP over HTTP.   See mod_bosh. <p>command</p> <p><p>May refer to:</p> <ul> <li>6251a85a-47d0-11ee-be56-0242ac120002:07bbeb8a87a321f8a6173a45a5a7bdbe:&lt;__None__&gt;</li> <li>6251a85a-47d0-11ee-be56-0242ac120002:0eef50eff27eb671ca92c1e8d2039ac9:&lt;__None__&gt;</li> <li>shell command</li> </ul> </p> <p>eBE</p> <p>ejabberd Business Edition.   See Options to use ejabberd</p> <p>eCS</p> <p>ejabberd Community Server, see Options to use ejabberd</p> <p>erlang</p> <p>Erlang is a programming language used to build massively scalable soft real-time systems with requirements on high availability. Some of its uses are in telecoms, banking, e-commerce, computer telephony and instant messaging. Erlang's runtime system has built-in support for concurrency, distribution and fault tolerance.</p> <p>iq</p> <p>6251a85a-47d0-11ee-be56-0242ac120002:42d5381c81a019df900f67177f43514a: that provides a structured request-response mechanism. <p>jid</p> <p>Jabber ID is a unique identifier for an entity in the XMPP network (like a server, a service, an account, a chat room, ...). It consists of three parts: a local part, a domain part, and an optional resource part, formatted as <code>localpart@domain/resource</code>.</p> <p>mnesia</p> <p>Mnesia is a distributed database specifically designed for industrial-grade telecommunications applications written in Erlang. It is used by default in ejabberd as it requires no initial configuration. However, for large volumes of data, it is recommended to setup a SQL database.</p> <p>muc</p> <p>Multi-User Chat, an extension for 6251a85a-47d0-11ee-be56-0242ac120002:cebba4407a44d1946b0321441feb8722: defined in XEP-0045 for multi-party information exchange whereby multiple users can exchange messages in the context of a chat room.   See mod_muc. <p>node</p> <p><p>May refer to:</p> <ul> <li>disco node, see mod_disco</li> <li>6251a85a-47d0-11ee-be56-0242ac120002:c3f2b08a7bb205ae887dde7a4004f632:&lt;__None__&gt;</li> <li>pubsub node, see mod_pubsub</li> </ul> </p> <p>omemo</p> <p>OMEMO is an extension for 6251a85a-47d0-11ee-be56-0242ac120002:35193f515677da081b3c2d1a494b4f6b: defined in XEP-0384 that allows end-to-end encryption between clients. <p>otp</p> <p>Open Telecom Platform is a set of Erlang libraries and design principles providing middle-ware to develop these systems. It includes its own distributed database, applications to interface towards other languages, debugging and release handling tools.</p> <p>presence</p> <p>6251a85a-47d0-11ee-be56-0242ac120002:a3f6dc2254dce789fa089fe4ce5d8424: that provides information about network availability of an account (online, away, offline, ...). <p>pubsub</p> <p>Publish-Subscribe, an extension for 6251a85a-47d0-11ee-be56-0242ac120002:67dfb49115ff2751c79146d097ac53d7: defined in XEP-0060 for  for generic publish-subscribe functionality.   See mod_pubsub. <p>roster</p> <p>A list of contacts of an account, which is stored on the server, used to manage 6251a85a-47d0-11ee-be56-0242ac120002:0d5989a1eb4fabad9b63ba35c6b7cc2b:. <p>stanza</p> <p>6251a85a-47d0-11ee-be56-0242ac120002:fd417afaf6acf3565a6459c60a4e9832: packet of type <code>message</code>, <code>presence</code> or 6251a85a-47d0-11ee-be56-0242ac120002:87a6ea945fa28c8640ac71eba4287d4f:. <p>vCard</p> <p>Virtual Card, an extension for 6251a85a-47d0-11ee-be56-0242ac120002:62d942ed6004c85dd02995662dd4fb59: defined in XEP-0054 that allows to publish contact information like name, email, phone number, address, etc.   See mod_vcard. <p>vhost</p> <p>Virtual Host, a domain name served by ejabberd that corresponds to a XMPP Domain.</p> <p>xmpp</p> <p>Extensible Messaging and Presence Protocol: an open protocol based in XML for real-time communications.</p>"},{"location":"admin/introduction/","title":"Features","text":"<p>ejabberd is a free and open source instant messaging server written in <code>Erlang/OTP</code>.</p> <p>ejabberd is cross-platform, distributed, fault-tolerant, and based on open standards to achieve real-time communication.</p> <p>ejabberd is designed to be a rock-solid and feature rich 6251a85a-47d0-11ee-be56-0242ac120002:eb31edbaf4cac5026a835ad256d72de8:&lt;__None__&gt; server.</p> <p>ejabberd is suitable for small deployments, whether they need to be scalable or not, as well as extremely large deployments.</p> <p>Check also the features in ejabberd.im, ejabberd at ProcessOne, and the list of supported protocols in ProcessOne and XMPP.org.</p>"},{"location":"admin/introduction/#key-features","title":"Key Features","text":"<p>ejabberd is:</p> <ul> <li> <p>Cross-platform: ejabberd runs under Microsoft Windows and Unix-derived systems such as Linux, FreeBSD and NetBSD.</p> </li> <li> <p>Distributed: You can run ejabberd on a cluster of machines all serving the same Jabber domain(s). When you need more capacity you can simply add a new cheap node to your cluster. Accordingly, you do not need to buy an expensive high-end machine to support tens of thousands concurrent users.</p> </li> <li> <p>Fault-tolerant: You can deploy an ejabberd cluster so that all the information required for a properly working service will be replicated permanently on all nodes. This means that if one of the nodes crashes, the others will continue working without disruption. In addition, nodes can be added or replaced on the fly.</p> </li> <li> <p>Administrator Friendly: ejabberd is built on top of the Erlang programming language. As a result, if you wish, you can perform self-contained deployments. You are not required to install an external database, an external web server, amongst others because everything is already included, and ready to run out of the box. Other administrator benefits include:</p> <ul> <li>Comprehensive documentation.</li> <li>Straightforward installers for Linux, Mac OS X, and Windows.</li> <li>Web Administration.</li> <li>Shared Roster Groups.</li> <li>Command line administration tool.</li> <li>Can integrate with existing authentication mechanisms.</li> <li>Capability to send announce messages.</li> </ul> </li> <li> <p>Internationalized: ejabberd leads in internationalization and is well suited to build services available across the world. Related features are:</p> <ul> <li>Translated to 25 languages.</li> <li>Support for <code>IDNA</code>.</li> </ul> </li> <li> <p>Open Standards: ejabberd is the first Open Source Jabber server staking a claiming to full complyiance to the XMPP standard.</p> <ul> <li>Fully XMPP compliant.</li> <li>XML-based protocol.</li> <li>Many protocols supported.</li> </ul> </li> </ul>"},{"location":"admin/introduction/#additional-features","title":"Additional Features","text":"<p>ejabberd also comes with a wide range of other state-of-the-art features:</p> <ul> <li> <p>Modular</p> <ul> <li>Load only the modules you want.</li> <li>Extend ejabberd with your own custom modules.</li> </ul> </li> <li> <p>Security</p> <ul> <li>SASL and STARTTLS for c2s and s2s connections.</li> <li>STARTTLS and Dialback s2s connections.</li> <li>Web Admin accessible via HTTPS secure access.</li> </ul> </li> <li> <p>Databases</p> <ul> <li>Internal database for fast deployment (Mnesia).</li> <li>Native MySQL support.</li> <li>Native PostgreSQL support.</li> <li>ODBC data storage support.</li> <li>Microsoft SQL Server support.</li> <li>SQLite support.</li> </ul> </li> <li> <p>Authentication</p> <ul> <li>Internal Authentication.</li> <li>PAM, LDAP and SQL.</li> <li>External Authentication script.</li> </ul> </li> <li> <p>Others</p> <ul> <li>Support for virtual hosting.</li> <li>Compressing XML streams with Stream Compression   (<code>XEP-0138</code>).</li> <li>Statistics via Statistics Gathering   (<code>XEP-0039</code>).</li> <li>IPv6 support both for c2s and s2s connections.</li> <li><code>Multi-User Chat</code> module with support for clustering and HTML logging.</li> <li>Users Directory based on users vCards.</li> <li><code>Publish-Subscribe</code> component with support for   <code>Personal Eventing via Pubsub</code>.</li> <li>Support for web clients: Support for XMPP subprotocol for WebSocket and <code>HTTP Binding (BOSH)</code> services.</li> <li>IRC transport.</li> <li>SIP support.</li> <li>Component support: interface with networks such as AIM, ICQ and MSN installing special transports.</li> </ul> </li> </ul>"},{"location":"admin/configuration/","title":"Configuring ejabberd","text":"<p>Here are the main entry points to learn more about ejabberd configuration. ejabberd is extremely powerful and can be configured in many ways with many options.</p> <p>Do not let this complexity scare you. Most of you will be fine with default config file (or light changes).</p> <p>Tutorials for first-time users:</p> <ul> <li>How to move to ejabberd XMPP server</li> <li>How to set up ejabberd video &amp; voice calling (STUN/TURN)</li> <li>How to configure ejabberd to get 100% in XMPP compliance test</li> </ul> <p>Detailed documentation in sections:</p> <ul> <li>File Format</li> <li>Basic Configuration: hosts, acl, logging...</li> <li>Authentication: auth_method</li> <li>Databases</li> <li>LDAP</li> <li>Listen Modules: c2s, s2s, http, sip, stun...</li> <li>Listen Options</li> <li>Top-Level Options</li> <li>Modules Options</li> </ul> <p>There's also a copy of the old configuration document which was used up to ejabberd 20.03.</p>"},{"location":"admin/configuration/authentication/","title":"Authentication","text":""},{"location":"admin/configuration/authentication/#supported-methods","title":"Supported Methods","text":"<p>The authentication methods supported by ejabberd are:</p> <ul> <li> <p><code>internal</code> \u2014 See section\u00a0Internal.</p> </li> <li> <p><code>external</code> \u2014 See section\u00a0External Script.</p> </li> <li> <p><code>ldap</code> \u2014 See section\u00a0 LDAP.</p> </li> <li> <p><code>sql</code> \u2014 See section Relational Databases.</p> </li> <li> <p><code>anonymous</code> \u2014 See section\u00a0Anonymous Login and SASL Anonymous.</p> </li> <li> <p><code>pam</code> \u2014 See section\u00a0PAM Authentication.</p> </li> <li> <p><code>jwt</code> \u2014 See section\u00a0JWT Authentication.</p> </li> </ul> <p>The top-level option auth_method defines the authentication methods that are used for user authentication. The option syntax is:</p> <pre><code>auth_method: [Method1, Method2, ...]\n</code></pre> <p>When the <code>auth_method</code> option is omitted, ejabberd relies on the default database which is configured in <code>default_db</code> option. If this option is not set neither, then the default authentication method will be <code>internal</code>.</p> <p>Account creation is only supported by <code>internal</code>, <code>external</code> and <code>sql</code> auth methods.</p>"},{"location":"admin/configuration/authentication/#general-options","title":"General Options","text":"<p>The top-level option auth_password_format allows to store the passwords in SCRAM format, see the SCRAM section.</p> <p>Other top-level options that are relevant to the authentication configuration: disable_sasl_mechanisms, fqdn.</p> <p>Authentication caching is enabled by default, and can be disabled in a specific vhost with the option auth_use_cache. The global authentication cache can be configured for all the authentication methods with the global top-level options: auth_cache_missed, auth_cache_size, auth_cache_life_time. For example:</p> <pre><code>auth_cache_size: 1500\nauth_cache_life_time: 10 minutes\n\nhost_config:\n  example.org:\n    auth_method: [internal]\n  example.net:\n    auth_method: [ldap]\n    auth_use_cache: false\n</code></pre>"},{"location":"admin/configuration/authentication/#internal","title":"Internal","text":"<p>ejabberd uses its internal Mnesia database as the default authentication method. The value <code>internal</code> will enable the internal authentication method.</p> <p>To store the passwords in SCRAM format instead of plaintext, see the SCRAM section.</p> <p>Examples:</p> <ul> <li> <p>To use internal authentication on <code>example.org</code> and LDAP  authentication on <code>example.net</code>:</p> <pre><code>host_config:\n  example.org:\n    auth_method: [internal]\n  example.net:\n    auth_method: [ldap]\n</code></pre> </li> <li> <p>To use internal authentication with hashed passwords on all virtual  hosts:</p> <pre><code>auth_method: internal\nauth_password_format: scram\n</code></pre> </li> </ul>"},{"location":"admin/configuration/authentication/#external-script","title":"External Script","text":"<p>In the <code>external</code> authentication method, ejabberd uses a custom script to perform authentication tasks. The server administrator can write that external authentication script in any programming language.</p> <p>Please check some example scripts, and the details on the interface between ejabberd and the script in the Developers &gt; Internals &gt; External Authentication section.</p> <p>Options:</p> <ul> <li>extauth_pool_name</li> <li>extauth_pool_size</li> <li>extauth_program</li> </ul> <p>Please note that caching interferes with the ability to maintain multiple passwords per account. So if your authentication mechanism supports application-specific passwords, caching must be disabled in the host that uses this authentication method with the option auth_use_cache.</p> <p>This example sets external authentication, specifies the extauth script, disables caching, and starts three instances of the script for each virtual host defined in ejabberd:</p> <pre><code>auth_method: [external]\nextauth_program: /etc/ejabberd/JabberAuth.class.php\nextauth_pool_size: 3\nauth_use_cache: false\n</code></pre>"},{"location":"admin/configuration/authentication/#anonymous-login-and-sasl-anonymous","title":"Anonymous Login and SASL Anonymous","text":"<p>The <code>anonymous</code> authentication method enables two modes for anonymous authentication:</p> <p><code>Anonymous login</code>:   This is a standard login, that use the classical login and password  mechanisms, but where password is accepted or preconfigured for all  anonymous users. This login is compliant with SASL authentication,  password and digest non-SASL authentication, so this option will  work with almost all XMPP clients</p> <p><code>SASL Anonymous</code>:   This is a special SASL authentication mechanism that allows to login  without providing username or password (see  <code>XEP-0175</code>). The main  advantage of SASL Anonymous is that the protocol was designed to  give the user a login. This is useful to avoid in some case, where  the server has many users already logged or registered and when it  is hard to find a free username. The main disadvantage is that you  need a client that specifically supports the SASL Anonymous  protocol.</p> <p>The anonymous authentication method can be configured with the following options. Remember that you can use the host_config option to set virtual host specific options (see section\u00a0Virtual Hosting):</p> <ul> <li>allow_multiple_connections</li> <li>anonymous_protocol</li> </ul> <p>Examples:</p> <ul> <li> <p>To enable anonymous login on all virtual hosts:</p> <pre><code>auth_method: [anonymous]\nanonymous_protocol: login_anon\n</code></pre> </li> <li> <p>Similar as previous example, but limited to <code>public.example.org</code>:</p> <pre><code>host_config:\n  public.example.org:\n    auth_method: [anonymous]\n    anonymous_protoco: login_anon\n</code></pre> </li> <li> <p>To enable anonymous login and internal authentication on a virtual  host:</p> <pre><code>host_config:\n  public.example.org:\n    auth_method:\n      - internal\n      - anonymous\n    anonymous_protocol: login_anon\n</code></pre> </li> <li> <p>To enable SASL Anonymous on a virtual host:</p> <pre><code>host_config:\n  public.example.org:\n    auth_method: [anonymous]\n    anonymous_protocol: sasl_anon\n</code></pre> </li> <li> <p>To enable SASL Anonymous and anonymous login on a virtual host:</p> <pre><code>host_config:\n  public.example.org:\n    auth_method: [anonymous]\n    anonymous_protocol: both\n</code></pre> </li> <li> <p>To enable SASL Anonymous, anonymous login, and internal  authentication on a virtual host:</p> <pre><code>host_config:\n  public.example.org:\n    auth_method:\n      - internal\n      - anonymous\n    anonymous_protocol: both\n</code></pre> </li> </ul> <p>There are more configuration examples and XMPP client example stanzas in <code>Anonymous users support</code>.</p>"},{"location":"admin/configuration/authentication/#pam-authentication","title":"PAM Authentication","text":"<p>ejabberd supports authentication via Pluggable Authentication Modules (PAM). PAM is currently supported in AIX, FreeBSD, HP-UX, Linux, Mac OS X, NetBSD and Solaris.</p> <p>If compiling ejabberd from source code, PAM support is disabled by default, so you have to enable PAM support when configuring the ejabberd compilation: <code>./configure --enable-pam</code></p> <p>Options:</p> <ul> <li>pam_service</li> <li>pam_userinfotype</li> </ul> <p>Example:</p> <pre><code>auth_method: [pam]\npam_service: ejabberd\n</code></pre> <p>Though it is quite easy to set up PAM support in ejabberd, there are several problems that you may need to solve:</p> <ul> <li> <p>To perform PAM authentication, ejabberd uses external C-program  called <code>epam</code>. By default, it is located in  <code>/var/lib/ejabberd/priv/bin/</code> directory. You have to set it root on  execution in the case when your PAM module requires root privileges  (<code>pam_unix.so</code> for example). Also you have to grant access for  ejabberd to this file and remove all other permissions from it.  Execute with root privileges:</p> <pre><code>chown root:ejabberd /var/lib/ejabberd/priv/bin/epam\nchmod 4750 /var/lib/ejabberd/priv/bin/epam\n</code></pre> </li> <li> <p>Make sure you have the latest version of PAM installed on your  system. Some old versions of PAM modules cause memory leaks. If you  are not able to use the latest version, you can <code>kill(1)</code> <code>epam</code>  process periodically to reduce its memory consumption: ejabberd  will restart this process immediately.</p> </li> <li> <p>ejabberd binary installers include <code>epam</code>  pointing to module paths that may not work in your system.  If authentication doesn't work correctly, check if syslog  (example: <code>journalctl -t epam -f</code>)  reports errors like <code>PAM unable to dlopen(/home/runner/... No such file or directory</code>.  In that case, create a PAM configuration file  (example: <code>/etc/pam.d/ejabberd</code>)  and provide the real path to that file in your machine:</p> <pre><code>#%PAM-1.0\nauth        sufficient  /usr/lib/x86_64-linux-gnu/security/pam_unix.so audit\naccount     sufficient  /usr/lib/x86_64-linux-gnu/security/pam_unix.so audit\n</code></pre> </li> <li> <p><code>epam</code> program tries to turn off delays on authentication failures.  However, some PAM modules ignore this behavior and rely on their own  configuration options. You can create a configuration file  (in Debian it would be <code>/etc/pam.d/ejabberd</code>).  This example shows how to turn off delays in  <code>pam_unix.so</code> module:</p> <pre><code>#%PAM-1.0\nauth        sufficient  pam_unix.so likeauth nullok nodelay\naccount     sufficient  pam_unix.so\n</code></pre> <p>That is not a ready to use configuration file: you must use it as a  hint when building your own PAM configuration instead. Note that if  you want to disable delays on authentication failures in the PAM  configuration file, you have to restrict access to this file, so a  malicious user can\u2019t use your configuration to perform brute-force  attacks.</p> </li> <li> <p>You may want to allow login access only for certain users.  <code>pam_listfile.so</code> module provides such functionality.</p> </li> <li> <p>If you use <code>pam_winbind</code> to authorize against a Windows Active  Directory, then <code>/etc/nsswitch.conf</code> must be configured to use  <code>winbind</code> as well.</p> </li> </ul>"},{"location":"admin/configuration/authentication/#jwt-authentication","title":"JWT Authentication","text":"<p>ejabberd supports authentication using JSON Web Token (JWT).  When enabled, clients send signed tokens instead of passwords, which are checked using a private key specified in the jwt_key option. JWT payload must look like this:</p> <pre><code>{\n  \"jid\": \"test@example.org\",\n  \"exp\": 1564436511\n}\n</code></pre> <p>Options:</p> <ul> <li>jwt_key</li> <li>jwt_auth_only_rule</li> <li>jwt_jid_field</li> </ul> <p>Example:</p> <pre><code>auth_method: jwt\njwt_key: /path/to/jwt/key\n</code></pre> <p>In this example, admins can use both JWT and plain passwords, while the rest of users can use only JWT.</p> <pre><code># the order is important here, don't use [sql, jwt]\nauth_method: [jwt, sql]\n\naccess_rules:\n  jwt_only:\n    deny: admin\n    allow: all\n\njwt_auth_only_rule: jwt_only\n</code></pre> <p>Please notice that, when using JWT authentication, mod_offline will not work. With JWT authentication the accounts do not exist in the database, and there is no way to know if a given account exists or not.</p> <p>For more information about JWT authentication, you can check a brief tutorial in the ejabberd 19.08 release notes.</p>"},{"location":"admin/configuration/authentication/#scram","title":"SCRAM","text":"<p>The top-level option <code>auth_password_format</code> defines in what format the users passwords are stored: SCRAM format or plaintext format.</p> <p>The top-level option <code>auth_scram_hash</code> defines the hash algorithm that will be used to scram the password.</p> <p>ejabberd supports channel binding to the external channel, allowing the clients to use <code>-PLUS</code> authentication mechanisms.</p> <p>In summary, depending on the configured options, ejabberd supports:</p> <ul> <li><code>SCRAM_SHA-1(-PLUS)</code></li> <li><code>SCRAM_SHA-256(-PLUS)</code></li> <li><code>SCRAM_SHA-512(-PLUS)</code></li> </ul> <p>For details about the client-server communication when using SCRAM, refer to SASL Authentication and SCRAM.</p>"},{"location":"admin/configuration/authentication/#internal-storage","title":"Internal storage","text":"<p>When ejabberd starts with internal auth method and SCRAM password format configured:</p> <pre><code>auth_method: internal\nauth_password_format: scram\n</code></pre> <p>and detects that there are plaintext passwords stored, they are automatically converted to SCRAM format:</p> <pre><code>[info] Passwords in Mnesia table 'passwd' will be SCRAM'ed\n[info] Transforming table 'passwd', this may take a while\n</code></pre>"},{"location":"admin/configuration/authentication/#sql-database","title":"SQL Database","text":"<p>Please note that if you use SQL auth method and SCRAM password format, the plaintext passwords already stored in the database are not automatically converted to SCRAM format.</p> <p>To convert plaintext passwords to SCRAM format in your database, use the convert_to_scram command:</p> <pre><code>ejabberdctl convert_to_scram example.org\n</code></pre>"},{"location":"admin/configuration/authentication/#foreign-authentication","title":"Foreign authentication","text":"<p>Note on SCRAM using and foreign authentication limitations: when using the SCRAM password format, it is not possible to use foreign authentication method in ejabberd, as the real password is not known.</p> <p>Foreign authentication are use to authenticate through various bridges ejabberd provide. Foreign authentication includes at the moment SIP and TURN auth support and they will not be working with SCRAM.</p>"},{"location":"admin/configuration/basic/","title":"Basic Configuration","text":""},{"location":"admin/configuration/basic/#xmpp-domains","title":"XMPP Domains","text":""},{"location":"admin/configuration/basic/#host-names","title":"Host Names","text":"<p>ejabberd supports managing several independent XMPP domains on a single ejabberd instance, using a feature called virtual hosting.</p> <p>The option <code>hosts</code>  defines a list containing one or more domains that ejabberd will serve.</p> <p>Of course, the <code>hosts</code> list can contain just one domain if you do not want to host multiple XMPP domains on the same instance.</p> <p>Examples:</p> <ul> <li> <p>Serving one domain:</p> <pre><code>hosts: [example.org]\n</code></pre> </li> <li> <p>Serving three domains:</p> <pre><code>hosts:\n  - example.net\n  - example.com\n  - jabber.somesite.org\n</code></pre> </li> </ul>"},{"location":"admin/configuration/basic/#virtual-hosting","title":"Virtual Hosting","text":"<p>When managing several XMPP domains in a single instance, those domains are truly independent. It means they can even have different configuration parameters.</p> <p>Options can be defined separately for every virtual host using the <code>host_config</code> option.</p> <p>Examples:</p> <ul> <li> <p>Domain <code>example.net</code> is using the internal authentication method  while domain <code>example.com</code> is using the LDAP server running on the  domain <code>localhost</code> to perform authentication:</p> <pre><code>host_config:\n  example.net:\n    auth_method: internal\n  example.com:\n    auth_method: ldap\n    ldap_servers:\n      - localhost\n    ldap_uids:\n      - uid\n    ldap_rootdn: \"dc=localdomain\"\n    ldap_password: \"\"\n</code></pre> </li> <li> <p>Domain <code>example.net</code> is using SQL to perform authentication while  domain <code>example.com</code> is using the LDAP servers running on the  domains <code>localhost</code> and <code>otherhost</code>:</p> <pre><code>host_config:\n  example.net:\n    auth_method: sql\n    sql_type: odbc\n    sql_server: \"DSN=ejabberd;UID=ejabberd;PWD=ejabberd\"\n  example.com:\n    auth_method: ldap\n    ldap_servers:\n      - localhost\n      - otherhost\n    ldap_uids:\n      - uid\n    ldap_rootdn: \"dc=example,dc=com\"\n    ldap_password: \"\"\n</code></pre> </li> </ul> <p>To define specific ejabberd modules in a virtual host, you can define the global <code>modules</code> option with the common modules, and later add specific modules to certain virtual hosts. To accomplish that, instead of defining each option in <code>host_config</code> use <code>append_host_config</code> with the same syntax.</p> <p>In this example three virtual hosts have some similar modules, but there are also other different modules for some specific virtual hosts:</p> <pre><code>## This ejabberd server has three vhosts:\nhosts:\n  - one.example.org\n  - two.example.org\n  - three.example.org\n\n## Configuration of modules that are common to all vhosts\nmodules:\n  mod_roster:    {}\n  mod_configure: {}\n  mod_disco:     {}\n  mod_private:   {}\n  mod_time:      {}\n  mod_last:      {}\n  mod_version:   {}\n\nappend_host_config:\n  ## Add some modules to vhost one:\n  one.example.org:\n    modules:\n      mod_muc:\n        host: conference.one.example.org\n      mod_ping: {}\n  ## Add a module just to vhost two:\n  two.example.org:\n    modules:\n      mod_muc:\n        host: conference.two.example.org\n</code></pre>"},{"location":"admin/configuration/basic/#logging","title":"Logging","text":"<p>ejabberd configuration can help a lot by having the right amount of logging set up.</p> <p>There are several toplevel options to configure logging:</p> <ul> <li><code>loglevel</code>: Verbosity of log files generated by ejabberd.</li> <li><code>hide_sensitive_log_data</code>:     Privacy option to disable logging of IP address or sensitive data.</li> <li><code>log_modules_fully</code>:     Modules that will log everything independently from the general <code>loglevel</code> option.</li> <li><code>log_rotate_size</code></li> <li><code>log_rotate_count</code>:     Setting count to N keeps N rotated logs. Setting count to 0     does not disable rotation, it instead rotates the file and keeps no previous     versions around. Setting size to X rotate log when it reaches X bytes.</li> <li><code>log_burst_limit_count</code></li> <li><code>log_burst_limit_window_time</code></li> </ul> <p>The values in default configuration file are:</p> <pre><code>log_rotate_size: 10485760\nlog_rotate_count: 1\n</code></pre> <p>For example, log warning and higher messages, but all c2s messages, and hide sensitive data:</p> <pre><code>loglevel: warning\nhide_sensitive_log_data: true\nlog_modules_fully: [ejabberd_c2s]\n</code></pre>"},{"location":"admin/configuration/basic/#default-language","title":"Default Language","text":"<p>The <code>language</code> option defines the default language of server strings that can be seen by XMPP clients. If a XMPP client does not support <code>xml:lang</code>, ejabberd uses the language specified in this option.</p> <p>The option syntax is:</p> <p><code>language: Language</code>: The default value is <code>en</code>. In order to take effect there must be a translation file <code>Language.msg</code> in ejabberd\u2019s <code>msgs</code> directory.</p> <p>For example, to set Russian as default language:</p> <pre><code>language: ru\n</code></pre> <p>The page Internationalization and Localization provides more details.</p>"},{"location":"admin/configuration/basic/#captcha","title":"CAPTCHA","text":"<p>Some ejabberd modules can be configured to require a CAPTCHA challenge on certain actions, for instance mod_block_strangers, mod_muc, mod_register, and mod_register_web. If the client does not support CAPTCHA Forms (<code>XEP-0158</code>), a web link is provided so the user can fill the challenge in a web browser.</p> <p>Example scripts are provided that generate the image using ImageMagick\u2019s Convert program and Ghostscript fonts. Remember to install those dependencies: in Debian install the <code>imagemagick</code> and <code>gsfonts</code> packages; in container images check their documentation for details.</p> <p>The relevant top-level options are:</p> <ul> <li> <p><code>captcha_cmd</code><code>: Path | Module</code>:   Full path to a script that generates the image,   or name of a module that supports generating CAPTCHA images   (mod_ecaptcha,   mod_captcha_rust).   The default value disables the feature: <code>undefined</code></p> </li> <li> <p><code>captcha_url</code><code>: URL | auto</code>:   An URL where CAPTCHA requests should be sent,   or <code>auto</code> to determine the URL automatically.   The default value is <code>auto</code>.</p> </li> </ul> <p>And finally, configure <code>request_handlers</code> for the <code>ejabberd_http</code> listener with a path handled by <code>ejabberd_captcha</code>, where the CAPTCHA images will be served.</p> <p>Example configuration:</p> <pre><code>hosts: [example.org]\n\ncaptcha_cmd: /lib/ejabberd-24.12/priv/bin/captcha.sh # make install or install-rel\n# captcha_cmd: /opt/ejabberd-24.12/lib/captcha.sh # Binary installers and container images\n# captcha_cmd: tools/captcha.sh # if ejabberd started with: make relive\n# captcha_cmd: mod_ecaptcha # if installed: ejabberdctl module_install mod_ecaptcha\n\ncaptcha_url: auto\n## captcha_url: http://example.org:5280/captcha\n## captcha_url: https://example.org:443/captcha\n## captcha_url: http://example.com/captcha\n\nlisten:\n  -\n    port: 5280\n    module: ejabberd_http\n    request_handlers:\n      /captcha: ejabberd_captcha\n</code></pre>"},{"location":"admin/configuration/basic/#acme","title":"ACME","text":"<p>ACME is used to automatically obtain SSL certificates for the domains served by ejabberd, which means that certificate requests and renewals are performed to some CA server (aka \"ACME server\") in a fully automated mode.</p>"},{"location":"admin/configuration/basic/#setting-up-acme","title":"Setting up ACME","text":"<p>In ejabberd, ACME is configured using the <code>acme</code> top-level option, check there the available options and example configuration.</p> <p>The automated mode is enabled by default. However, some configuration of ejabberd is still required, because ACME requires HTTP challenges: an ACME remote server will connect to your ejabberd server on HTTP port 80 during certificate issuance.</p> <p>For that reason you must have an <code>ejabberd_http</code> listener with TLS disabled handling an \"ACME well known\" path. For example:</p> <pre><code>listen:\n  -\n    module: ejabberd_http\n    port: 5280\n    tls: false\n    request_handlers:\n      /.well-known/acme-challenge: ejabberd_acme\n</code></pre> <p>Note that the ACME protocol requires challenges to be sent on port 80. Since this is a privileged port, ejabberd cannot listen on it directly without root privileges. Thus you need some mechanism to forward port 80 to the port defined by the listener (port 5280 in the example above). There are several ways to do this: using NAT, setcap (Linux only), or HTTP front-ends (e.g. <code>sslh</code>, <code>nginx</code>, <code>haproxy</code> and so on). Pick one that fits your installation the best, but DON'T run ejabberd as root.</p> <p>If you see errors in the logs with ACME server problem reports, it's highly recommended to change <code>ca_url</code> option in the <code>acme</code> top-level option to the URL pointing to some staging ACME environment, fix the problems until you obtain a certificate, and then change the URL back and retry using <code>request-certificate</code> ejabberdctl command (see below). This is needed because ACME servers typically have rate limits, preventing you from requesting certificates too rapidly and you can get stuck for several hours or even days. By default, ejabberd uses Let's Encrypt authority. Thus, the default value of <code>ca_url</code> option is <code>https://acme-v02.api.letsencrypt.org/directory</code> and the staging URL will be <code>https://acme-staging-v02.api.letsencrypt.org/directory</code>:</p> <pre><code>acme:\n  ## Staging environment\n  ca_url: https://acme-staging-v02.api.letsencrypt.org/directory\n  ## Production environment (the default):\n  # ca_url: https://acme-v02.api.letsencrypt.org/directory\n</code></pre> <p>The automated mode can be disabled by setting <code>auto</code> option to <code>false</code> in the <code>acme</code> top-level option:</p> <pre><code>acme:\n  auto: false\n</code></pre> <p>In this case automated renewals are still enabled, however, in order to request a new certificate, you need to run request_certificate  API command:</p> <pre><code>ejabberdctl request-certificate all\n</code></pre> <p>If you only want to request certificates for a subset of the domains, run:</p> <pre><code>ejabberdctl request-certificate domain.tld,pubsub.domain.tld,server.com,conference.server.com,...\n</code></pre> <p>You can view the certificates obtained using ACME and list_certificates:</p> <pre><code>$ ejabberdctl list-certificates\ndomain.tld /path/to/cert/file1 true\nserver.com /path/to/cert/file2 false\n</code></pre> <p>The output is mostly self-explained: every line contains the domain, the corresponding certificate file, and whether this certificate file is used or not. A certificate might not be used for several reasons: mostly because ejabberd detects a better certificate (i.e. not expired, or having a longer lifetime). It's recommended to revoke unused certificates if they are not yet expired (see below).</p> <p>At any point you can revoke a certificate using revoke_certificate: pick the certificate file from the listing above and run:</p> <pre><code>ejabberdctl revoke-certificate /path/to/cert/file\n</code></pre> <p>If the commands return errors, consult the log files for details.</p>"},{"location":"admin/configuration/basic/#acme-implementation-details","title":"ACME implementation details","text":"<p>In nutshell, certification requests are performed in two phases. Firstly, ejabberd creates an account at the ACME server. That is an EC private key. Secondly, a certificate is requested. In the case of a revocation, no account is used - only a certificate in question is needed. All information is stored under <code>acme</code> directory inside spool directory of ejabberd (typically <code>/var/lib/ejabberd</code>). An example content of the directory is the following:</p> <pre><code>$ tree /var/lib/ejabberd\n/var/lib/ejabberd\n\u251c\u2500\u2500 acme\n\u2502   \u251c\u2500\u2500 account.key\n\u2502   \u2514\u2500\u2500 live\n\u2502       \u251c\u2500\u2500 251ce180d964e98a2f18b65504df2ab7c55943e2\n\u2502       \u2514\u2500\u2500 93816a8429ebbaa75574eb3f59d4a806b67d6917\n...\n</code></pre> <p>Here, <code>account.key</code> is the EC private key used to identify the ACME account. You can inspect its content using <code>openssl</code> command:</p> <pre><code>openssl ec -text -noout -in /var/lib/ejabberd/acme/account.key\n</code></pre> <p>Obtained certificates are stored under <code>acme/live</code> directory. You can inspect any of the certificates using <code>openssl</code> command as well:</p> <pre><code>openssl x509 -text -noout -in /var/lib/ejabberd/acme/live/251ce180d964e98a2f18b65504df2ab7c55943e2\n</code></pre> <p>In the case of errors, you can delete the whole <code>acme</code> directory - ejabberd will recreate its content on next certification request. However, don't delete it too frequently - usually there is a rate limit on the number of accounts and certificates an ACME server creates. In particular, for Let's Encrypt the limits are described here.</p>"},{"location":"admin/configuration/basic/#access-rights","title":"Access Rights","text":"<p>This section describes new ACL syntax introduced in ejabberd 16.06. For old access rule and ACL syntax documentation, please refer to configuration document archive</p>"},{"location":"admin/configuration/basic/#acl","title":"ACL","text":"<p>Access control in ejabberd is performed via Access Control Lists (ACLs), using the <code>acl</code> option. The declarations of ACLs in the configuration file have the following syntax:</p> <pre><code>acl:\n  ACLName:\n    ACLType: ACLValue\n</code></pre> <p><code>ACLName</code> is any name you may want to give, and later can use it in other options to reference that ACL. The following <code>ACLName</code> are pre-defined:</p> <ul> <li> <p><code>all</code>:   Matches any JID.</p> </li> <li> <p><code>none</code>:   Matches no JID.</p> </li> </ul> <p><code>ACLType: ACLValue</code> can be one of the following:</p> <ul> <li> <p><code>all</code>:   Matches all JIDs. Example:</p> <pre><code>acl:\n  world: all\n</code></pre> </li> <li> <p><code>user: Username</code>:   Matches the user with the name <code>Username</code> on any of the local virtual host.  Example:</p> <pre><code>acl:\n  admin:\n    user: yozhik\n</code></pre> </li> <li> <p><code>user: {Username: Server} | Jid</code>:   Matches the user with the JID <code>Username@Server</code> and any resource.  Example:</p> <pre><code>acl:\n  admin:\n    - user: peter@example.org\n    - user:\n        yozhik@example.org\n    - user: {susan: example.org}\n    - user:\n        jan: example.org\n</code></pre> </li> <li> <p><code>server: Server</code>:   Matches any JID from server <code>Server</code>. Example:</p> <pre><code>acl:\n  exampleorg:\n    server: example.org\n</code></pre> </li> <li> <p><code>resource: Resource</code>:   Matches any JID with a resource <code>Resource</code>. Example:</p> <pre><code>acl:\n  mucklres:\n    resource: muckl\n</code></pre> </li> <li> <p><code>shared_group: Groupname</code>:   Matches any member of a Shared Roster Group with name <code>Groupname</code> in  the virtual host. Example:</p> <pre><code>acl:\n  techgroupmembers:\n    shared_group: techteam\n</code></pre> </li> <li> <p><code>shared_group: {Groupname: Server}</code>:   Matches any member of a Shared Roster Group with name <code>Groupname</code> in  the virtual host <code>Server</code>. Example:</p> <pre><code>acl:\n  techgroupmembers:\n    - shared_group: {techteam: example.org}\n    - shared_group:\n        secteam: example.org\n</code></pre> </li> <li> <p><code>ip: Network</code>:   Matches any IP address from the <code>Network</code>. Example:</p> <pre><code>acl:\n  loopback:\n    ip:\n      - 127.0.0.0/8\n      - \"::1\"\n</code></pre> </li> <li> <p><code>user_regexp: Regexp</code>:   Matches any local user with a name that matches <code>Regexp</code> on local  virtual hosts. Example:</p> <pre><code>acl:\n  tests:\n    user_regexp: \"^test[0-9]*$\"\n</code></pre> </li> <li> <p><code>user_regexp: {Regexp: Server} | JidRegexp</code>:   Matches any user with a name that matches <code>Regexp</code> at server  <code>Server</code>. Example:</p> <pre><code>acl:\n  tests:\n    user_regexp:\n      - \"^test1\": example.org\n      - \"^test2@example.org\"\n</code></pre> </li> <li> <p><code>server_regexp: Regexp</code>:   Matches any JID from the server that matches <code>Regexp</code>. Example:</p> <pre><code>acl:\n  icq:\n    server_regexp: \"^icq\\\\.\"\n</code></pre> </li> <li> <p><code>resource_regexp: Regexp</code>:   Matches any JID with a resource that matches <code>Regexp</code>. Example:</p> <pre><code>acl:\n  icq:\n    resource_regexp: \"^laptop\\\\.\"\n</code></pre> </li> <li> <p><code>node_regexp: {UserRegexp: ServerRegexp}</code>:   Matches any user with a name that matches <code>UserRegexp</code> at any server  that matches <code>ServerRegexp</code>. Example:</p> <pre><code>acl:\n  yozhik:\n    node_regexp:\n      \"^yozhik$\": \"^example.(com|org)$\"\n</code></pre> </li> </ul> <ul> <li> <p><code>user_glob: Glob</code>:</p> </li> <li> <p><code>user_glob: {Glob: Server}</code>:</p> </li> <li> <p><code>server_glob: Glob</code>:</p> </li> <li> <p><code>resource_glob: Glob</code>:</p> </li> <li> <p><code>node_glob: {UserGlob: ServerGlob}</code>:   This is the same as above. However, it uses shell glob patterns instead of regexp. These patterns can have the following special characters:</p> <ul> <li> <p><code>*</code>:   matches any string including the null string.</p> </li> <li> <p><code>?</code>:   matches any single character.</p> </li> <li> <p><code>[...]</code>:   matches any of the enclosed characters. Character ranges are  specified by a pair of characters separated by a <code>-</code>. If the  first character after <code>[</code> is a <code>!</code>, any character not enclosed  is matched.</p> </li> </ul> </li> </ul>"},{"location":"admin/configuration/basic/#access-rules","title":"Access Rules","text":"<p>The <code>access_rules</code> option is used to allow or deny access to different services. The syntax is:</p> <pre><code>access_rules:\n  AccessName:\n    - allow|deny: ACLName|ACLDefinition\n</code></pre> <p>Each definition may contain arbitrary number of <code>- allow</code> or <code>- deny</code> sections, and each section can contain any number of acl rules (as defined in previous section, it recognizes one additional rule <code>acl: ACLName</code> that matches when the ACL named <code>ACLName</code> matches). If no ACL name or definition is defined, the ACL <code>all</code> is applied.</p> <p>Definition's <code>- allow</code> and <code>- deny</code> sections are processed in top to bottom order, and first one for which all listed acl rules matches is returned as result of access rule. If no rule matches, <code>deny</code> is returned.</p> <p>To simplify configuration two shortcut version are available: <code>- allow: acl</code> and <code>- allow</code>, example below shows equivalent definitions where short or long version are used:</p> <pre><code>access_rules:\n  a_short: admin\n  a_long:\n    - acl: admin\n  b_short:\n    - deny: banned\n    - allow\n  b_long:\n    - deny:\n      - acl: banned\n    - allow:\n      - all\n</code></pre> <p>If you define specific Access rights in a virtual host, remember that the globally defined Access rights have precedence over those. This means that, in case of conflict, the Access granted or denied in the global server is used and the Access of a virtual host doesn't have effect.</p> <p>Example:</p> <pre><code>access_rules:\n  configure:\n    - allow: admin\n  something:\n    - deny: someone\n    - allow\n  s2s_banned:\n    - deny: problematic_hosts\n    - deny:\n      - acl: banned_forever\n    - deny:\n      - ip: 222.111.222.111/32\n    - deny:\n      - ip: 111.222.111.222/32\n    - allow\n  xmlrpc_access:\n    - allow:\n      - user: peter@example.com\n    - allow:\n      - user: ivone@example.com\n    - allow:\n      - user: bot@example.com\n      - ip: 10.0.0.0/24\n</code></pre> <p>The following <code>AccessName</code> are pre-defined:</p> <ul> <li> <p><code>all</code>:   Always returns the value \u2018<code>allow</code>\u2019.</p> </li> <li> <p><code>none</code>:   Always returns the value \u2018<code>deny</code>\u2019.</p> </li> </ul>"},{"location":"admin/configuration/basic/#shaper-rules","title":"Shaper Rules","text":"<p>The <code>shaper_rules</code> top-level option declares shapers to use for matching user/hosts. The syntax is:</p> <pre><code>shaper_rules:\n  ShaperRuleName:\n    - Number|ShaperName: ACLName|ACLDefinition\n</code></pre> <p>Semantic is similar to that described in Access Rights section, only difference is that instead using <code>- allow</code> or <code>- deny</code>, name of shaper or number should be used.</p> <p>Examples:</p> <pre><code>shaper_rules:\n  connections_limit:\n    - 10:\n      - user: peter@example.com\n    - 100: admin\n    - 5\n  download_speed:\n    - fast: admin\n    - slow: anonymous_users\n    - normal\n  log_days: 30\n</code></pre>"},{"location":"admin/configuration/basic/#limiting-opened-sessions","title":"Limiting Opened Sessions","text":"<p>The special access <code>max_user_sessions</code> specifies the maximum number of sessions (authenticated connections) per user. If a user tries to open more sessions by using different resources, the first opened session will be disconnected. The error <code>session replaced</code> will be sent to the disconnected session. The value for this option can be either a number, or <code>infinity</code>. The default value is <code>infinity</code>.</p> <p>The syntax is:</p> <pre><code>shaper_rules:\n  max_user_sessions:\n    - Number: ACLName|ACLDefinition\n</code></pre> <p>This example limits the number of sessions per user to 5 for all users, and to 10 for admins:</p> <pre><code>shaper_rules:\n  max_user_sessions:\n    - 10: admin\n    - 5\n</code></pre>"},{"location":"admin/configuration/basic/#connections-to-remote-server","title":"Connections to Remote Server","text":"<p>The special access <code>max_s2s_connections</code> specifies how many simultaneous S2S connections can be established to a specific remote XMPP server. The default value is <code>1</code>. There\u2019s also available the access <code>max_s2s_connections_per_node</code>.</p> <p>The syntax is:</p> <pre><code>shaper_rules:\n  max_s2s_connections: MaxNumber\n</code></pre> <p>For example, let's allow up to 3 connections with each remote server:</p> <pre><code>shaper_rules:\n  max_s2s_connections: 3\n</code></pre>"},{"location":"admin/configuration/basic/#shapers","title":"Shapers","text":"<p>The <code>shaper</code> top-level option defines limitations in the connection traffic. The basic syntax is:</p> <pre><code>shaper:\n  ShaperName: Rate\n</code></pre> <p>where <code>Rate</code> stands for the maximum allowed incoming rate in bytes per second. When a connection exceeds this limit, ejabberd stops reading from the socket until the average rate is again below the allowed maximum.</p> <p>This example defines a shaper with name <code>normal</code> that limits traffic speed to 1,000bytes/second, and another shaper with name <code>fast</code> that limits traffic speed to 50,000bytes/second:</p> <pre><code>shaper:\n  normal: 1000\n  fast: 50000\n</code></pre> <p>You can use the full syntax to set the <code>BurstSize</code> too:</p> <pre><code>shaper:\n  ShaperName:\n    rate: Rate\n    burst_size: BurstSize\n</code></pre> <p>With <code>BurstSize</code> you can allow client to send more data, but its amount can be clamped reasonably. Each connection is allowed to send <code>BurstSize</code> of data before processing is delayed, and that amount is replenished by <code>Rate</code> each second, but never more than what <code>BurstSize</code> allows. This allows the client to send quite a bit of data at once, but still have limited amount of data to send on constant basis.</p> <p>In this example, the <code>normal</code> shaper has <code>Rate</code> set to <code>1000</code> and the <code>BurstSize</code> takes that same value. The <code>not_normal</code> shaper has the same <code>Rate</code> that before, and sets a higher <code>BurstSize</code>:</p> <pre><code>shaper:\n  normal: 1000\n  not_normal:\n    rate: 1000\n    burst_size: 20000\n</code></pre>"},{"location":"admin/configuration/database/","title":"Database Configuration","text":"<p>ejabberd uses its internal Mnesia database by default. However, it is possible to use a relational database, key-value storage or an LDAP server to store persistent, long-living data.</p> <p>ejabberd is very flexible: you can configure different authentication methods for different virtual hosts, you can configure different authentication mechanisms for the same virtual host (fallback), you can set different storage systems for modules, and so forth.</p>"},{"location":"admin/configuration/database/#supported-storages","title":"Supported storages","text":"<p>The following databases are supported by ejabberd:</p> <ul> <li> <p><code>Mnesia</code>. Used by default, nothing to setup to start using it</p> </li> <li> <p><code>MySQL</code>. Check the tutorial Using ejabberd with MySQL</p> </li> <li> <p><code>PostgreSQL</code></p> </li> <li> <p><code>MS SQL Server/SQL Azure</code>.     Check the Microsoft SQL Server section</p> </li> <li> <p><code>SQLite</code></p> </li> <li> <p>Any <code>ODBC</code> compatible database</p> </li> <li> <p><code>Redis</code>(only for transient data).     Check the Redis section</p> </li> <li> <p><code>LDAP</code> is documented in the LDAP section</p> </li> </ul>"},{"location":"admin/configuration/database/#virtual-hosting","title":"Virtual Hosting","text":"<p>If you define several host names in the <code>ejabberd.yml</code> configuration file, probably you want that each virtual host uses a different configuration of database, authentication and storage, so that usernames do not conflict and mix between different virtual hosts.</p> <p>For that purpose, the options described in the next sections must be set inside the host_config top-level option for each virtual host).</p> <p>For example:</p> <pre><code>host_config:\n  public.example.org:\n    sql_type: pgsql\n    sql_server: localhost\n    sql_database: database-public-example-org\n    sql_username: ejabberd\n    sql_password: password\n    auth_method: [sql]\n</code></pre>"},{"location":"admin/configuration/database/#default-database","title":"Default database","text":"<p>You can simplify your configuration by setting the default database with the <code>default_db</code> top-level option:</p> <ul> <li>it sets the default authentication method when the   <code>auth_method</code> top-level option is not configured</li> <li>it defines the database to use in ejabberd modules that support the <code>db_type</code> option,   when that option is not configured.</li> </ul>"},{"location":"admin/configuration/database/#database-schema","title":"Database Schema","text":"<p> updated in 24.06</p> <p>update</p> <p>Modify the database schema and all its tables to match the installed ejabberd version.   Not to be confused with 6251a85a-47d0-11ee-be56-0242ac120002:51a3875221036d7de6f90b769c61cf73: or 6251a85a-47d0-11ee-be56-0242ac120002:737d91299132920ae27fbc3f0dfe405b:. <p>The update_sql_schema top-level option allows ejabberd to create and update the tables automatically in the SQL database when using MySQL, PostgreSQL or SQLite. That option was added in ejabberd 23.10, and enabled by default in 24.06. If you can use that feature:</p> <ol> <li>Create the database in your SQL server</li> <li>Create an account in the SQL server and grant it rights in the database</li> <li>Configure in ejabberd the SQL Options that allow it to connect</li> <li>Start ejabberd ...</li> <li>and it will take care to create the tables (or update them if they exist from a previous ejabberd version)</li> </ol> <p>If that option is disabled, or you are using a different SQL database, or an older ejabberd release, then you must create the tables in the database manually before starting ejabberd. The SQL database schema files are available:</p> <ul> <li> <p>If installing ejabberd from sources, sql files are   in the installation directory. By default: <code>/usr/local/lib/ejabberd/priv/sql</code></p> </li> <li> <p>If installing ejabberd from Process-One installer, sql files are   in the ejabberd's installation path under <code>&lt;base&gt;/lib/ejabberd*/priv/sql</code></p> </li> </ul> <p>See ejabberd SQL Database Schema for details on database schemas.</p>"},{"location":"admin/configuration/database/#default-and-new-schemas","title":"Default and New Schemas","text":"<p>If using MySQL, PostgreSQL, Microsoft SQL or SQLite, you can choose between two database schemas:</p> <ul> <li>the default schema is preferable when serving one massive domain,</li> <li>the new schema is preferable when serving many small domains.</li> </ul> <p>The default schema stores only one XMPP domain in the database. The XMPP domain is not stored as this is the same for all the accounts, and this saves space in massive deployments. However, to handle several domains, you have to setup one database per domain and configure each one independently using host_config, so in that case you may prefer the new schema.</p> <p>The new schema stores the XMPP domain in a new column <code>server_host</code> in the database entries, so it allows to handle several XMPP domains in a single ejabberd database. Using this schema is preferable when serving several XMPP domains and changing domains from time to time. However, if you have only one massive domain, you may prefer to use the default schema.</p> <p>To use the new schema, edit the ejabberd configuration file and enable new_sql_schema top-level option:</p> <pre><code>new_sql_schema: true\n</code></pre> <p>When creating the tables, if ejabberd can use the update_sql_schema top-level option as explained in the Database Schema section, it will take care to create the tables with the correct schema.</p> <p>On the other hand, if you are creating the tables manually, remember to use the proper SQL schema! For example, if you are using MySQL and choose the default schema, use <code>mysql.sql</code>. If you are using PostgreSQL and need the new schema, use <code>pg.new.sql</code>.</p> <p>switch</p> <p>Change the database schema and all its tables from <code>default</code> schema to <code>new</code> schema.   Not to be confused with 6251a85a-47d0-11ee-be56-0242ac120002:0331828197a84cdf26c349609d9fdad3: or 6251a85a-47d0-11ee-be56-0242ac120002:942efcb4916c09fa91f66795e82cadfc:. <p>If you already have a MySQL or PostgreSQL database with the default schema and contents, you can switch it to the new schema:</p> <ul> <li> <p>MySQL: Edit the file <code>sql/mysql.old-to.new.sql</code> which is included with ejabberd, fill DEFAULT_HOST in the first line, and import that SQL file in your database. Then enable the <code>new_sql_schema</code> option in the ejabberd configuration, and restart ejabberd.</p> </li> <li> <p>PostgreSQL: First enable <code>new_sql_schema</code> and mod_admin_update_sql in your ejabberd configuration:     <pre><code>new_sql_schema: true\nmodules:\n  mod_admin_update_sql: {}\n</code></pre> then restart ejabberd, and finally execute the update_sql command:     <pre><code>ejabberdctl update_sql\n</code></pre></p> </li> </ul>"},{"location":"admin/configuration/database/#sql-options","title":"SQL Options","text":"<p>The actual database access is defined in the options with <code>sql_</code> prefix. The values are used to define if we want to use ODBC, or one of the two native interface available, PostgreSQL or MySQL.</p> <p>To configure SQL there are several top-level options:</p> <ul> <li>sql_type</li> <li>sql_server</li> <li>sql_port</li> <li>sql_database</li> <li>sql_username</li> <li>sql_password</li> <li>sql_ssl, see section SQL with SSL connection</li> <li>sql_ssl_verify</li> <li>sql_ssl_cafile</li> <li>sql_ssl_certfile</li> <li>sql_pool_size</li> <li>sql_keepalive_interval</li> <li>sql_odbc_driver</li> <li>sql_start_interval</li> <li>sql_prepared_statements</li> <li>update_sql_schema, see section Database Schema</li> <li>new_sql_schema, see section Default and New Schemas</li> </ul> <p>Example of plain ODBC connection:</p> <pre><code>sql_server: \"DSN=database;UID=ejabberd;PWD=password\"\n</code></pre> <p>Example of MySQL connection:</p> <pre><code>sql_type: mysql\nsql_server: server.company.com\nsql_port: 3306 # the default\nsql_database: mydb\nsql_username: user1\nsql_password: \"**********\"\nsql_pool_size: 5\n</code></pre>"},{"location":"admin/configuration/database/#sql-with-ssl-connection","title":"SQL with SSL Connection","text":"<p>The sql_ssl top-level option allows SSL encrypted connections to MySQL, PostgreSQL, and Microsoft SQL servers.</p> <p>Please notice that ejabberd verifies the certificate presented by the SQL server against the CA certificate list. For that reason, if your SQL server uses a self-signed certificate, you need to setup sql_ssl_verify and sql_ssl_cafile, for example:</p> <pre><code>sql_ssl: true\nsql_ssl_verify: false\nsql_ssl_cafile: \"/path/to/sql_server_cacert.pem\"\n</code></pre> <p>This tells ejabberd to ignore problems from not matching any CA certificate from default list, and instead try to verify using the specified CA certificate.</p>"},{"location":"admin/configuration/database/#sql-authentication","title":"SQL Authentication","text":"<p>You can authenticate users against an SQL database, see the option <code>auth_method</code> in the Authentication section.</p> <p>To store the passwords in SCRAM format instead of plaintext, see the SCRAM section.</p>"},{"location":"admin/configuration/database/#sql-storage","title":"SQL Storage","text":"<p>Several ejabberd modules have options called <code>db_type</code>, and can store their tables in an SQL database instead of internal.</p> <p>In this sense, if you defined your database access using the SQL Options, you can configure a module to use your database by adding the option <code>db_type: sql</code> to that module.</p> <p>Alternatively, if you want all modules to use your SQL database when possible, you may prefer to set SQL as your default database.</p>"},{"location":"admin/configuration/database/#microsoft-sql-server","title":"Microsoft SQL Server","text":"<p>For now, MS SQL is only supported in Unix-like OS'es. You need to have <code>unixODBC</code> installed on your machine, and your Erlang/OTP must be compiled with ODBC support. Also, in some cases you need to add machine name to <code>sql_username</code>, especially when you have <code>sql_server</code> defined as an IP address, e.g.:</p> <pre><code>sql_type: mssql\nsql_server: 1.2.3.4\nsql_username: user1@host\n</code></pre> <p>By default, ejabberd will use the <code>FreeTDS</code> driver. You need to have the driver file <code>libtdsodbc.so</code> installed in your library PATH on your system.</p> <p>If the FreeTDS driver is not installed in a standard location, or if you want to use another ODBC driver, you can specify the path to the driver using the sql_odbc_driver option, available in ejabberd 20.12 or later. For example, if you want to use Microsoft ODBC Driver 17 for SQL Server:</p> <pre><code>sql_odbc_driver: \"/opt/microsoft/msodbcsql17/lib64/libmsodbcsql-17.3.so.1.1\"\n</code></pre> <p>Note that if you use a Microsoft driver, you may have to use an IP address instead of a host name for the <code>sql_server</code> option.</p> <p>If hostname (or IP address) is specified in <code>sql_server</code> option, ejabberd will connect using a an ODBC DSN connection string constructed with:</p> <ul> <li>SERVER=sql_server</li> <li>DATABASE=sql_database</li> <li>UID=sql_username</li> <li>PWD=sql_password</li> <li>PORT=sql_port</li> <li>ENCRYPTION=required (only if sql_ssl is true)</li> <li>CLIENT_CHARSET=UTF-8</li> </ul> <p>Since ejabberd 23.04, t is possible to use different connection options by putting a full ODBC connection string in <code>sql_server</code> (e.g. <code>DSN=database;UID=ejabberd;PWD=password</code>). The DSN must be configured in existing system or user odbc.ini file, where it can be configured as desired, using a driver from system odbcinst.ini. The sql_odbc_driver option will have no effect in this case.</p> <p>If specifying an ODBC connection string, an ODBC connection string must also be specified for any other hosts using MS SQL DB, otherwise the auto-generated ODBC configuration will interfere.</p>"},{"location":"admin/configuration/database/#redis","title":"Redis","text":"<p><code>Redis</code> is an advanced key-value cache and store. You can use it to store transient data, such as records for C2S (client) sessions.</p> <p>The available top-level options are:</p> <ul> <li>redis_server</li> <li>redis_port</li> <li>redis_password</li> <li>redis_db</li> <li>redis_connect_timeout</li> </ul> <p>Example configuration:</p> <pre><code>redis_server: redis.server.com\nredis_db: 1\n</code></pre>"},{"location":"admin/configuration/file-format/","title":"File format","text":""},{"location":"admin/configuration/file-format/#yaml-file-format","title":"Yaml File Format","text":"<p>ejabberd loads its configuration file during startup. This configuration file is written in <code>YAML</code> format, and its file name MUST have \u201c.yml\u201d or \u201c.yaml\u201d extension. This helps ejabberd to differentiate between this new format and the legacy configuration file format.</p> <p>Please, consult <code>ejabberd.log</code> for configuration errors. ejabberd will report syntax related errors, as well as complains about unknown options and invalid values. Make sure you respect indentation (YAML is sensitive to this) or you will get pretty cryptic errors.</p> <p>Note that ejabberd never edits the configuration file. If you are changing parameters at runtime from web admin interface, you will need to apply them to configuration file manually. This is to prevent messing up with your config file comments, syntax, etc.</p>"},{"location":"admin/configuration/file-format/#reload-at-runtime","title":"Reload at Runtime","text":"<p>You can modify the ejabberd configuration file and reload it at runtime: the changes you made are applied immediately, no need to restart ejabberd. This applies to adding, changing or removing vhosts, listened ports, modules, ACLs or any other options.</p> <p>How to do this?</p> <ol> <li>Let's assume your ejabberd server is already running</li> <li>Modify the configuration file</li> <li>Run the reload_config command</li> <li>ejabberd will read that file, check its YAML syntax is valid,    check the options are valid and known...</li> <li>If there's any problem in the configuration file,    the reload is aborted and an error message is logged with details,    so you can fix the problem.</li> <li>If the file is right, it detects the changed options,    and applies them immediately (add/remove hosts, add/remove modules, ...)</li> </ol>"},{"location":"admin/configuration/file-format/#legacy-configuration-file","title":"Legacy Configuration File","text":"<p>In previous ejabberd version the configuration file should be written in Erlang terms. The format is still supported, but it is highly recommended to convert it to the new YAML format with the convert_to_yaml API command using ejabberdctl.</p> <p>If you want to specify some options using the old Erlang format, you can set them in an additional cfg file, and include it using the <code>include_config_file</code> option, see Include Additional Files.</p>"},{"location":"admin/configuration/file-format/#include-additional-files","title":"Include Additional Files","text":"<p>The option include_config_file  in a configuration file instructs ejabberd to include other configuration files immediately.</p> <p>This is a basic example:</p> <pre><code>include_config_file: /etc/ejabberd/additional.yml\n</code></pre> <p>In this example, the included file is not allowed to contain a <code>listen</code> option. If such an option is present, the option will not be accepted. The file is in a subdirectory from where the main configuration file is.</p> <pre><code>include_config_file:\n  ./example.org/additional_not_listen.yml:\n    disallow: [listen]\n</code></pre> <p>Please notice that options already defined in the main configuration file cannot be redefined in the included configuration files. But you can use host_config and append_host_config as usual (see Virtual Hosting).</p> <p>In this example, <code>ejabberd.yml</code> defines some ACL for the whole ejabberd server, and later includes another file:</p> <pre><code>acl:\n  admin:\n    user:\n      - admin@localhost\ninclude_config_file:\n  /etc/ejabberd/acl.yml\n</code></pre> <p>The file <code>acl.yml</code> can add additional administrators to one of the virtual hosts:</p> <pre><code>append_host_config:\n  localhost:\n    acl:\n      admin:\n        user:\n          - bob@localhost\n          - jan@localhost\n</code></pre>"},{"location":"admin/configuration/file-format/#macros-and-keywords","title":"Macros and Keywords","text":"<p> improved in 25.03</p> <p>In the ejabberd configuration file, you can define a macro or keyword for a value (atom, integer, string...) and later use it when configuring an ejabberd option.</p> <p>Macros is a feature implemented internally by the yconf library and are replaced early and transparently to ejabberd. However, macros cannot be defined inside <code>host_config</code>.</p> <p>Keywords is a feature similar to macros, implemented by ejabberd itself, and are replaced after macro replacement. Keywords can be defined inside <code>host_config</code> for module options, but not for toplevel options. Keywords cannot be used in those toplevel options: hosts, loglevel, version.</p> <p>First define_macro and define_keyword and then use them like this:</p> <pre><code>define_macro:\n  NAME1: value1\n\ndefine_keyword:\n  NAME2: \"value2\"\n\nsome_option1: NAME1\nother_option1: \"I am @NAME1@\"\n\nsome_option2: NAME2\nother_option2: \"I am @NAME2@\"\n</code></pre> <p>where:</p> <ul> <li> <p>NAME: should be specified in capital letters for convenience.   Duplicated macro/keyword names are not allowed.   If a macro is defined with the same name than a keyword, the macro is used.</p> </li> <li> <p>value: for all options, the value can be any valid YAML element.   It is also possible to use as value the name of another macro.</p> </li> <li> <p>use a macro/keyword when configuring the option:   simply set <code>NAME</code> instead of option value.   Macros are processed after additional configuration files have been   included, so it is possible to use macros that are defined in   configuration files included before the usage.</p> </li> <li> <p>use inside a string: surround its name with <code>@</code> characters</p> </li> </ul> <p>Let's see examples of all this in detail:</p>"},{"location":"admin/configuration/file-format/#atom","title":"Atom","text":"<pre><code>define_macro:\n  ANON: both\n\ndefine_keyword:\n  TLS: optional\n\nanonymous_protocol: ANON\ns2s_use_starttls: TLS\n</code></pre> <p>The resulting configuration is:</p> <pre><code>anonymous_protocol: both\ns2s_use_starttls: optional\n</code></pre>"},{"location":"admin/configuration/file-format/#integer","title":"Integer","text":"<pre><code>define_macro:\n  LOG_LEVEL_NUMBER: 5\n  NUMBER_PORT_C2S: 5222\n\ndefine_keyword:\n  NUMBER_PORT_HTTP: 5280\n\nloglevel: LOG_LEVEL_NUMBER\n\nlisten:\n  -\n    port: NUMBER_PORT_C2S\n    module: ejabberd_c2s\n  -\n    port: NUMBER_PORT_HTTP\n    module: ejabberd_http\n</code></pre> <p>The resulting configuration is:</p> <pre><code>loglevel: 5\n\nlisten:\n  -\n    port: 5222\n    module: ejabberd_c2s\n  -\n    port: 5280\n    module: ejabberd_http\n</code></pre>"},{"location":"admin/configuration/file-format/#map","title":"Map","text":"<p>Option values can be any arbitrary YAML value:</p> <pre><code>define_macro:\n  USERBOB:\n    user:\n      - bob@localhost\n\ndefine_keyword:\n  USERJAN:\n    user:\n      - jan@localhost\n\nacl:\n  admin: USERBOB\n  moderator: USERJAN\n</code></pre> <p>The resulting configuration is:</p> <pre><code>acl:\n  admin:\n    user:\n      - bob@localhost\n  moderator:\n    user:\n      - jan@localhost\n</code></pre>"},{"location":"admin/configuration/file-format/#string","title":"String","text":"<pre><code>define_macro:\n  NAME: \"MUC Service\"\n  PERSISTENT: true\n\ndefine_keyword:\n  TITLE: \"Example Room\"\n\nmodules:\n  mod_muc:\n    name: NAME\n    default_room_options:\n      persistent: true\n      title: TITLE\n</code></pre> <p>The resulting configuration is:</p> <pre><code>modules:\n  mod_muc:\n    name: \"MUC Service\"\n    default_room_options:\n      persistent: PERSISTENT\n      title: \"Example Room\"\n</code></pre>"},{"location":"admin/configuration/file-format/#inside-string","title":"Inside string","text":"<p>A macro or keyword can be used inside an option string:</p> <pre><code>define_keyword:\n  CMD: \"captcha\"\n\ncaptcha_cmd: \"tools/@CMD@.sh\"\n</code></pre> <p>is equivalent to:</p> <pre><code>define_keyword:\n  CMD: \"tools/captcha.sh\"\n\ncaptcha_cmd: \"@CMD@\"\n</code></pre> <p>is equivalent to:</p> <pre><code>define_keyword:\n  CMD: \"tools/captcha.sh\"\n\ncaptcha_cmd: CMD\n</code></pre> <p>The resulting configuration in all the cases is:</p> <pre><code>captcha_cmd: tools/captcha.sh\n</code></pre>"},{"location":"admin/configuration/file-format/#macro-over-keyword","title":"Macro over keyword","text":"<p>If a macro and a keyword are defined with the same name, the macro definition takes precedence and the keyword definition is ignored:</p> <pre><code>define_macro:\n  LANGUAGE: \"bg\"\n\ndefine_keyword:\n  LANGUAGE: \"pt\"\n\nlanguage: LANGUAGE\n</code></pre> <p>The resulting configuration is:</p> <pre><code>language: \"bg\"\n</code></pre>"},{"location":"admin/configuration/file-format/#keyword-inside-macro","title":"Keyword inside macro","text":"<p>A macro definition can use a keyword:</p> <pre><code>define_macro:\n  MACRO: \"tools/@KEYWORD@\"\n\ndefine_keyword:\n  KEYWORD: \"captcha.sh\"\n\ncaptcha_cmd: MACRO\n</code></pre> <p>The resulting configuration is:</p> <pre><code>captcha_cmd: \"tools/captcha.sh\"\n</code></pre>"},{"location":"admin/configuration/file-format/#predefined-keywords","title":"Predefined keywords","text":"<p>Several keywords are predefined automatically by ejabberd, so you can use them without need to define them explicitly:</p> <ul> <li>HOST: the virtual host name, for example <code>\"example.org\"</code>.   That keyword is only predefined for module options, not toplevel options.</li> <li>HOME: the home directory of the user running ejabberd, for example <code>\"/home/ejabberd\"</code></li> <li>VERSION: ejabberd version number in <code>XX.YY</code> format, for example <code>\"24.05\"</code></li> <li>SEMVER: ejabberd version number in semver format when compiled with Elixir\u2019s mix (<code>\"24.5\"</code>), otherwise it's in <code>XX.YY</code> format (<code>\"24.05\"</code>)</li> </ul> <p>It is possible to overwrite predefined keywords, global or for a vhost like in this example:</p> <pre><code>host_config:\n  localhost:\n    define_keyword:\n      VERSION: \"1.2.3\"\n\next_api_url: \"http://localhost/@VERSION@/api\"\n</code></pre> <p>The resulting behaviour is equivalent to a configuration like:</p> <pre><code>host_config:\n  localhost:\n    ext_api_url: \"http://localhost/1.2.3/api\"\n\next_api_url: \"http://localhost/25.03/api\"\n</code></pre>"},{"location":"admin/configuration/file-format/#macro-and-host_config","title":"Macro and host_config","text":"<p>Macros can be used inside host_config:</p> <pre><code>define_macro:\n  MYSQL_PORT: 1234\n  PGSQL_PORT: 4567\n\nhost_config:\n  mysql.localhost:\n    sql_port: MYSQL_PORT\n  pgsql.localhost:\n    sql_port: MYSQL_PORT\n</code></pre> <p>The resulting configuration is:</p> <pre><code>host_config:\n  mysql.localhost:\n    sql_port: 1234\n  pgsql.localhost:\n    sql_port: 4567\n</code></pre> <p>Don't use macro defined in host_config</p> <p>Macros can not be defined inside host_config. Use the previous method instead. That problematic macro is not replaced:</p> <pre><code>host_config:\n  mysql.localhost:\n    define_macro:\n      SQL_PORT: 1234\n  pgsql.localhost:\n    define_macro:\n      SQL_PORT: 4567\n\nsql_port: SQL_PORT\n\n# [critical] Failed to start ejabberd application:\n#   Invalid value of option sql_port:\n#   Expected integer, got string instead\n</code></pre>"},{"location":"admin/configuration/file-format/#keyword-and-host_config","title":"Keyword and host_config","text":"<p>Keywords can be used and defined inside host_config:</p> <pre><code>hosts:\n - localhost\n - example.org\n\ndefine_keyword:\n  HOSTNAME: \"Generic Name\"\n\nhost_config:\n  example.org:\n    define_keyword:\n      HOSTNAME: \"Example Host\"\n\nmodules:\n  mod_vcard:\n    name: \"vJUD of @HOSTNAME@\"\n</code></pre> <p>The resulting configuration is:</p> <pre><code>host_config:\n  localhost:\n    modules:\n      mod_vcard:\n        name: \"vJUD of Generic Name\"\n  example.org:\n    modules:\n      mod_vcard:\n        name: \"vJUD of Example Host\"\n</code></pre> <p>Don't use in toplevel a keyword defined in host_config</p> <p>Keywords can be defined inside <code>host_config</code>, but only if they are being used in module options, not in toplevel options. That problematic keyword is not replaced:</p> <pre><code>host_config:\n  mysql.localhost:\n    define_keyword:\n      SQL_PORT: 1234\n  pgsql.localhost:\n    define_keyword:\n      SQL_PORT: 4567\n\nsql_port: SQL_PORT\n\n# [critical] Failed to start ejabberd application:\n#   Invalid value of option sql_port:\n#   Expected integer, got string instead\n</code></pre>"},{"location":"admin/configuration/ldap/","title":"LDAP Configuration","text":""},{"location":"admin/configuration/ldap/#supported-storages","title":"Supported storages","text":"<p>The following LDAP servers are tested with ejabberd:</p> <ul> <li> <p><code>Active Directory</code> (see section\u00a0Active Directory)</p> </li> <li> <p><code>OpenLDAP</code></p> </li> <li> <p><code>CommuniGate Pro</code></p> </li> <li> <p>Normally any LDAP compatible server should work; inform us about  your success with a not-listed server so that we can list it here.</p> </li> </ul>"},{"location":"admin/configuration/ldap/#ldap","title":"LDAP","text":"<p>ejabberd has built-in LDAP support. You can authenticate users against LDAP server and use LDAP directory as vCard storage.</p> <p>Usually ejabberd treats LDAP as a read-only storage: it is possible to consult data, but not possible to create accounts or edit vCard that is stored in LDAP. However, it is possible to change passwords if <code>mod_register</code> module is enabled and LDAP server supports <code>RFC 3062</code>.</p>"},{"location":"admin/configuration/ldap/#ldap-connection","title":"LDAP Connection","text":"<p>Two connections are established to the LDAP server per vhost, one for authentication and other for regular calls.</p> <p>To configure the LDAP connection there are these top-level options:</p> <ul> <li>ldap_servers</li> <li>ldap_backups</li> <li>ldap_encrypt</li> <li>ldap_tls_verify</li> <li>ldap_tls_certfile</li> <li>ldap_tls_cacertfile</li> <li>ldap_tls_depth</li> <li>ldap_port</li> <li>ldap_rootdn</li> <li>ldap_password</li> <li>ldap_deref_aliases</li> </ul> <p>Example:</p> <pre><code>auth_method: [ldap]\nldap_servers:\n  - ldap1.example.org\nldap_port: 389\nldap_rootdn: \"cn=Manager,dc=domain,dc=org\"\nldap_password: \"**********\"\n</code></pre> <p>When there are several LDAP servers available as backup, set one in <code>ldap_servers</code> and the others in <code>ldap_backups</code>. At server start, ejabberd connects to all the servers listed in <code>ldap_servers</code>. If a connection is lost, ejabberd connects to the next server in <code>ldap_backups</code>. If the connection is lost, the next server in the list is connected, and this repeats infinitely with all the servers in <code>ldap_servers</code> and <code>ldap_backups</code> until one is successfully connected:</p> <pre><code>ldap_servers:\n  - ldap1.example.org\n\nldap_backups:\n  - ldap2.example.org\n  - ldap3.example.org\n</code></pre>"},{"location":"admin/configuration/ldap/#ldap-authentication","title":"LDAP Authentication","text":"<p>You can authenticate users against an LDAP directory. Note that current LDAP implementation does not support SASL authentication.</p> <p>To configure LDAP authentication there are these top-level options:</p> <ul> <li>ldap_base</li> <li>ldap_uids</li> <li>ldap_filter</li> <li>ldap_dn_filter</li> </ul>"},{"location":"admin/configuration/ldap/#ldap-examples","title":"LDAP Examples","text":""},{"location":"admin/configuration/ldap/#common-example","title":"Common example","text":"<p>Let\u2019s say <code>ldap.example.org</code> is the name of our LDAP server. We have users with their passwords in <code>ou=Users,dc=example,dc=org</code> directory. Also we have addressbook, which contains users emails and their additional infos in <code>ou=AddressBook,dc=example,dc=org</code> directory. The connection to the LDAP server is encrypted using TLS, and using the custom port 6123. Corresponding authentication section should looks like this:</p> <pre><code>## Authentication method\nauth_method: [ldap]\n## DNS name of our LDAP server\nldap_servers: [ldap.example.org]\n## Bind to LDAP server as \"cn=Manager,dc=example,dc=org\" with password \"secret\"\nldap_rootdn: \"cn=Manager,dc=example,dc=org\"\nldap_password: secret\nldap_encrypt: tls\nldap_port: 6123\n## Define the user's base\nldap_base: \"ou=Users,dc=example,dc=org\"\n## We want to authorize users from 'shadowAccount' object class only\nldap_filter: \"(objectClass=shadowAccount)\"\n</code></pre> <p>Now we want to use users LDAP-info as their vCards. We have four attributes defined in our LDAP schema: <code>mail</code> \u2014 email address, <code>givenName</code> \u2014 first name, <code>sn</code> \u2014 second name, <code>birthDay</code> \u2014 birthday. Also we want users to search each other. Let\u2019s see how we can set it up:</p> <pre><code>modules:\n  mod_vcard:\n    db_type: ldap\n    ## We use the same server and port, but want to bind anonymously because\n    ## our LDAP server accepts anonymous requests to\n    ## \"ou=AddressBook,dc=example,dc=org\" subtree.\n    ldap_rootdn: \"\"\n    ldap_password: \"\"\n    ## define the addressbook's base\n    ldap_base: \"ou=AddressBook,dc=example,dc=org\"\n    ## uidattr: user's part of JID is located in the \"mail\" attribute\n    ## uidattr_format: common format for our emails\n    ldap_uids:\n      mail: \"%u@mail.example.org\"\n    ## We have to define empty filter here, because entries in addressbook does not\n    ## belong to shadowAccount object class\n    ldap_filter: \"\"\n    ## Now we want to define vCard pattern\n    ldap_vcard_map:\n     NICKNAME: {\"%u\": []} # just use user's part of JID as their nickname\n     GIVEN: {\"%s\": [givenName]}\n     FAMILY: {\"%s\": [sn]}\n     FN: {\"%s, %s\": [sn, givenName]} # example: \"Smith, John\"\n     EMAIL: {\"%s\": [mail]}\n     BDAY: {\"%s\": [birthDay]}\n    ## Search form\n    ldap_search_fields:\n      User: \"%u\"\n      Name: givenName\n      \"Family Name\": sn\n      Email: mail\n      Birthday: birthDay\n    ## vCard fields to be reported\n    ## Note that JID is always returned with search results\n    ldap_search_reported:\n      \"Full Name\": FN\n      Nickname: NICKNAME\n      Birthday: BDAY\n</code></pre> <p>Note that <code>mod_vcard</code> with LDAP backend checks for the existence of the user before searching their information in LDAP.</p>"},{"location":"admin/configuration/ldap/#active-directory","title":"Active Directory","text":"<p>Active Directory is just an LDAP-server with predefined attributes. A sample configuration is shown below:</p> <pre><code>auth_method: [ldap]\nldap_servers: [office.org]  # List of LDAP servers\nldap_base: \"DC=office,DC=org\" # Search base of LDAP directory\nldap_rootdn: \"CN=Administrator,CN=Users,DC=office,DC=org\" # LDAP manager\nldap_password: \"*******\" # Password to LDAP manager\nldap_uids: [sAMAccountName]\nldap_filter: \"(memberOf=*)\"\n\nmodules:\n  mod_vcard:\n    db_type: ldap\n    ldap_vcard_map:\n      NICKNAME: {\"%u\": []}\n      GIVEN: {\"%s\": [givenName]}\n      MIDDLE: {\"%s\": [initials]}\n      FAMILY: {\"%s\": [sn]}\n      FN: {\"%s\": [displayName]}\n      EMAIL: {\"%s\": [mail]}\n      ORGNAME: {\"%s\": [company]}\n      ORGUNIT: {\"%s\": [department]}\n      CTRY: {\"%s\": [c]}\n      LOCALITY: {\"%s\": [l]}\n      STREET: {\"%s\": [streetAddress]}\n      REGION: {\"%s\": [st]}\n      PCODE: {\"%s\": [postalCode]}\n      TITLE: {\"%s\": [title]}\n      URL: {\"%s\": [wWWHomePage]}\n      DESC: {\"%s\": [description]}\n      TEL: {\"%s\": [telephoneNumber]}\n    ldap_search_fields:\n      User: \"%u\"\n      Name: givenName\n      \"Family Name\": sn\n      Email: mail\n      Company: company\n      Department: department\n      Role: title\n      Description: description\n      Phone: telephoneNumber\n    ldap_search_reported:\n      \"Full Name\": FN\n      Nickname: NICKNAME\n      Email: EMAIL\n</code></pre>"},{"location":"admin/configuration/ldap/#shared-roster-in-ldap","title":"Shared Roster in LDAP","text":"<p>Since mod_shared_roster_ldap has a few complex options, some of them are documented with more detail here:</p>"},{"location":"admin/configuration/ldap/#filters","title":"Filters","text":"<p><code>ldap_ufilter</code>:   \u201cUser Filter\u201d \u2013 used for retrieving the human-readable name of  roster entries (usually full names of people in the roster). See  also the parameters <code>ldap_userdesc</code> and <code>ldap_useruid</code>. If  unspecified, defaults to the top-level parameter of the same name.  If that one also is unspecified, then the filter is assembled from  values of other parameters as follows (<code>[ldap_SOMETHING]</code> is used to  mean \u201cthe value of the configuration parameter  <code>ldap_SOMETHING</code>\u201d):</p> <pre><code>(&amp;(&amp;([ldap_memberattr]=[ldap_memberattr_format])([ldap_groupattr]=%g))[ldap_filter])\n</code></pre> <p>Subsequently <code>%u</code> and <code>%g</code> are replaced with a *. This means that given the defaults, the filter sent to the LDAP server would be <code>(&amp;(memberUid=*)(cn=*))</code>. If however the <code>ldap_memberattr_format</code> is something like <code>uid=%u,ou=People,o=org</code>, then the filter will be <code>(&amp;(memberUid=uid=*,ou=People,o=org)(cn=*))</code>.</p> <p><code>ldap_filter</code>:   Additional filter which is AND-ed together with User  Filter and Group Filter. If unspecified,  defaults to the top-level parameter of the same name. If that one is  also unspecified, then no additional filter is merged with the other  filters.</p> <p>Note that you will probably need to manually define the User and Group Filter (since the auto-assembled ones will not work) if:</p> <ul> <li> <p>your <code>ldap_memberattr_format</code> is anything other than a  simple <code>%u</code>,</p> </li> <li> <p>and the attribute specified with <code>ldap_memberattr</code> does not support substring matches.</p> </li> </ul> <p>An example where it is the case is OpenLDAP and (unique)MemberName attribute from the groupOf(Unique)Names objectClass. A symptom of this problem is that you will see messages such as the following in your <code>slapd.log</code>:</p> <pre><code>get_filter: unknown filter type=130\nfilter=\"(&amp;(?=undefined)(?=undefined)(something=else))\"\n</code></pre>"},{"location":"admin/configuration/ldap/#control-parameters","title":"Control parameters","text":"<p>These parameters control the behaviour of the module.</p> <p><code>ldap_memberattr_format_re</code>:   A regex for extracting user ID from the value of the attribute named  by <code>ldap_memberattr</code>.</p> <p>An example value <code>\u201cCN=(\\\\w*),(OU=.*,)*DC=company,DC=com\u201d</code> works for user IDs such as the following:</p> <ul> <li><code>CN=Romeo,OU=Montague,DC=company,DC=com</code></li> <li><code>CN=Abram,OU=Servants,OU=Montague,DC=company,DC=com</code></li> <li><code>CN=Juliet,OU=Capulet,DC=company,DC=com</code></li> <li><code>CN=Peter,OU=Servants,OU=Capulet,DC=company,DC=com</code></li> </ul> <p>In case:</p> <ul> <li>the option is unset,</li> <li>or the <code>re</code> module in unavailable in the current Erlang environment,</li> <li>or the regular expression does not compile,</li> </ul> <p>then instead of a regular expression, a simple format specified by <code>ldap_memberattr_format</code> is used. Also, in the last two cases an error message is logged during the module initialization.</p> <p>Also, note that in all cases <code>ldap_memberattr_format</code> (and <code>*not*</code> the regex version) is used for constructing the default \u201cUser/Group Filter\u201d \u2014 see section\u00a0Filters.</p>"},{"location":"admin/configuration/ldap/#retrieving-the-roster","title":"Retrieving the roster","text":"<p>When the module is called to retrieve the shared roster for a user, the following algorithm is used:</p> <ol> <li> <p>[step:rfilter] A list of names of groups to display is created: the Roster Filter is run against the base DN, retrieving the values of the attribute named by <code>ldap_groupattr</code>.</p> </li> <li> <p>Unless the group cache is fresh (see the <code>ldap_group_cache_validity</code> option), it is refreshed:</p> <ol> <li> <p>Information for all groups is retrieved using a single query: the Group Filter is run against the Base DN, retrieving the values of attributes named by <code>ldap_groupattr</code> (group ID), <code>ldap_groupdesc</code> (group \u201cDisplay Name\u201d) and <code>ldap_memberattr</code> (IDs of group members).</p> </li> <li> <p>group \u201cDisplay Name\u201d, read from the attribute named by <code>ldap_groupdesc</code>, is stored in the cache for the   given group</p> </li> <li> <p>the following processing takes place for each retrieved value of attribute named by <code>ldap_memberattr</code>:</p> <ol> <li> <p>the user ID part of it is extracted using <code>ldap_memberattr_format(_re)</code>,</p> </li> <li> <p>then (unless <code>ldap_auth_check</code> is set to <code>off</code>) for each found user ID, the module checks (using the ejabberd authentication subsystem) whether such user exists in the given virtual host. It is skipped if the check is enabled and fails.    This step is here for historical reasons. If you have a tidy DIT and properly defined \u201cRoster Filter\u201d and \u201cGroup Filter\u201d, it is safe to disable it by setting <code>ldap_auth_check</code> to <code>off</code> \u2014 it will speed up the roster retrieval.</p> </li> <li> <p>the user ID is stored in the list of members in the cache for the given group.</p> </li> </ol> </li> </ol> </li> <li> <p>For each item (group name) in the list of groups retrieved in step\u00a0[step:rfilter]:</p> <ol> <li> <p>the display name of a shared roster group is retrieved from the group cache</p> </li> <li> <p>for each IDs of users which belong to the group, retrieved from the group cache:</p> <ol> <li> <p>the ID is skipped if it\u2019s the same as the one for which we are retrieving the roster. This is so that the user does not have himself in the roster.</p> </li> <li> <p>the display name of a shared roster user is retrieved:</p> <ol> <li> <p>first, unless the user name cache is fresh (see the <code>ldap_user_cache_validity</code> option), it is refreshed by running the User Filter, against the Base DN, retrieving the values of attributes named by <code>ldap_useruid</code> and <code>ldap_userdesc</code>.</p> </li> <li> <p>then, the display name for the given user ID is retrieved from the user name cache.</p> </li> </ol> </li> </ol> </li> </ol> </li> </ol>"},{"location":"admin/configuration/ldap/#multi-domain","title":"Multi-Domain","text":"<p>By default, the module option <code>ldap_userjidattr</code> is set to the empty string, in that case the JID of the user's contact is formed by compounding UID of the contact <code>@</code> Host of the user owning the roster.</p> <p>When the option <code>ldap_userjidattr</code> is set to something like <code>\"mail\"</code>, then it uses that field to determine the JID of the contact. This is useful if the ldap <code>mail</code> attribute contains the JID of the accounts.</p> <p>Basically, it allows us to define a groupOfNames (e.g. xmppRosterGroup) and list any users, anywhere in the ldap directory by specifying the attribute defining the JID of the members.</p> <p>This allows hosts/domains other than that of the roster owner. It is also more flexible, since the LDAP manager can specify the JID of the users without any assumptions being made. The only down side is that there must be an LDAP attribute (field) filled in for all Jabber/XMPP users.</p> <p>Below is a sample, a relevant LDAP entry, and ejabberd's module configuration:</p> <pre><code>cn=Example Org Roster,ou=groups,o=Example Organisation,dc=acme,dc=com\nobjectClass: groupOfNames\nobjectClass: xmppRosterGroup\nobjectClass: top\nxmppRosterStatus: active\nmember:\ndescription: Roster group for Example Org\ncn: Example Org Roster\nuniqueMember: uid=john,ou=people,o=Example Organisation,dc=acme,dc=com\nuniqueMember: uid=pierre,ou=people,o=Example Organisation,dc=acme,dc=com\nuniqueMember: uid=jane,ou=people,o=Example Organisation,dc=acme,dc=com\n\nuid=john,ou=people,o=Example Organisation,dc=acme,dc=com\nobjectClass: top\nobjectClass: person\nobjectClass: organizationalPerson\nobjectClass: inetOrgPerson\nobjectClass: mailUser\nobjectClass: sipRoutingObject\nuid: john\ngivenName: John\nsn: Doe\ncn: John Doe\ndisplayName: John Doe\naccountStatus: active\nuserPassword: secretpass\nIMAPURL: imap://imap.example.net:143\nmailHost: smtp.example.net\nmail: john@example.net\nsipLocalAddress: john@example.net\n</code></pre> <p>Below is the sample ejabberd.yml module configuration to match:</p> <pre><code>mod_shared_roster_ldap:\n  ldap_servers:\n    - \"ldap.acme.com\"\n  ldap_encrypt: tls\n  ldap_port: 636\n  ldap_rootdn: \"cn=Manager,dc=acme,dc=com\"\n  ldap_password: \"supersecretpass\"\n  ldap_base: \"dc=acme,dc=com\"\n  ldap_filter: \"(objectClass=*)\"\n  ldap_rfilter: \"(&amp;(objectClass=xmppRosterGroup)(xmppRosterStatus=active))\"\n  ldap_gfilter: \"(&amp;(objectClass=xmppRosterGroup)(xmppRosterStatus=active)(cn=%g))\"\n  ldap_groupattr: \"cn\"\n  ldap_groupdesc: \"cn\"\n  ldap_memberattr: \"uniqueMember\"\n  ldap_memberattr_format_re: \"uid=([a-z.]*),(ou=.*,)*(o=.*,)*dc=acme,dc=com\"\n  ldap_useruid: \"uid\"\n  ldap_userdesc: \"cn\"\n   ldap_userjidattr: \"mail\"\n   ldap_auth_check: false\n   ldap_user_cache_validity: 86400\n   ldap_group_cache_validity: 86400\n</code></pre>"},{"location":"admin/configuration/ldap/#configuration-examples","title":"Configuration examples","text":"<p>Since there are many possible <code>DIT</code> layouts, it will probably be easiest to understand how to configure the module by looking at an example for a given DIT (or one resembling it).</p>"},{"location":"admin/configuration/ldap/#flat-dit","title":"Flat DIT","text":"<p>This seems to be the kind of DIT for which this module was initially designed. Basically there are just user objects, and group membership is stored in an attribute individually for each user. For example in a layout like this, it's stored in the <code>ou</code> attribute:</p> <p></p> <p>Such layout has a few downsides, including:</p> <ul> <li> <p>information duplication \u2013 the group name is repeated in every member  object</p> </li> <li> <p>difficult group management \u2013 information about group members is not  centralized, but distributed between member objects</p> </li> <li> <p>inefficiency \u2013 the list of unique group names has to be computed by  iterating over all users</p> </li> </ul> <p>This however seems to be a common DIT layout, so the module keeps supporting it. You can use the following configuration\u2026</p> <pre><code>modules:\n  mod_shared_roster_ldap:\n    ldap_base: \"ou=flat,dc=nodomain\"\n    ldap_rfilter: \"(objectClass=inetOrgPerson)\"\n    ldap_groupattr: ou\n    ldap_memberattr: cn\n    ldap_filter: \"(objectClass=inetOrgPerson)\"\n    ldap_userdesc: displayName\n</code></pre> <p>\u2026to be provided with a roster upon connecting as user <code>czesio</code>, as shown in this figure:</p> <p></p>"},{"location":"admin/configuration/ldap/#deep-dit","title":"Deep DIT","text":"<p>This type of DIT contains distinctly typed objects for users and groups \u2013 see the next figure. They are shown separated into different subtrees, but it\u2019s not a requirement.</p> <p></p> <p>If you use the following example module configuration with it:</p> <pre><code>modules:\n  mod_shared_roster_ldap:\n    ldap_base: \"ou=deep,dc=nodomain\"\n    ldap_rfilter: \"(objectClass=groupOfUniqueNames)\"\n    ldap_filter: \"\"\n    ldap_gfilter: \"(&amp;(objectClass=groupOfUniqueNames)(cn=%g))\"\n    ldap_groupdesc: description\n    ldap_memberattr: uniqueMember\n    ldap_memberattr_format: \"cn=%u,ou=people,ou=deep,dc=nodomain\"\n    ldap_ufilter: \"(&amp;(objectClass=inetOrgPerson)(cn=%u))\"\n    ldap_userdesc: displayName\n</code></pre> <p>\u2026and connect as user <code>czesio</code>, then ejabberd will provide you with the roster shown in this figure:</p> <p></p>"},{"location":"admin/configuration/ldap/#vcard-in-ldap","title":"vCard in LDAP","text":"<p>Since LDAP may be complex to configure in mod_vcard, this section provides more details.</p> <p>ejabberd can map LDAP attributes to vCard fields. This feature is enabled when the <code>mod_vcard</code> module is configured with <code>db_type: ldap</code>. Notice that it does not depend on the authentication method (see LDAP Authentication).</p> <p>Usually ejabberd treats LDAP as a read-only storage: it is possible to consult data, but not possible to create accounts or edit vCard that is stored in LDAP. However, it is possible to change passwords if <code>mod_register</code> module is enabled and LDAP server supports <code>RFC 3062</code>.</p> <p>This feature has its own optional parameters. The first group of parameters has the same meaning as the top-level LDAP parameters to set the authentication method: <code>ldap_servers</code>, <code>ldap_port</code>, <code>ldap_rootdn</code>, <code>ldap_password</code>, <code>ldap_base</code>, <code>ldap_uids</code>, <code>ldap_deref_aliases</code> and <code>ldap_filter</code>. See section LDAP Authentication for detailed information about these options. If one of these options is not set, ejabberd will look for the top-level option with the same name.</p> <p>Examples:</p> <ul> <li> <p>Let\u2019s say <code>ldap.example.org</code> is the name of our LDAP server. We have  users with their passwords in <code>ou=Users,dc=example,dc=org</code>  directory. Also we have addressbook, which contains users emails and  their additional infos in <code>ou=AddressBook,dc=example,dc=org</code>  directory. Corresponding authentication section should looks like  this:</p> <pre><code>## authentication method\nauth_method: ldap\n## DNS name of our LDAP server\nldap_servers:\n  - ldap.example.org\n## We want to authorize users from 'shadowAccount' object class only\nldap_filter: \"(objectClass=shadowAccount)\"\n</code></pre> </li> <li> <p>Now we want to use users LDAP-info as their vCards. We have four attributes defined in our LDAP schema: <code>mail</code> \u2014 email address, <code>givenName</code> \u2014 first name, <code>sn</code> \u2014 second name, <code>birthDay</code> \u2014 birthday. Also we want users to search each other. Let\u2019s see how we can set it up:</p> <pre><code>modules:\n  mod_vcard:\n    db_type: ldap\n    ## We use the same server and port, but want to bind anonymously because\n    ## our LDAP server accepts anonymous requests to\n    ## \"ou=AddressBook,dc=example,dc=org\" subtree.\n    ldap_rootdn: \"\"\n    ldap_password: \"\"\n    ## define the addressbook's base\n    ldap_base: \"ou=AddressBook,dc=example,dc=org\"\n    ## uidattr: user's part of JID is located in the \"mail\" attribute\n    ## uidattr_format: common format for our emails\n    ldap_uids: {\"mail\": \"%u@mail.example.org\"}\n    ## Now we want to define vCard pattern\n    ldap_vcard_map:\n      NICKNAME: {\"%u\": []} # just use user's part of JID as their nickname\n      FIRST: {\"%s\": [givenName]}\n      LAST: {\"%s\": [sn]}\n      FN: {\"%s, %s\": [sn, givenName]} # example: \"Smith, John\"\n      EMAIL: {\"%s\": [mail]}\n      BDAY: {\"%s\": [birthDay]}\n    ## Search form\n    ldap_search_fields:\n      User: \"%u\"\n      Name: givenName\n      \"Family Name\": sn\n      Email: mail\n      Birthday: birthDay\n    ## vCard fields to be reported\n    ## Note that JID is always returned with search results\n    ldap_search_reported:\n      \"Full Name\": FN\n      Nickname: NICKNAME\n      Birthday: BDAY\n</code></pre> <p>Note that <code>mod_vcard</code> with LDAP backend checks an existence of the user before searching their info in LDAP.</p> </li> <li> <p><code>ldap_vcard_map</code> example:</p> <pre><code>ldap_vcard_map:\n  NICKNAME: {\"%u\": []} # just use user's part of JID as their nickname\n  FN: {\"%s\": [displayName]}\n  CTRY: {Russia: []}\n  EMAIL: {\"%u@%d\": []}\n  DESC: {\"%s\\n%s\": [title, description]}\n</code></pre> </li> <li> <p><code>ldap_search_fields</code> example:</p> <pre><code>ldap_search_fields:\n  User: uid\n  \"Full Name\": displayName\n  Email: mail\n</code></pre> </li> <li> <p><code>ldap_search_reported</code> example:</p> <pre><code>ldap_search_reported:\n  \"Full Name\": FN\n  Email: EMAIL\n  Birthday: BDAY\n  Nickname: NICKNAME\n</code></pre> </li> </ul>"},{"location":"admin/configuration/listen-options/","title":"Listen Options","text":"<p>Please note</p> <p>This section describes the most recent ejabberd version. If you are using an old ejabberd release, please refer to the corresponding archived version of this page in the Archive.</p> <p>This is a detailed description of each option allowed by the listening modules:</p>"},{"location":"admin/configuration/listen-options/#access","title":"access","text":"<p>AccessName</p> <p>This option defines access to the port. The default value is <code>all</code>.</p>"},{"location":"admin/configuration/listen-options/#allow_unencrypted_sasl2","title":"allow_unencrypted_sasl2","text":"<p>true | false</p> <p>As per <code>XEP-0388</code>, ejabberd rejects SASL2 negotiations over non-TLS connections by default. Setting this option to <code>true</code> allows SASL2 over plaintext connections, which may be useful in case TLS is terminated by some proxy in front of ejabberd.</p>"},{"location":"admin/configuration/listen-options/#backlog","title":"backlog","text":"<p>Value</p> <p>The backlog value defines the maximum length that the queue of  pending connections may grow to. This should be increased if the  server is going to handle lots of new incoming connections as they  may be dropped if there is no space in the queue (and ejabberd was  not able to accept them immediately). Default value is 5.</p>"},{"location":"admin/configuration/listen-options/#cafile","title":"cafile","text":"<p>Path</p> <p>Path to a file of CA root certificates. The default is to use system defined file if possible.</p> <p>This option is useful to define the file for a specific port listener. To set a file for all client listeners or for specific vhosts, you can use the <code>c2s_cafile</code> top-level option. To set a file for all server connections, you can use the <code>s2s_cafile</code> top-level option or the <code>ca_file</code> top-level option.</p> <p>Please note: if this option is set in <code>ejabberd_c2s</code> or <code>ejabberd_s2s_in</code> and the corresponding top-level option is also set (<code>c2s_cafile</code>, <code>s2s_cafile</code>), then the top-level option is used, not this one.</p>"},{"location":"admin/configuration/listen-options/#certfile","title":"certfile","text":"<p>Path</p> <p>Path to the certificate file. Only makes sense when the <code>tls</code> options is set. If this option is not set, you should set the <code>certfiles</code> top-level option or configure ACME.</p>"},{"location":"admin/configuration/listen-options/#check_from","title":"check_from","text":"<p>true | false</p> <p>This option can be used with <code>ejabberd_service</code> only.  <code>XEP-0114</code> requires that  the domain must match the hostname of the component. If this option  is set to <code>false</code>, ejabberd will allow the component to send  stanzas with any arbitrary domain in the \u2019from\u2019 attribute. Only use  this option if you are completely sure about it. The default value  is <code>true</code>, to be compliant with  <code>XEP-0114</code>.</p>"},{"location":"admin/configuration/listen-options/#ciphers","title":"ciphers","text":"<p>Ciphers</p> <p>OpenSSL ciphers list in the same format accepted by  \u2018<code>openssl ciphers</code>\u2019 command.</p> <p>Please note: if this option is set in <code>ejabberd_c2s</code> or <code>ejabberd_s2s_in</code> and the corresponding top-level option is also set (<code>c2s_ciphers</code>, <code>s2s_ciphers</code>), then the top-level option is used, not this one.</p>"},{"location":"admin/configuration/listen-options/#custom_headers","title":"custom_headers","text":"<p>{Name: Value}</p> <p>Specify additional HTTP headers to be included in all HTTP responses. Default value is: <code>[]</code></p>"},{"location":"admin/configuration/listen-options/#dhfile","title":"dhfile","text":"<p>Path</p> <p>Full path to a file containing custom parameters for Diffie-Hellman key  exchange. Such a file could be created with the command  <code>openssl dhparam -out dh.pem 2048</code>. If this option is not specified,  default parameters will be used, which might not provide the same level  of security as using custom parameters.</p> <p>Please note: if this option is set in <code>ejabberd_c2s</code> or <code>ejabberd_s2s_in</code> and the corresponding top-level option is also set (<code>c2s_dhfile</code>, <code>s2s_dhfile</code>), then the top-level option is used, not this one.</p>"},{"location":"admin/configuration/listen-options/#global_routes","title":"global_routes","text":"<p>true | false</p> <p>This option emulates legacy behaviour which registers all routes defined in <code>hosts</code> on a component connected. This behaviour is considered harmful in the case when it's desired to multiplex different components on the same port, so, to disable it, set <code>global_routes</code> to <code>false</code>.</p> <p>The default value is <code>true</code>, e.g. legacy behaviour is emulated: the only reason for this is to maintain backward compatibility with existing deployments.</p>"},{"location":"admin/configuration/listen-options/#hosts","title":"hosts","text":"<p>{Hostname: [HostOption, ...]}</p> <p>The external Jabber component that connects to this <code>ejabberd_service</code> can serve one or more hostnames. As <code>HostOption</code>  you can define options for the component; currently the only allowed  option is the password required to the component when attempt to  connect to ejabberd: <code>password: Secret</code>. Note that you  cannot define in a single <code>ejabberd_service</code> components of different  services: add an <code>ejabberd_service</code> for each service, as seen in an  example below. This option may not be necessary if the component  already provides the host in its packets; in that case, you can simply  provide the password option that will be used for all the hosts  (see port 5236 definition in the example below).</p>"},{"location":"admin/configuration/listen-options/#ip","title":"ip","text":"<p>string()</p> <p>The socket will listen only in that network interface. Depending on the type of the IP address, IPv4 or IPv6 will be used.</p> <p>It is possible to specify a generic address (<code>\"0.0.0.0\"</code> for IPv4 or <code>\"::\"</code> for IPv6), so ejabberd will listen in all addresses. Note that on some operating systems and/or OS configurations, listening on <code>\"::\"</code> will mean listening for IPv4 traffic as well as IPv6 traffic.</p> <p>Some example values for IP address:</p> <ul> <li> <p><code>\"0.0.0.0\"</code> to listen in all IPv4 network interfaces. This is the   default value when the option is not specified.</p> </li> <li> <p><code>\"::\"</code> to listen in all IPv6 network interfaces</p> </li> <li> <p><code>\"10.11.12.13\"</code> is the IPv4 address <code>10.11.12.13</code></p> </li> <li> <p><code>\"::FFFF:127.0.0.1\"</code> is the IPv6 address <code>::FFFF:127.0.0.1/128</code></p> </li> </ul>"},{"location":"admin/configuration/listen-options/#max_fsm_queue","title":"max_fsm_queue","text":"<p>Size</p> <p>This option specifies the maximum number of elements in the queue of  the FSM (Finite State Machine). Roughly speaking, each message in  such queues represents one XML stanza queued to be sent into its  relevant outgoing stream. If queue size reaches the limit (because,  for example, the receiver of stanzas is too slow), the FSM and the  corresponding connection (if any) will be terminated and error  message will be logged. The reasonable value for this option depends  on your hardware configuration. This option can be specified for         <code>ejabberd_service</code>         and <code>ejabberd_c2s</code>         listeners, or also globally for         <code>ejabberd_s2s_out</code>.         If the option is not specified for  <code>ejabberd_service</code> or <code>ejabberd_c2s</code> listeners, the globally  configured value is used. The allowed values are integers and  \u2019undefined\u2019. Default value: \u201910000\u2019.</p>"},{"location":"admin/configuration/listen-options/#max_payload_size","title":"max_payload_size","text":"<p>Size</p> <p>Specify the maximum payload size in bytes. It can be either an integer or the word <code>infinity</code>. The default value is <code>infinity</code>.</p>"},{"location":"admin/configuration/listen-options/#max_stanza_size","title":"max_stanza_size","text":"<p>Size</p> <p>This option specifies an approximate maximum size in bytes of XML  stanzas. Approximate, because it is calculated with the precision of  one block of read data. For example <code>{max_stanza_size, 65536}</code>. The  default value is <code>infinity</code>. Recommended values are 65536 for c2s  connections and 131072 for s2s connections. s2s max stanza size must  always much higher than c2s limit. Change this value with extreme  care as it can cause unwanted disconnect if set too low.</p>"},{"location":"admin/configuration/listen-options/#module","title":"module","text":"<p>ModuleName</p> <p>Mandatory option to define what listening module will serve the incoming connections to the port.</p>"},{"location":"admin/configuration/listen-options/#password","title":"password","text":"<p>Secret</p> <p>Specify the password to verify an external component that connects to the port.</p>"},{"location":"admin/configuration/listen-options/#port","title":"port","text":"<p>pos_integer() | string()</p> <p> improved in 20.07</p> <p>This mandatory option defines which port to listen for incoming connections: it can be a Jabber/XMPP standard port or any other valid port number between <code>1</code> and <code>65535</code> to listen on TCP or UDP socket,</p> <p>Alternatively, set the option to a string in form <code>\"unix:/path/to/socket\"</code> to create and listen on a unix domain socket <code>/path/to/socket</code>.</p> <p>Tip</p> <p> improved in 25.03</p> <p>If it's a relative path, then it's created in the mnesia spool directory. For example, if set to <code>\"unix:dir/file.socket\"</code>, then the socket file is created in <code>/opt/ejabberd/database/dir/file.socket</code>, or whatever path the Mnesia database is stored in your installation.</p> <p>File permissions can be set using the unix_socket option.</p>"},{"location":"admin/configuration/listen-options/#protocol_options","title":"protocol_options","text":"<p>ProtocolOpts</p> <p>List of general options relating to SSL/TLS. These map to  <code>OpenSSL\u2019s set_options()</code>.  The default entry is: <code>\"no_sslv3|cipher_server_preference|no_compression\"</code></p> <p>Please note: if this option is set in <code>ejabberd_c2s</code> or <code>ejabberd_s2s_in</code> and the corresponding top-level option is also set (<code>c2s_protocol_options</code>, <code>s2s_protocol_options</code>), then the top-level option is used, not this one.</p>"},{"location":"admin/configuration/listen-options/#request_handlers","title":"request_handlers","text":"<p>{Path: Module}</p> <p>To define one or several handlers that will serve HTTP requests in <code>ejabberd_http</code>. The  Path is a string; so the URIs that start with that Path will be  served by Module. For example, if you want <code>mod_foo</code> to serve the  URIs that start with <code>/a/b/</code>, and you also want <code>mod_bosh</code> to  serve the URIs <code>/bosh/</code>, use this option:</p> <pre><code>request_handlers:\n  /a/b: mod_foo\n  /bosh: mod_bosh\n  /mqtt: mod_mqtt\n</code></pre>"},{"location":"admin/configuration/listen-options/#send_timeout","title":"send_timeout","text":"<p>Integer | infinity</p> <p> new in 21.07</p> <p>Sets the longest time that data can wait to be accepted to sent by OS socket. Triggering this timeout will cause the server to close it. By default it's set to 15 seconds, expressed in milliseconds: 15000</p>"},{"location":"admin/configuration/listen-options/#shaper","title":"shaper","text":"<p>none | ShaperName</p> <p>This option defines a shaper for the port (see section Shapers).  The default value is <code>none</code>.</p>"},{"location":"admin/configuration/listen-options/#shaper_rule","title":"shaper_rule","text":"<p>none | ShaperRule</p> <p>This option defines a shaper rule for <code>ejabberd_service</code> (see section Shapers). The recommended value is <code>fast</code>.</p>"},{"location":"admin/configuration/listen-options/#starttls","title":"starttls","text":"<p>true | false</p> <p>This option specifies that STARTTLS encryption is available on connections to the port. You should also set the <code>certfiles</code> top-level option or configure ACME.</p> <p>This option gets implicitly enabled when enabling <code>starttls_required</code> or <code>tls_verify</code>.</p>"},{"location":"admin/configuration/listen-options/#starttls_required","title":"starttls_required","text":"<p>true | false</p> <p>This option specifies that STARTTLS encryption is required on connections to the port. No unencrypted connections will be allowed. You should also set the <code>certfiles</code> top-level option or configure ACME.</p> <p>Enabling this option implicitly enables also the <code>starttls</code> option.</p>"},{"location":"admin/configuration/listen-options/#tag","title":"tag","text":"<p>String</p> <p>Allow specifying a tag in a <code>listen</code> section and later use it to have a special <code>api_permissions</code> just for it.</p> <p>For example:</p> <pre><code>listen:\n  -\n    port: 4000\n    module: ejabberd_http\n    tag: \"magic_listener\"\n\napi_permissions:\n  \"magic_access\":\n    from:\n      - tag: \"magic_listener\"\n    who: all\n    what: \"*\"\n</code></pre> <p>The default value is the empty string: <code>\"\"</code>.</p>"},{"location":"admin/configuration/listen-options/#timeout","title":"timeout","text":"<p>Integer</p> <p>Timeout of the connections, expressed in milliseconds. Default: 5000</p>"},{"location":"admin/configuration/listen-options/#tls","title":"tls","text":"<p>true | false</p> <p>This option specifies that traffic on the port will be encrypted  using SSL immediately after connecting. This was the traditional  encryption method in the early Jabber software, commonly on port  5223 for client-to-server communications. But this method is  nowadays deprecated and not recommended. The preferable encryption  method is STARTTLS on port 5222, as defined  <code>RFC 6120: XMPP Core</code>,  which can be enabled in ejabberd with the option         <code>starttls</code>.</p> <p>If this option is set, you should also set the         <code>certfiles</code> top-level         option or configure ACME.</p> <p>The option <code>tls</code> can also be used in         <code>ejabberd_http</code>         to support HTTPS.</p> <p>Enabling this option implicitly disables the <code>starttls</code> option.</p>"},{"location":"admin/configuration/listen-options/#tls_compression","title":"tls_compression","text":"<p>true | false</p> <p>Whether to enable or disable TLS compression. The default value is  <code>false</code>.</p> <p>Please note: if this option is set in <code>ejabberd_c2s</code> or <code>ejabberd_s2s_in</code> and the corresponding top-level option is also set (<code>c2s_tls_compression</code>, <code>s2s_tls_compression</code>), then the top-level option is used, not this one.</p>"},{"location":"admin/configuration/listen-options/#tls_verify","title":"tls_verify","text":"<p>false | true</p> <p>This option specifies whether to verify the certificate or not when TLS is enabled.</p> <p>The default value is <code>false</code>, which means no checks are performed.</p> <p>The certificate will be checked against trusted CA roots, either defined at the operation system level or defined in the  listener <code>cafile</code>. If trusted, it will accept the jid that is embedded in the certificate in the  <code>subjectAltName</code> field of that certificate.</p> <p>Enabling this option implicitly enables also the <code>starttls</code> option.</p>"},{"location":"admin/configuration/listen-options/#transport","title":"transport","text":"<p>tcp|udp</p> <p>Defines the transport protocol. Default is <code>tcp</code>.</p>"},{"location":"admin/configuration/listen-options/#unix_socket","title":"unix_socket","text":"<p>{mode|owner|group: Value}</p> <p> added in 23.10</p> <p>Set the mode, owner and group of the unix domain socket defined in the port option.</p> <p>The owner and group must be specified as integers, not as names.</p> <p>Example:</p> <pre><code>listen:\n  -\n    port: \"unix:sockets/ctl_over_http.socket\"\n    unix_socket:\n      mode: '0600'\n      owner: 117\n      group: 135\n    module: ejabberd_http\n    request_handlers:\n      /ctl: ejabberd_ctl\n    tag: \"ctl_over_http\"\n</code></pre>"},{"location":"admin/configuration/listen-options/#use_proxy_protocol","title":"use_proxy_protocol","text":"<p>true | false</p> <p>Is this listener accessed by proxy service that is using     proxy protocol for supplying real IP addresses to ejabberd server. You can read about this protocol     in Proxy protocol specification.     The default value of this option is<code>false</code>.</p>"},{"location":"admin/configuration/listen-options/#zlib","title":"zlib","text":"<p>true | false</p> <p>This option specifies that Zlib stream compression (as defined in  <code>XEP-0138</code>) is available  on connections to the port.</p>"},{"location":"admin/configuration/listen/","title":"Listen Modules","text":"<p>Please note</p> <p>This section describes the most recent ejabberd version. If you are using an old ejabberd release, please refer to the corresponding archived version of this page in the Archive.</p>"},{"location":"admin/configuration/listen/#listen-option","title":"Listen Option","text":"<p>The listen top-level option defines for which ports, addresses and network protocols ejabberd will listen and what services will be run on them.</p> <p>Each element of the list is an associative array of listen options:</p> <ul> <li> <p>port and module mandatory options</p> </li> <li> <p>ip,   transport,   unix_socket   additional options</p> </li> <li> <p>other options for listening module, enumerated later.</p> </li> </ul> <p>For example:</p> <pre><code>listen:\n  -\n    port: 5222\n    ip: 127.0.0.1\n    module: ejabberd_c2s\n    starttls: true\n  -\n    port: 5269\n    transport: tcp\n    module: ejabberd_s2s_in\n</code></pre>"},{"location":"admin/configuration/listen/#ejabberd_c2s","title":"ejabberd_c2s","text":"<p>c2s</p> <p>Client to Server connection in XMPP.   Opposed to 6251a85a-47d0-11ee-be56-0242ac120002:94942823481c73c360a13c33a8328592:&lt;__None__&gt;.</p> <p>Handles c2s connections.</p> <p>General listen options supported: access, allow_unencrypted_sasl2, cafile, ciphers, dhfile, max_fsm_queue, max_stanza_size, protocol_options, send_timeout, shaper, starttls, starttls_required, tls, tls_compression, tls_verify, zlib.</p>"},{"location":"admin/configuration/listen/#ejabberd_s2s_in","title":"ejabberd_s2s_in","text":"<p>s2s</p> <p>Server to Server connection in XMPP.   Opposed to 6251a85a-47d0-11ee-be56-0242ac120002:516dedd52f5b7b7790e06960a6a9b6ed:&lt;__None__&gt;.</p> <p>Handles incoming s2s connections.</p> <p>General listen options supported: cafile, ciphers, dhfile, max_fsm_queue, max_stanza_size, protocol_options, send_timeout, shaper, tls, tls_compression.</p>"},{"location":"admin/configuration/listen/#ejabberd_service","title":"ejabberd_service","text":"<p>Interacts with an external component as defined in XEP-0114: Jabber Component Protocol.</p> <p>General listen options supported: access, cafile, certfile, check_from, ciphers, dhfile, global_routes, hosts, max_fsm_queue, max_stanza_size, password, protocol_options, send_timeout, shaper, shaper_rule, tls, tls_compression.</p>"},{"location":"admin/configuration/listen/#mod_mqtt","title":"mod_mqtt","text":"<p>Support for MQTT requires configuring <code>mod_mqtt</code> both in the listen and the modules sections. Check the mod_mqtt module options, and the MQTT Support section.</p> <p>General listen options supported: backlog, max_fsm_queue, max_payload_size, send_timeout, tls, tls_verify.</p>"},{"location":"admin/configuration/listen/#ejabberd_stun","title":"ejabberd_stun","text":"<p>ejabberd can act as a stand-alone STUN/TURN server, and this module handles STUN/TURN requests as defined in (<code>RFC 5389</code>/<code>RFC 5766</code>. In that role ejabberd helps clients with ICE (<code>RFC 5245</code> or Jingle ICE (<code>XEP-0176</code> support to discover their external addresses and ports and to relay media traffic when it is impossible to establish direct peer-to-peer connection.</p> <p>General listen options supported: certfile, send_timeout, shaper, tls,</p> <p>The specific <code>ejabberd_stun</code> configurable options are:</p> <ul> <li> <p>auth_realm: String</p> <p>When <code>auth_type</code> is set to <code>user</code> and you have several virtual hosts configured you should set this option explicitly to the virtual host you want to serve on this particular listening port. Implies <code>use_turn</code>.</p> </li> <li> <p>auth_type: user|anonymous</p> <p>Which authentication type to use for TURN allocation requests. When type <code>user</code> is set, ejabberd authentication backend is used. For <code>anonymous</code> type no authentication is performed (not recommended for public services). The default is <code>user</code>. Implies <code>use_turn</code>.</p> </li> <li> <p>shaper: Atom</p> <p>For <code>tcp</code> transports defines shaper to use. The default is <code>none</code>.</p> </li> <li> <p>server_name: String</p> <p>Defines software version to return with every response. The default is the STUN library version.</p> </li> <li> <p>turn_blacklist: String | [String,...]</p> <p>Specify one or more IP addresses and/or subnet addresses/masks. The TURN server will refuse to relay traffic from/to blacklisted IP addresses. By default, loopback addresses (<code>127.0.0.0/8</code> and <code>::1/128</code>) are blacklisted.</p> </li> <li> <p>turn_ipv4_address: String</p> <p>The IPv4 address advertised by your TURN server. The address should not be NAT\u2019ed or firewalled. There is not default, so you should set this option explicitly. Implies <code>use_turn</code>.</p> </li> <li> <p>turn_ipv6_address: String</p> <p>The IPv6 address advertised by your TURN server. The address should not be NAT\u2019ed or firewalled. There is not default, so you should set this option explicitly. Implies <code>use_turn</code>.</p> </li> <li> <p>turn_max_allocations: Integer|infinity</p> <p>Maximum number of TURN allocations available from the particular IP address. The default value is 10. Implies <code>use_turn</code>.</p> </li> <li> <p>turn_max_permissions: Integer|infinity</p> <p>Maximum number of TURN permissions available from the particular IP address. The default value is 10. Implies <code>use_turn</code>.</p> </li> <li> <p>turn_max_port: Integer</p> <p>Together with <code>turn_min_port</code> forms port range to allocate from. The default is 65535. Implies <code>use_turn</code>.</p> </li> <li> <p>turn_min_port: Integer</p> <p>Together with <code>turn_max_port</code> forms port range to allocate from. The default is 49152. Implies <code>use_turn</code>.</p> </li> <li> <p>use_turn: true|false</p> <p>Enables/disables TURN (media relay) functionality. The default is <code>false</code>.</p> </li> </ul> <p>Example configuration with disabled TURN functionality (STUN only):</p> <pre><code>listen:\n  -\n    port: 5478\n    transport: udp\n    module: ejabberd_stun\n  -\n    port: 5478\n    module: ejabberd_stun\n  -\n    port: 5349\n    module: ejabberd_stun\n    tls: true\n    certfile: /etc/ejabberd/server.pem\n</code></pre> <p>Example configuration with TURN functionality. Note that STUN is always enabled if TURN is enabled. Here, only UDP section is shown:</p> <pre><code>listen:\n  -\n    port: 5478\n    transport: udp\n    use_turn: true\n    turn_ipv4_address: 10.20.30.1\n    module: ejabberd_stun\n</code></pre>"},{"location":"admin/configuration/listen/#ejabberd_sip","title":"ejabberd_sip","text":"<p>ejabberd has built-in support to handle SIP requests as defined in <code>RFC 3261</code>.</p> <p>To activate this feature, add the <code>ejabberd_sip</code> listen module, enable <code>mod_sip</code> module for the desired virtual host, and configure DNS properly.</p> <p>To add a listener you should configure <code>ejabberd_sip</code> listening module as described in Listen section. If option <code>tls</code> is specified, option <code>certfile</code> must be specified as well, otherwise incoming TLS connections would fail.</p> <p>General listen options supported: certfile, send_timeout, tls.</p> <p>Example configuration with standard ports (as per <code>RFC 3261</code>):</p> <pre><code>listen:\n  -\n    port: 5060\n    transport: udp\n    module: ejabberd_sip\n  -\n    port: 5060\n    module: ejabberd_sip\n  -\n    port: 5061\n    module: ejabberd_sip\n    tls: true\n    certfile: /etc/ejabberd/server.pem\n</code></pre> <p>Note that there is no StartTLS support in SIP and <code>SNI</code> support is somewhat tricky, so for TLS you have to configure different virtual hosts on different ports if you have different certificate files for them.</p> <p>Next you need to configure DNS SIP records for your virtual domains. Refer to <code>RFC 3263</code> for the detailed explanation. Simply put, you should add NAPTR and SRV records for your domains. Skip NAPTR configuration if your DNS provider doesn't support this type of records. It\u2019s not fatal, however, highly recommended.</p> <p>Example configuration of NAPTR records:</p> <pre><code>example.com IN NAPTR 10  0 \"s\" \"SIPS+D2T\" \"\" _sips._tcp.example.com.\nexample.com IN NAPTR 20  0 \"s\" \"SIP+D2T\" \"\" _sip._tcp.example.com.\nexample.com IN NAPTR 30  0 \"s\" \"SIP+D2U\" \"\" _sip._udp.example.com.\n</code></pre> <p>Example configuration of SRV records with standard ports (as per <code>RFC 3261</code>:</p> <pre><code>_sip._udp   IN SRV  0 0 5060 sip.example.com.\n_sip._tcp   IN SRV  0 0 5060 sip.example.com.\n_sips._tcp  IN SRV  0 0 5061 sip.example.com.\n</code></pre> <p>Warning</p> <p>SIP authentication does not support SCRAM. As such, it is not possible to use <code>mod_sip</code> to authenticate when ejabberd has been set to encrypt password with SCRAM.</p>"},{"location":"admin/configuration/listen/#ejabberd_http","title":"ejabberd_http","text":"<p>Handles incoming HTTP connections.</p> <p>With the proper request handlers configured, this serves HTTP services like ACME, API, BOSH, CAPTCHA, Fileserver, OAuth, RegisterWeb, Upload, WebAdmin, WebSocket, XML-RPC.</p> <p>Options: cafile, ciphers, custom_headers, dhfile, protocol_options, request_handlers, send_timeout, tag, tls, tls_compression, and the trusted_proxies top-level option.</p>"},{"location":"admin/configuration/listen/#ejabberd_http_ws","title":"ejabberd_http_ws","text":"<p>This module enables XMPP communication over WebSocket connection as described in <code>RFC 7395</code>.</p>"},{"location":"admin/configuration/listen/#websocket-config","title":"WebSocket Config","text":"<p>To enable WebSocket, simply add a handler to the <code>request_handlers</code> section of an <code>ejabberd_http</code> listener:</p> <pre><code>listen:\n  -\n    port: 5280\n    module: ejabberd_http\n    request_handlers:\n      /xmpp: ejabberd_http_ws\n</code></pre> <p>This module can be configured using those top-level options:</p> <ul> <li>websocket_origin</li> <li>websocket_ping_interval</li> <li>websocket_timeout</li> </ul>"},{"location":"admin/configuration/listen/#websocket-discovery","title":"WebSocket Discovery","text":"<p>With the example configuration previously mentioned, the WebSocket URL would be: <code>ws://localhost:5280/xmpp</code></p> <p>You may want to provide a <code>host-meta</code> file so clients can easily discover WebSocket service for your XMPP domain (see XEP-0156). One easy way to provide that file is using <code>mod_host_meta</code>.</p>"},{"location":"admin/configuration/listen/#testing-websocket","title":"Testing WebSocket","text":"<p>A test client can be found on Github: WebSocket test client</p> <p>There is an example configuration for WebSocket and Converse.js in the ejabberd 21.12 release notes.</p>"},{"location":"admin/configuration/listen/#ejabberd_xmlrpc","title":"ejabberd_xmlrpc","text":"<p>Handles XML-RPC requests to execute ejabberd commands. It is configured as a request handler in ejabberd_http.</p> <p>This is the minimum configuration required to enable the feature:</p> <pre><code>listen:\n  -\n    port: 5280\n    module: ejabberd_http\n    request_handlers:\n      /xmlrpc: ejabberd_xmlrpc\n\napi_permissions:\n  \"public commands\":\n    who:\n      ip: 127.0.0.1/8\n    what:\n      - connected_users_number\n</code></pre> <p>Example Python3 script:</p> <pre><code>import xmlrpc.client\nserver = xmlrpc.client.ServerProxy(\"http://127.0.0.1:5280/xmlrpc/\");\nprint(server.connected_users_number())\n</code></pre> <p>By default there is no restriction to who can execute what commands, so it is strongly recommended that you configure restrictions using API Permissions.</p> <p>This example configuration adds some restrictions (only requests from localhost are accepted, the XML-RPC query must include authentication credentials of a specific account registered in ejabberd, and only two commands are accepted):</p> <pre><code>listen:\n  -\n    port: 5280\n    ip: \"::\"\n    module: ejabberd_http\n    request_handlers:\n      /xmlrpc: ejabberd_xmlrpc\n\napi_permissions:\n  \"some XMLRPC commands\":\n    from: ejabberd_xmlrpc\n    who:\n      - ip: 127.0.0.1\n      - user: user1@localhost\n    what:\n      - registered_users\n      - connected_users_number\n</code></pre> <p>Example Python3 script for that restricted configuration:</p> <pre><code>import xmlrpc.client\nserver = xmlrpc.client.ServerProxy(\"http://127.0.0.1:5280/xmlrpc/\");\n\nparams = {}\nparams['host'] = 'localhost'\n\nauth = {'user': 'user1',\n        'server': 'localhost',\n        'password': 'mypass11',\n        'admin': True}\n\ndef calling(command, data):\n    fn = getattr(server, command)\n    return fn(auth, data)\n\nprint(calling('registered_users', params))\n</code></pre> <p>Please notice, when using the old Python2, replace the two first lines with:</p> <pre><code>import xmlrpclib\nserver = xmlrpclib.Server(\"http://127.0.0.1:5280/xmlrpc/\");\n</code></pre> <p>It's possible to use OAuth for authentication instead of plain password, see OAuth Support.</p> <p>In ejabberd 20.03 and older, it was possible to configure <code>ejabberd_xmlrpc</code> as a listener.</p> <p>Just for reference, there's also the old <code>ejabberd_xmlrpc documentation</code> with example clients in other languages.</p>"},{"location":"admin/configuration/listen/#examples","title":"Examples","text":"<p>For example, the following simple configuration defines:</p> <ul> <li> <p>There are three domains. The default certificate file is <code>server.pem</code>. However, the c2s and s2s connections to the domain <code>example.com</code> use the file <code>example_com.pem</code>.</p> </li> <li> <p>Port 5222 listens for c2s connections with STARTTLS, and also allows plain connections for old clients.</p> </li> <li> <p>Port 5223 listens for c2s connections with the old SSL.</p> </li> <li> <p>Port 5269 listens for s2s connections with STARTTLS. The socket is set for IPv6 instead of IPv4.</p> </li> <li> <p>Port 5478 listens for STUN requests over UDP.</p> </li> <li> <p>Port 5280 listens for HTTP requests, and serves the HTTP-Bind (BOSH) service.</p> </li> <li> <p>Port 5281 listens for HTTP requests, using HTTPS to serve HTTP-Bind (BOSH) and the Web Admin as explained in Managing: Web Admin. The socket only listens connections to the IP address 127.0.0.1.</p> </li> </ul> <pre><code>hosts:\n  - example.com\n  - example.org\n  - example.net\n\ncertfiles:\n  - /etc/ejabberd/server.pem\n  - /etc/ejabberd/example_com.pem\n\nlisten:\n  -\n    port: 5222\n    module: ejabberd_c2s\n    access: c2s\n    shaper: c2s_shaper\n    starttls: true\n    max_stanza_size: 65536\n  -\n    port: 5223\n    module: ejabberd_c2s\n    access: c2s\n    shaper: c2s_shaper\n    tls: true\n    max_stanza_size: 65536\n  -\n    port: 5269\n    ip: \"::\"\n    module: ejabberd_s2s_in\n    shaper: s2s_shaper\n    max_stanza_size: 131072\n  -\n    port: 5478\n    transport: udp\n    module: ejabberd_stun\n  -\n    port: 5280\n    module: ejabberd_http\n    request_handlers:\n      /bosh: mod_bosh\n  -\n    port: 5281\n    ip: 127.0.0.1\n    module: ejabberd_http\n    tls: true\n    request_handlers:\n      /admin: ejabberd_web_admin\n      /bosh: mod_bosh\n\ns2s_use_starttls: optional\noutgoing_s2s_families:\n  - ipv4\n  - ipv6\noutgoing_s2s_timeout: 10000\ntrusted_proxies: [127.0.0.1, 192.168.1.11]\n</code></pre> <p>In this example, the following configuration defines that:</p> <ul> <li> <p>c2s connections are listened for on port 5222 (all IPv4 addresses)  and on port 5223 (SSL, IP 192.168.0.1 and fdca:8ab6:a243:75ef::1)  and denied for the user called \u2018<code>bad</code>\u2019.</p> </li> <li> <p>s2s connections are listened for on port 5269 (all IPv4 addresses)  with STARTTLS for secured traffic strictly required, and the  certificates are verified. Incoming and outgoing connections of  remote XMPP servers are denied, only two servers can connect:  \u201cjabber.example.org\u201d and \u201cexample.com\u201d.</p> </li> <li> <p>Port 5280 is serving the Web Admin and the HTTP-Bind (BOSH) service in  all the IPv4 addresses. Note that it is also possible to serve them  on different ports. The second example in section\u00a0Managing: Web Admin shows  how exactly this can be done. A request handler to serve MQTT over WebSocket is also defined.</p> </li> <li> <p>All users except for the administrators have a traffic of limit  1,000Bytes/second</p> </li> <li> <p>The <code>AIM transport</code> <code>aim.example.org</code> is connected to port 5233 on localhost IP  addresses (127.0.0.1 and ::1) with password \u2018<code>aimsecret</code>\u2019.</p> </li> <li> <p>The ICQ transport JIT (<code>icq.example.org</code> and <code>sms.example.org</code>) is  connected to port 5234 with password \u2018<code>jitsecret</code>\u2019.</p> </li> <li> <p>The <code>MSN transport</code> <code>msn.example.org</code> is connected to port 5235 with password  \u2018<code>msnsecret</code>\u2019.</p> </li> <li> <p>The <code>Yahoo! transport</code> <code>yahoo.example.org</code> is connected to port 5236 with password  \u2018<code>yahoosecret</code>\u2019.</p> </li> <li> <p>The  <code>Gadu-Gadu transport</code> <code>gg.example.org</code> is connected to port 5237 with password  \u2018<code>ggsecret</code>\u2019.</p> </li> <li> <p>The <code>Jabber Mail Component</code> <code>jmc.example.org</code> is connected to port 5238 with password  \u2018<code>jmcsecret</code>\u2019.</p> </li> <li> <p>The service custom has enabled the special option to avoiding  checking the <code>from</code> attribute in the packets send by this component.  The component can send packets in behalf of any users from the  server, or even on behalf of any server.</p> </li> </ul> <pre><code>acl:\n  blocked:\n    user: bad\n  trusted_servers:\n    server:\n      - example.com\n      - jabber.example.org\n  xmlrpc_bot:\n    user:\n      - xmlrpc-robot@example.org\nshaper:\n  normal: 1000\nshaper_rules:\n  c2s_shaper:\n    - none: admin\n    - normal\naccess_rules:\n  c2s:\n    - deny: blocked\n    - allow\n  xmlrpc_access:\n    - allow: xmlrpc_bot\n  s2s:\n    - allow: trusted_servers\ncertfiles:\n  - /path/to/ssl.pem\ns2s_access: s2s\ns2s_use_starttls: required_trusted\nlisten:\n  -\n    port: 5222\n    module: ejabberd_c2s\n    shaper: c2s_shaper\n    access: c2s\n  -\n    ip: 192.168.0.1\n    port: 5223\n    module: ejabberd_c2s\n    tls: true\n    access: c2s\n  -\n    ip: \"FDCA:8AB6:A243:75EF::1\"\n    port: 5223\n    module: ejabberd_c2s\n    tls: true\n    access: c2s\n  -\n    port: 5269\n    module: ejabberd_s2s_in\n  -\n    port: 5280\n    module: ejabberd_http\n    request_handlers:\n      /admin: ejabberd_web_admin\n      /bosh: mod_bosh\n      /mqtt: mod_mqtt\n  -\n    port: 4560\n    module: ejabberd_xmlrpc\n    access_commands: {}\n  -\n    ip: 127.0.0.1\n    port: 5233\n    module: ejabberd_service\n    hosts:\n      aim.example.org:\n        password: aimsecret\n  -\n    ip: \"::1\"\n    port: 5233\n    module: ejabberd_service\n    hosts:\n      aim.example.org:\n        password: aimsecret\n  -\n    port: 5234\n    module: ejabberd_service\n    hosts:\n      icq.example.org:\n        password: jitsecret\n      sms.example.org:\n        password: jitsecret\n  -\n    port: 5235\n    module: ejabberd_service\n    hosts:\n      msn.example.org:\n        password: msnsecret\n  -\n    port: 5236\n    module: ejabberd_service\n    password: yahoosecret\n  -\n    port: 5237\n    module: ejabberd_service\n    hosts:\n      gg.example.org:\n        password: ggsecret\n  -\n    port: 5238\n    module: ejabberd_service\n    hosts:\n      jmc.example.org:\n        password: jmcsecret\n  -\n    port: 5239\n    module: ejabberd_service\n    check_from: false\n    hosts:\n      custom.example.org:\n        password: customsecret\n</code></pre> <p>Note, that for services based in jabberd14 or WPJabber you have to make the transports log and do XDB by themselves:</p> <pre><code>&lt;!--\n   You have to add elogger and rlogger entries here when using ejabberd.\n   In this case the transport will do the logging.\n--&gt;\n\n&lt;log id='logger'&gt;\n  &lt;host/&gt;\n  &lt;logtype/&gt;\n  &lt;format&gt;%d: [%t] (%h): %s&lt;/format&gt;\n  &lt;file&gt;/var/log/jabber/service.log&lt;/file&gt;\n&lt;/log&gt;\n\n&lt;!--\n   Some XMPP server implementations do not provide\n   XDB services (for example, jabberd2 and ejabberd).\n   xdb_file.so is loaded in to handle all XDB requests.\n--&gt;\n\n&lt;xdb id=\"xdb\"&gt;\n  &lt;host/&gt;\n  &lt;load&gt;\n    &lt;!-- this is a lib of wpjabber or jabberd14 --&gt;\n    &lt;xdb_file&gt;/usr/lib/jabber/xdb_file.so&lt;/xdb_file&gt;\n    &lt;/load&gt;\n  &lt;xdb_file xmlns=\"jabber:config:xdb_file\"&gt;\n    &lt;spool&gt;&lt;jabberd:cmdline flag='s'&gt;/var/spool/jabber&lt;/jabberd:cmdline&gt;&lt;/spool&gt;\n  &lt;/xdb_file&gt;\n&lt;/xdb&gt;\n</code></pre>"},{"location":"admin/configuration/modules/","title":"Modules Options","text":"<p>Please note</p> <p>This section describes modules options of ejabberd 25.07.  If you are using an old ejabberd release, please refer to the corresponding archived version of this page in the Archive.</p> <p>The modules that changed in this version are marked with \ud83d\udfe4.</p>","boost":1},{"location":"admin/configuration/modules/#mod_adhoc","title":"mod_adhoc","text":"<p>ad-hoc command</p> <p><p>Command that can be executed by an XMPP client using XEP-0050.</p> </p> <p>This module implements XEP-0050: Ad-Hoc Commands. It\u2019s an auxiliary module and is only needed by some of the other modules.</p> <p>Available options:</p> <ul> <li>report_commands_node: <code>true | false</code> Provide the Commands item in the Service Discovery. Default value: <code>false</code>.</li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_adhoc_api","title":"mod_adhoc_api","text":"<p> added in 25.03</p> <p>Execute 6251a85a-47d0-11ee-be56-0242ac120002:5be70a5d6768764dd3f08a7205ccda2f:&lt;__None__&gt; in a XMPP client using XEP-0050: Ad-Hoc Commands. This module requires mod_adhoc (to execute the commands), and recommends mod_disco (to discover the commands).</p> <p>Available options:</p> <ul> <li>default_version: <code>integer() | string()</code> What API version to use. If setting an ejabberd version, it will use the latest API version that was available in that 6251a85a-47d0-11ee-be56-0242ac120002:593fd2ba9c4c7de798814c7817c2b09a:&lt;__None__&gt; ejabberd version. For example, setting <code>\"24.06\"</code> in this option implies <code>2</code>. The default value is the latest version.</li> </ul> <p>Example:</p> <pre><code>acl:\n  admin:\n    user: jan@localhost\n\napi_permissions:\n  \"adhoc commands\":\n    from: mod_adhoc_api\n    who: admin\n    what:\n      - \"[tag:roster]\"\n      - \"[tag:session]\"\n      - stats\n      - status\n\nmodules:\n  mod_adhoc_api:\n    default_version: 2\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_admin_extra","title":"mod_admin_extra","text":"<p>This module provides additional administrative commands.</p> <p>Details for some commands:</p> <p>ban_account API: This command kicks all the connected sessions of the account from the server. It also changes their password to a randomly generated one, so they can\u2019t login anymore unless a server administrator changes their password again. It is possible to define the reason of the ban. The new password also includes the reason and the date and time of the ban. See an example below.</p> <p>push_roster API (and push_roster_all API): The roster file must be placed, if using Windows, on the directory where you installed ejabberd: <code>C:/Program Files/ejabberd</code> or similar. If you use other Operating System, place the file on the same directory where the .beam files are installed. See below an example roster file.</p> <p>srg_create API: If you want to put a group Name with blank spaces, use the characters <code>\"</code>' and <code>'\"</code> to define when the Name starts and ends. See an example below.</p> <p>The module has no options.</p> <p>Examples:</p> <p>With this configuration, vCards can only be modified with mod_admin_extra commands:</p> <pre><code>acl:\n  adminextraresource:\n    - resource: \"modadminextraf8x,31ad\"\naccess_rules:\n  vcard_set:\n    - allow: adminextraresource\nmodules:\n  mod_admin_extra: {}\n  mod_vcard:\n    access_set: vcard_set\n</code></pre> <p>Content of roster file for push_roster API:</p> <pre><code>[{&lt;&lt;\"bob\"&gt;&gt;, &lt;&lt;\"example.org\"&gt;&gt;, &lt;&lt;\"workers\"&gt;&gt;, &lt;&lt;\"Bob\"&gt;&gt;},\n{&lt;&lt;\"mart\"&gt;&gt;, &lt;&lt;\"example.org\"&gt;&gt;, &lt;&lt;\"workers\"&gt;&gt;, &lt;&lt;\"Mart\"&gt;&gt;},\n{&lt;&lt;\"Rich\"&gt;&gt;, &lt;&lt;\"example.org\"&gt;&gt;, &lt;&lt;\"bosses\"&gt;&gt;, &lt;&lt;\"Rich\"&gt;&gt;}].\n</code></pre> <p>With this call, the sessions of the local account which JID is <code>boby@example.org</code> will be kicked, and its password will be set to something like <code>BANNED_ACCOUNT\u201420080425T21:45:07\u20142176635\u2014Spammed_rooms</code></p> <pre><code>ejabberdctl vhost example.org ban_account boby \"Spammed rooms\"\n</code></pre> <p>Call to srg_create API using double-quotes and single-quotes:</p> <pre><code>ejabberdctl srg_create g1 example.org \"'Group number 1'\" this_is_g1 g1\n</code></pre> <p>API Tags: accounts, erlang, last, private, purge, roster, session, shared_roster_group, stanza, statistics, vcard</p>","boost":1},{"location":"admin/configuration/modules/#mod_admin_update_sql","title":"mod_admin_update_sql","text":"<p>This module can be used to update existing SQL database from the default to the new schema. Check the section Default and New Schemas for details. Please note that only MS SQL, MySQL, and PostgreSQL are supported. When the module is loaded use update_sql API.</p> <p>The module has no options.</p>","boost":1},{"location":"admin/configuration/modules/#mod_announce","title":"mod_announce","text":"<p>This module enables configured users to broadcast announcements and to set the message of the day (MOTD). Configured users can perform these actions with an XMPP client either using Ad-Hoc Commands or sending messages to specific JIDs.</p> <p>Note</p> <p>This module can be resource intensive on large deployments as it may broadcast a lot of messages. This module should be disabled for instances of ejabberd with hundreds of thousands users.</p> <p>To send announcements using XEP-0050: Ad-Hoc Commands, this module requires mod_adhoc (to execute the commands), and recommends mod_disco (to discover the commands).</p> <p>To send announcements by sending messages to specific JIDs, these are the destination JIDs:</p> <ul> <li> <p><code>example.org/announce/all</code>: Send the message to all registered users     in that vhost. If the user is online and connected to several     resources, only the resource with the highest priority will receive     the message. If the registered user is not connected, the message is     stored offline in assumption that offline storage (see     mod_offline) is enabled.</p> </li> <li> <p><code>example.org/announce/online</code>: Send the message to all connected     users. If the user is online and connected to several resources, all     resources will receive the message.</p> </li> <li> <p><code>example.org/announce/motd</code>: Set the message of the day (MOTD) that     is sent to users when they login. Also sends the message to all     connected users (similar to <code>announce/online</code>).</p> </li> <li> <p><code>example.org/announce/motd/update</code>: Set the message of the day     (MOTD) that is sent to users when they login. This does not send the     message to any currently connected user.</p> </li> <li> <p><code>example.org/announce/motd/delete</code>: Remove the existing message of     the day (MOTD) by sending a message to this JID.</p> </li> </ul> <p>There are similar destination JIDs to apply to all virtual hosts in ejabberd:</p> <ul> <li> <p><code>example.org/announce/all-hosts/all</code>: send to all registered     accounts</p> </li> <li> <p><code>example.org/announce/all-hosts/online</code>: send to online sessions</p> </li> <li> <p><code>example.org/announce/all-hosts/motd</code>: set MOTD and send to online</p> </li> <li> <p><code>example.org/announce/all-hosts/motd/update</code>: update MOTD</p> </li> <li> <p><code>example.org/announce/all-hosts/motd/delete</code>: delete MOTD</p> </li> </ul> <p>Available options:</p> <ul> <li> <p>access: <code>AccessName</code> This option specifies who is allowed to send announcements and to set the message of the day. The default value is <code>none</code> (i.e. nobody is able to send such messages).</p> </li> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed: <code>true | false</code> Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_antispam","title":"mod_antispam \ud83d\udfe4","text":"<p> added in 25.07</p> <p>Filter spam messages and subscription requests received from remote servers based on Real-Time Block Lists (RTBL), lists of known spammer JIDs and/or URLs mentioned in spam messages. Traffic classified as spam is rejected with an error (and an [info] message is logged) unless the sender is subscribed to the recipient\u2019s presence.</p> <p>Available options:</p> <ul> <li> <p>access_spam: <code>Access</code> Access rule that controls what accounts may receive spam messages. If the rule returns <code>allow</code> for a given recipient, spam messages aren\u2019t rejected for that recipient. The default value is <code>none</code>, which means that all recipients are subject to spam filtering verification.</p> </li> <li> <p>cache_size: <code>pos_integer()</code> Maximum number of JIDs that will be cached due to sending spam URLs. If that limit is exceeded, the least recently used entries are removed from the cache. Setting this option to <code>0</code> disables the caching feature. Note that separate caches are used for each virtual host, and that the caches aren\u2019t distributed across cluster nodes. The default value is <code>10000</code>.</p> </li> <li> <p>rtbl_services: <code>[Service]</code> Query a RTBL service to get domains to block, as provided by xmppbl.org. Please note right now this option only supports one service in that list. For blocking spam and abuse on MUC channels, please use mod_muc_rtbl for now. If only the host is provided, the default node names will be assumed. If the node name is different than <code>spam_source_domains</code>, you can setup the custom node name with the option <code>spam_source_domains_node</code>. The default value is an empty list of services.</p> <p>Example:</p> <pre><code>rtbl_services:\n  - pubsub.server1.localhost:\n      spam_source_domains_node: actual_custom_pubsub_node\n</code></pre> </li> <li> <p>spam_domains_file: <code>none | Path</code> Path to a plain text file containing a list of known spam domains, one domain per line. Messages and subscription requests sent from one of the listed domains are classified as spam if sender is not in recipient\u2019s roster. This list of domains gets merged with the one retrieved by an RTBL host if any given. Use an absolute path, or the @CONFIG_PATH@ predefined keyword if the file is available in the configuration directory. The default value is <code>none</code>.</p> </li> <li> <p>spam_dump_file: <code>false | true | Path</code> Path to the file to store blocked messages. Use an absolute path, or the <code>@LOG_PATH@</code> predefined keyword to store logs in the same place that the other ejabberd log files. If set to <code>false</code>, it doesn\u2019t dump stanzas, which is the default. If set to <code>true</code>, it stores in <code>\"@LOG_PATH@/spam_dump_@HOST@.log\"</code>.</p> </li> <li> <p>spam_jids_file: <code>none | Path</code> Path to a plain text file containing a list of known spammer JIDs, one JID per line. Messages and subscription requests sent from one of the listed JIDs are classified as spam. Messages containing at least one of the listed JIDsare classified as spam as well. Furthermore, the sender\u2019s JID will be cached, so that future traffic originating from that JID will also be classified as spam. Use an absolute path, or the <code>@CONFIG_PATH@</code> predefined keyword if the file is available in the configuration directory. The default value is <code>none</code>.</p> </li> <li> <p>spam_urls_file: <code>none | Path</code> Path to a plain text file containing a list of URLs known to be mentioned in spam message bodies. Messages containing at least one of the listed URLs are classified as spam. Furthermore, the sender\u2019s JID will be cached, so that future traffic originating from that JID will be classified as spam as well. Use an absolute path, or the <code>@CONFIG_PATH@</code> predefined keyword if the file is available in the configuration directory. The default value is <code>none</code>.</p> </li> <li> <p>whitelist_domains_file: <code>none | Path</code> Path to a file containing a list of domains to whitelist from being blocked, one per line. If either it is in <code>spam_domains_file</code> or more realistically in a domain sent by a RTBL host (see option <code>rtbl_services</code>) then this domain will be ignored and stanzas from there won\u2019t be blocked. Use an absolute path, or the @CONFIG_PATH@ predefined keyword if the file is available in the configuration directory. The default value is <code>none</code>.</p> </li> </ul> <p>Example:</p> <pre><code>modules:\n  mod_antispam:\n    rtbl_services:\n      - xmppbl.org\n    spam_jids_file: \"@CONFIG_PATH@/spam_jids.txt\"\n    spam_dump_file: \"@LOG_PATH@/spam/host-@HOST@.log\"\n</code></pre> <p>API Tags: spam</p>","boost":1},{"location":"admin/configuration/modules/#mod_auth_fast","title":"mod_auth_fast","text":"<p> added in 24.12</p> <p>The module adds support for XEP-0484: Fast Authentication Streamlining Tokens that allows users to authenticate using self-managed tokens.</p> <p>Available options:</p> <ul> <li> <p>db_type: <code>mnesia</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>token_lifetime: <code>timeout()</code> Time that tokens will be kept, measured from it\u2019s creation time. Default value set to 30 days</p> </li> <li> <p>token_refresh_age: <code>timeout()</code> This time determines age of token, that qualifies for automatic refresh. Default value set to 1 day</p> </li> </ul> <p>Example:</p> <pre><code>modules:\n  mod_auth_fast:\n    token_lifetime: 14days\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_avatar","title":"mod_avatar","text":"<p>The purpose of the module is to cope with legacy and modern XMPP clients posting avatars. The process is described in XEP-0398: User Avatar to vCard-Based Avatars Conversion.</p> <p>Also, the module supports conversion between avatar image formats on the fly.</p> <p>The module depends on mod_vcard, mod_vcard_xupdate and mod_pubsub.</p> <p>Available options:</p> <ul> <li> <p>convert: <code>{From: To}</code> Defines image conversion rules: the format in <code>From</code> will be converted to format in <code>To</code>. The value of <code>From</code> can also be <code>default</code>, which is match-all rule. NOTE: the list of supported formats is detected at compile time depending on the image libraries installed in the system.</p> <p>Example:</p> <pre><code>convert:\n  webp: jpg\n  default: png\n</code></pre> </li> <li> <p>rate_limit: <code>Number</code> Limit any given JID by the number of avatars it is able to convert per minute. This is to protect the server from image conversion DoS. The default value is <code>10</code>.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_block_strangers","title":"mod_block_strangers","text":"<p>This module blocks and logs any messages coming from an unknown entity. If a writing entity is not in your roster, you can let this module drop and/or log the message. By default you\u2019ll just not receive message from that entity. Enable this module if you want to drop SPAM messages.</p> <p>Available options:</p> <ul> <li> <p>access: <code>AccessName</code> The option is supposed to be used when <code>allow_local_users</code> and <code>allow_transports</code> are not enough. It\u2019s an ACL where <code>deny</code> means the message will be rejected (or a CAPTCHA would be generated for a presence, if configured), and <code>allow</code> means the sender is whitelisted and the stanza will pass through. The default value is <code>none</code>, which means nothing is whitelisted.</p> </li> <li> <p>allow_local_users: <code>true | false</code> This option specifies if strangers from the same local host should be accepted or not. The default value is <code>true</code>.</p> </li> <li> <p>allow_transports: <code>true | false</code> If set to <code>true</code> and some server\u2019s JID is in user\u2019s roster, then messages from any user of this server are accepted even if no subscription present. The default value is <code>true</code>.</p> </li> <li> <p>captcha: <code>true | false</code> Whether to generate CAPTCHA or not in response to messages from strangers. See also section CAPTCHA of the Configuration Guide. The default value is <code>false</code>.</p> </li> <li> <p>drop: <code>true | false</code> This option specifies if strangers messages should be dropped or not. The default value is <code>true</code>.</p> </li> <li> <p>log: <code>true | false</code> This option specifies if strangers' messages should be logged (as info message) in ejabberd.log. The default value is <code>false</code>.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_blocking","title":"mod_blocking","text":"<p>The module implements XEP-0191: Blocking Command.</p> <p>This module depends on mod_privacy where all the configuration is performed.</p> <p>The module has no options.</p>","boost":1},{"location":"admin/configuration/modules/#mod_bosh","title":"mod_bosh","text":"<p>This module implements XMPP over BOSH as defined in XEP-0124 and XEP-0206. BOSH stands for Bidirectional-streams Over Synchronous HTTP. It makes it possible to simulate long lived connections required by XMPP over the HTTP protocol. In practice, this module makes it possible to use XMPP in a browser without WebSocket support and more generally to have a way to use XMPP while having to get through an HTTP proxy.</p> <p>Available options:</p> <ul> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed: <code>true | false</code> Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>json: <code>true | false</code> This option has no effect.</p> </li> <li> <p>max_concat: <code>pos_integer() | infinity</code> This option limits the number of stanzas that the server will send in a single bosh request. The default value is <code>unlimited</code>.</p> </li> <li> <p>max_inactivity: <code>timeout()</code> The option defines the maximum inactivity period. The default value is <code>30</code> seconds.</p> </li> <li> <p>max_pause: <code>pos_integer()</code> Indicate the maximum length of a temporary session pause (in seconds) that a client can request. The default value is <code>120</code>.</p> </li> <li> <p>prebind: <code>true | false</code> If enabled, the client can create the session without going through authentication. Basically, it creates a new session with anonymous authentication. The default value is <code>false</code>.</p> </li> <li> <p>queue_type: <code>ram | file</code> Same as top-level queue_type option, but applied to this module only.</p> </li> <li> <p>ram_db_type: <code>mnesia | sql | redis</code> Same as top-level default_ram_db option, but applied to this module only.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> </ul> <p>Example:</p> <pre><code>listen:\n  -\n    port: 5222\n    module: ejabberd_c2s\n  -\n    port: 5443\n    module: ejabberd_http\n    request_handlers:\n      /bosh: mod_bosh\n\nmodules:\n  mod_bosh: {}\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_caps","title":"mod_caps","text":"<p>This module implements XEP-0115: Entity Capabilities. The main purpose of the module is to provide PEP functionality (see mod_pubsub).</p> <p>Available options:</p> <ul> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed: <code>true | false</code> Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_carboncopy","title":"mod_carboncopy","text":"<p>The module implements XEP-0280: Message Carbons. The module broadcasts messages on all connected user resources (devices).</p> <p>The module has no options.</p>","boost":1},{"location":"admin/configuration/modules/#mod_client_state","title":"mod_client_state","text":"<p>This module allows for queueing certain types of stanzas when a client indicates that the user is not actively using the client right now (see XEP-0352: Client State Indication). This can save bandwidth and resources.</p> <p>A stanza is dropped from the queue if it\u2019s effectively obsoleted by a new one (e.g., a new presence stanza would replace an old one from the same client). The queue is flushed if a stanza arrives that won\u2019t be queued, or if the queue size reaches a certain limit (currently 100 stanzas), or if the client becomes active again.</p> <p>Available options:</p> <ul> <li> <p>queue_chat_states: <code>true | false</code> Queue \"standalone\" chat state notifications (as defined in XEP-0085: Chat State Notifications) while a client indicates inactivity. The default value is <code>true</code>.</p> </li> <li> <p>queue_pep: <code>true | false</code> Queue PEP notifications while a client is inactive. When the queue is flushed, only the most recent notification of a given PEP node is delivered. The default value is <code>true</code>.</p> </li> <li> <p>queue_presence: <code>true | false</code> While a client is inactive, queue presence stanzas that indicate (un)availability. The default value is <code>true</code>.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_configure","title":"mod_configure","text":"<p>The module provides server configuration functionalities using XEP-0030: Service Discovery and XEP-0050: Ad-Hoc Commands:</p> <ul> <li> <p>List and discover outgoing s2s, online client sessions and all     registered accounts</p> </li> <li> <p>Most of the ad-hoc commands defined in XEP-0133: Service     Administration</p> </li> <li> <p>Additional custom ad-hoc commands specific to ejabberd</p> </li> </ul> <p>This module requires mod_adhoc (to execute the commands), and recommends mod_disco (to discover the commands).</p> <p>Please notice that all the ad-hoc commands implemented by this module have an equivalent API Command that you can execute using mod_adhoc_api or any other API frontend.</p> <p>Available options:</p> <ul> <li>access: <code>AccessName</code> added in 25.03  This option defines which access rule will be used to control who is allowed to access the features provided by this module. The default value is <code>configure</code>.</li> </ul> <p>Example:</p> <pre><code>acl:\n  admin:\n    user: sun@localhost\n\naccess_rules:\n  configure:\n    allow: admin\n\nmodules:\n  mod_configure:\n    access: configure\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_conversejs","title":"mod_conversejs \ud83d\udfe4","text":"<p> improved in 25.07</p> <p>This module serves a simple page for the Converse XMPP web browser client.</p> <p>To use this module, in addition to adding it to the <code>modules</code> section, you must also enable it in <code>listen</code> \u2192 <code>ejabberd_http</code> \u2192 request_handlers.</p> <p>Make sure either mod_bosh or ejabberd_http_ws are enabled in at least one <code>request_handlers</code>.</p> <p>When <code>conversejs_css</code> and <code>conversejs_script</code> are <code>auto</code>, by default they point to the public Converse client.</p> <p>This module is available since ejabberd 21.12.</p> <p>Available options:</p> <ul> <li> <p>bosh_service_url: <code>auto | BoshURL</code> BOSH service URL to which Converse can connect to. The keyword @HOST@ is replaced with the real virtual host name. If set to <code>auto</code>, it will build the URL of the first configured BOSH request handler. The default value is <code>auto</code>.</p> </li> <li> <p>conversejs_css: <code>auto | URL</code> Converse CSS URL. The keyword <code>@HOST@</code> is replaced with the hostname. The default value is <code>auto</code>.</p> </li> <li> <p>conversejs_options: <code>{Name: Value}</code> added in 22.05  Specify additional options to be passed to Converse. See Converse configuration. Only boolean, integer and string values are supported; lists are not supported.</p> </li> <li> <p>conversejs_resources: <code>Path</code> added in 22.05  Local path to the Converse files. If not set, the public Converse client will be used instead.</p> </li> <li> <p>conversejs_script: <code>auto | URL</code> Converse main script URL. The keyword <code>@HOST@</code> is replaced with the hostname. The default value is <code>auto</code>.</p> </li> <li> <p>default_domain: <code>Domain</code> Specify a domain to act as the default for user JIDs. The keyword <code>@HOST@</code> is replaced with the hostname. The default value is <code>@HOST@</code>.</p> </li> <li> <p>websocket_url: <code>auto | WebSocketURL</code> A WebSocket URL to which Converse can connect to. The <code>@HOST@</code> keyword is replaced with the real virtual host name. If set to <code>auto</code>, it will build the URL of the first configured WebSocket request handler. The default value is <code>auto</code>.</p> </li> </ul> <p>Examples:</p> <p>Manually setup WebSocket url, and use the public Converse client:</p> <pre><code>listen:\n  -\n    port: 5280\n    module: ejabberd_http\n    request_handlers:\n      /bosh: mod_bosh\n      /websocket: ejabberd_http_ws\n      /conversejs: mod_conversejs\n\nmodules:\n  mod_bosh: {}\n  mod_conversejs:\n    websocket_url: \"ws://@HOST@:5280/websocket\"\n</code></pre> <p>Host Converse locally and let auto detection of WebSocket and Converse URLs:</p> <pre><code>listen:\n  -\n    port: 443\n    module: ejabberd_http\n    tls: true\n    request_handlers:\n      /websocket: ejabberd_http_ws\n      /conversejs: mod_conversejs\n\nmodules:\n  mod_conversejs:\n    conversejs_resources: \"/home/ejabberd/conversejs-9.0.0/package/dist\"\n</code></pre> <p>Configure some additional options for Converse</p> <pre><code>modules:\n  mod_conversejs:\n    websocket_url: auto\n    conversejs_options:\n      auto_away: 30\n      clear_cache_on_logout: true\n      i18n: \"pt\"\n      locked_domain: \"@HOST@\"\n      message_archiving: always\n      theme: dracula\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_delegation","title":"mod_delegation","text":"<p>This module is an implementation of XEP-0355: Namespace Delegation. Only admin mode has been implemented by now. Namespace delegation allows external services to handle IQ using specific namespace. This may be applied for external PEP service.</p> <p>Warning</p> <p>Security issue: Namespace delegation gives components access to sensitive data, so permission should be granted carefully, only if you trust the component.</p> <p>Note</p> <p>This module is complementary to mod_privilege but can also be used separately.</p> <p>Available options:</p> <ul> <li> <p>namespaces: <code>{Namespace: Options}</code> If you want to delegate namespaces to a component, specify them in this option, and associate them to an access rule. The <code>Options</code> are:</p> <ul> <li> <p>access: <code>AccessName</code>    The option defines which components are allowed for namespace delegation. The default value is <code>none</code>.</p> </li> <li> <p>filtering: <code>Attributes</code>    The list of attributes. Currently not used.</p> </li> </ul> </li> </ul> <p>Examples:</p> <p>Make sure you do not delegate the same namespace to several services at the same time. As in the example provided later, to have the <code>sat-pubsub.example.org</code> component perform correctly disable the mod_pubsub module.</p> <pre><code>access_rules:\n  external_pubsub:\n    allow: external_component\n  external_mam:\n    allow: external_component\n\nacl:\n  external_component:\n    server: sat-pubsub.example.org\n\nmodules:\n  mod_delegation:\n    namespaces:\n      urn:xmpp:mam:1:\n        access: external_mam\n      http://jabber.org/protocol/pubsub:\n        access: external_pubsub\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_disco","title":"mod_disco","text":"<p>This module adds support for XEP-0030: Service Discovery. With this module enabled, services on your server can be discovered by XMPP clients.</p> <p>Available options:</p> <ul> <li> <p>extra_domains: <code>[Domain, ...]</code> With this option, you can specify a list of extra domains that are added to the Service Discovery item list. The default value is an empty list.</p> </li> <li> <p>name: <code>Name</code> A name of the server in the Service Discovery. This will only be displayed by special XMPP clients. The default value is <code>ejabberd</code>.</p> </li> <li> <p>server_info: <code>[Info, ...]</code> Specify additional information about the server, as described in XEP-0157: Contact Addresses for XMPP Services. Every <code>Info</code> element in the list is constructed from the following options:</p> <ul> <li> <p>modules: <code>all | [Module, ...]</code>    The value can be the keyword <code>all</code>, in which case the information is reported in all the services, or a list of ejabberd modules, in which case the information is only specified for the services provided by those modules.</p> </li> <li> <p>name: <code>Name</code>    The field <code>var</code> name that will be defined. See XEP-0157 for some standardized names.</p> </li> <li> <p>urls: <code>[URI, ...]</code>    A list of contact URIs, such as HTTP URLs, XMPP URIs and so on.</p> </li> </ul> <p>Example:</p> <pre><code>server_info:\n  -\n    modules: all\n    name: abuse-addresses\n    urls: [\"mailto:abuse@shakespeare.lit\"]\n  -\n    modules: [mod_muc]\n    name: \"Web chatroom logs\"\n    urls: [\"http://www.example.org/muc-logs\"]\n  -\n    modules: [mod_disco]\n    name: feedback-addresses\n    urls:\n      - http://shakespeare.lit/feedback.php\n      - mailto:feedback@shakespeare.lit\n      - xmpp:feedback@shakespeare.lit\n  -\n    modules:\n      - mod_disco\n      - mod_vcard\n    name: admin-addresses\n    urls:\n      - mailto:xmpp@shakespeare.lit\n      - xmpp:admins@shakespeare.lit\n</code></pre> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_fail2ban","title":"mod_fail2ban","text":"<p>The module bans IPs that show the malicious signs. Currently only C2S authentication failures are detected.</p> <p>Unlike the standalone program, <code>mod_fail2ban</code> clears the record of authentication failures after some time since the first failure or on a successful authentication. It also does not simply block network traffic, but provides the client with a descriptive error message.</p> <p>Warning</p> <p>You should not use this module behind a proxy or load balancer. ejabberd will see the failures as coming from the load balancer and, when the threshold of auth failures is reached, will reject all connections coming from the load balancer. You can lock all your user base out of ejabberd when using this module behind a proxy.</p> <p>Available options:</p> <ul> <li> <p>access: <code>AccessName</code> Specify an access rule for whitelisting IP addresses or networks. If the rule returns <code>allow</code> for a given IP address, that address will never be banned. The <code>AccessName</code> should be of type <code>ip</code>. The default value is <code>none</code>.</p> </li> <li> <p>c2s_auth_ban_lifetime: <code>timeout()</code> The lifetime of the IP ban caused by too many C2S authentication failures. The default value is <code>1</code> hour.</p> </li> <li> <p>c2s_max_auth_failures: <code>Number</code> The number of C2S authentication failures to trigger the IP ban. The default value is <code>20</code>.</p> </li> </ul> <p>API Tags: accounts</p>","boost":1},{"location":"admin/configuration/modules/#mod_host_meta","title":"mod_host_meta","text":"<p> added in 22.05</p> <p>This module serves small <code>host-meta</code> files as described in XEP-0156: Discovering Alternative XMPP Connection Methods.</p> <p>To use this module, in addition to adding it to the <code>modules</code> section, you must also enable it in <code>listen</code> \u2192 <code>ejabberd_http</code> \u2192 request_handlers.</p> <p>Notice it only works if ejabberd_http has tls enabled.</p> <p>Available options:</p> <ul> <li> <p>bosh_service_url: <code>undefined | auto | BoshURL</code> BOSH service URL to announce. The keyword <code>@HOST@</code> is replaced with the real virtual host name. If set to <code>auto</code>, it will build the URL of the first configured BOSH request handler. The default value is <code>auto</code>.</p> </li> <li> <p>websocket_url: <code>undefined | auto | WebSocketURL</code> WebSocket URL to announce. The keyword <code>@HOST@</code> is replaced with the real virtual host name. If set to <code>auto</code>, it will build the URL of the first configured WebSocket request handler. The default value is <code>auto</code>.</p> </li> </ul> <p>Example:</p> <pre><code>listen:\n  -\n    port: 443\n    module: ejabberd_http\n    tls: true\n    request_handlers:\n      /bosh: mod_bosh\n      /ws: ejabberd_http_ws\n      /.well-known/host-meta: mod_host_meta\n      /.well-known/host-meta.json: mod_host_meta\n\nmodules:\n  mod_bosh: {}\n  mod_host_meta:\n    bosh_service_url: \"https://@HOST@:5443/bosh\"\n    websocket_url: \"wss://@HOST@:5443/ws\"\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_http_api","title":"mod_http_api","text":"<p>This module provides a ReST interface to call ejabberd API commands using JSON data.</p> <p>To use this module, in addition to adding it to the <code>modules</code> section, you must also enable it in <code>listen</code> \u2192 <code>ejabberd_http</code> \u2192 request_handlers.</p> <p>To use a specific API version N, when defining the URL path in the request_handlers, add a vN. For example: <code>/api/v2: mod_http_api</code>.</p> <p>To run a command, send a POST request to the corresponding URL: <code>http://localhost:5280/api/COMMAND-NAME</code></p> <p>Available options:</p> <ul> <li>default_version: <code>integer() | string()</code> added in 24.12  What API version to use when none is specified in the URL path. If setting an ejabberd version, it will use the latest API version that was available in that ejabberd version. For example, setting <code>\"24.06\"</code> in this option implies <code>2</code>. The default value is the latest version.</li> </ul> <p>Example:</p> <pre><code>listen:\n  -\n    port: 5280\n    module: ejabberd_http\n    request_handlers:\n      /api: mod_http_api\n\nmodules:\n  mod_http_api:\n    default_version: 2\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_http_fileserver","title":"mod_http_fileserver","text":"<p>This simple module serves files from the local disk over HTTP.</p> <p>Available options:</p> <ul> <li> <p>accesslog: <code>Path</code> File to log accesses using an Apache-like format. No log will be recorded if this option is not specified.</p> </li> <li> <p>content_types: <code>{Extension: Type}</code> Specify mappings of extension to content type. There are several content types already defined. With this option you can add new definitions or modify existing ones. The default values are:</p> <p>Example:</p> <pre><code>content_types:\n  .css: text/css\n  .gif: image/gif\n  .html: text/html\n  .jar: application/java-archive\n  .jpeg: image/jpeg\n  .jpg: image/jpeg\n  .js: text/javascript\n  .png: image/png\n  .svg: image/svg+xml\n  .txt: text/plain\n  .xml: application/xml\n  .xpi: application/x-xpinstall\n  .xul: application/vnd.mozilla.xul+xml\n</code></pre> </li> <li> <p>custom_headers: <code>{Name: Value}</code> Indicate custom HTTP headers to be included in all responses. There are no custom headers by default.</p> </li> <li> <p>default_content_type: <code>Type</code> Specify the content type to use for unknown extensions. The default value is <code>application/octet-stream</code>.</p> </li> <li> <p>directory_indices: <code>[Index, ...]</code> Indicate one or more directory index files, similarly to Apache\u2019s <code>DirectoryIndex</code> variable. When an HTTP request hits a directory instead of a regular file, those directory indices are looked in order, and the first one found is returned. The default value is an empty list.</p> </li> <li> <p>docroot: <code>Path</code> Directory to serve the files from. This is a mandatory option.</p> </li> <li> <p>must_authenticate_with: <code>[{Username, Hostname}, ...]</code> List of accounts that are allowed to use this service. Default value: <code>[]</code>.</p> </li> </ul> <p>Examples:</p> <p>This example configuration will serve the files from the local directory <code>/var/www</code> in the address <code>http://example.org:5280/pub/content/</code>. In this example a new content type <code>ogg</code> is defined, <code>png</code> is redefined, and <code>jpg</code> definition is deleted:</p> <pre><code>listen:\n  -\n    port: 5280\n    module: ejabberd_http\n    request_handlers:\n      /pub/content: mod_http_fileserver\n\nmodules:\n  mod_http_fileserver:\n    docroot: /var/www\n    accesslog: /var/log/ejabberd/access.log\n    directory_indices:\n      - index.html\n      - main.htm\n    custom_headers:\n      X-Powered-By: Erlang/OTP\n      X-Fry: \"It's a widely-believed fact!\"\n    content_types:\n      .ogg: audio/ogg\n      .png: image/png\n    default_content_type: text/html\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_http_upload","title":"mod_http_upload","text":"<p>This module allows for requesting permissions to upload a file via HTTP as described in XEP-0363: HTTP File Upload. If the request is accepted, the client receives a URL for uploading the file and another URL from which that file can later be downloaded.</p> <p>In order to use this module, it must be enabled in <code>listen</code> \u2192 <code>ejabberd_http</code> \u2192 request_handlers.</p> <p>Available options:</p> <ul> <li> <p>access: <code>AccessName</code> This option defines the access rule to limit who is permitted to use the HTTP upload service. The default value is <code>local</code>. If no access rule of that name exists, no user will be allowed to use the service.</p> </li> <li> <p>custom_headers: <code>{Name: Value}</code> This option specifies additional header fields to be included in all HTTP responses. By default no custom headers are included.</p> </li> <li> <p>dir_mode: <code>Permission</code> This option defines the permission bits of the <code>docroot</code> directory and any directories created during file uploads. The bits are specified as an octal number (see the <code>chmod(1)</code> manual page) within double quotes. For example: <code>\"0755\"</code>. The default is undefined, which means no explicit permissions will be set.</p> </li> <li> <p>docroot: <code>Path</code> Uploaded files are stored below the directory specified (as an absolute path) with this option. The keyword <code>@HOME@</code> is replaced with the home directory of the user running ejabberd, and the keyword <code>@HOST@</code> with the virtual host name. The default value is <code>\"@HOME@/upload\"</code>.</p> </li> <li> <p>external_secret: <code>Text</code> This option makes it possible to offload all HTTP Upload processing to a separate HTTP server. Both ejabberd and the HTTP server should share this secret and behave exactly as described at Prosody\u2019s mod_http_upload_external: Implementation. There is no default value.</p> </li> <li> <p>file_mode: <code>Permission</code> This option defines the permission bits of uploaded files. The bits are specified as an octal number (see the <code>chmod(1)</code> manual page) within double quotes. For example: <code>\"0644\"</code>. The default is undefined, which means no explicit permissions will be set.</p> </li> <li> <p>get_url: <code>URL</code> This option specifies the initial part of the GET URLs used for downloading the files. The default value is <code>undefined</code>. When this option is <code>undefined</code>, this option is set to the same value as <code>put_url</code>. The keyword <code>@HOST@</code> is replaced with the virtual host name. NOTE: if GET requests are handled by this module, the <code>get_url</code> must match the <code>put_url</code>. Setting it to a different value only makes sense if an external web server or mod_http_fileserver is used to serve the uploaded files.</p> </li> <li> <p>host Deprecated. Use <code>hosts</code> instead.</p> </li> <li> <p>hosts: <code>[Host, ...]</code> This option defines the Jabber IDs of the service. If the <code>hosts</code> option is not specified, the only Jabber ID will be the hostname of the virtual host with the prefix <code>\"upload.\"</code>. The keyword <code>@HOST@</code> is replaced with the real virtual host name.</p> </li> <li> <p>jid_in_url: <code>node | sha1</code> When this option is set to <code>node</code>, the node identifier of the user\u2019s JID (i.e., the user name) is included in the GET and PUT URLs generated by <code>mod_http_upload</code>. Otherwise, a SHA-1 hash of the user\u2019s bare JID is included instead. The default value is <code>sha1</code>.</p> </li> <li> <p>max_size: <code>Size</code> This option limits the acceptable file size. Either a number of bytes (larger than zero) or <code>infinity</code> must be specified. The default value is <code>104857600</code>.</p> </li> <li> <p>name: <code>Name</code> A name of the service in the Service Discovery. The default value is <code>\"HTTP File Upload\"</code>. Please note this will only be displayed by some XMPP clients.</p> </li> <li> <p>put_url: <code>URL</code> This option specifies the initial part of the PUT URLs used for file uploads. The keyword <code>@HOST@</code> is replaced with the virtual host name. NOTE: different virtual hosts cannot use the same PUT URL. The default value is <code>\"https://@HOST@:5443/upload\"</code>.</p> </li> <li> <p>rm_on_unregister: <code>true | false</code> This option specifies whether files uploaded by a user should be removed when that user is unregistered. The default value is <code>true</code>.</p> </li> <li> <p>secret_length: <code>Length</code> This option defines the length of the random string included in the GET and PUT URLs generated by <code>mod_http_upload</code>. The minimum length is <code>8</code> characters, but it is recommended to choose a larger value. The default value is <code>40</code>.</p> </li> <li> <p>service_url Deprecated.</p> </li> <li> <p>thumbnail: <code>true | false</code> This option specifies whether ejabberd should create thumbnails of uploaded images. If a thumbnail is created, a &lt;thumbnail/&gt; element that contains the download &lt;uri/&gt; and some metadata is returned with the PUT response. The default value is <code>false</code>.</p> </li> <li> <p>vcard: <code>vCard</code> A custom vCard of the service that will be displayed by some XMPP clients in Service Discovery. The value of <code>vCard</code> is a YAML map constructed from an XML representation of vCard. Since the representation has no attributes, the mapping is straightforward.</p> <p>Example:</p> <pre><code># This XML representation of vCard:\n#   &lt;vCard xmlns='vcard-temp'&gt;\n#     &lt;FN&gt;Conferences&lt;/FN&gt;\n#     &lt;ADR&gt;\n#       &lt;WORK/&gt;\n#       &lt;STREET&gt;Elm Street&lt;/STREET&gt;\n#     &lt;/ADR&gt;\n#   &lt;/vCard&gt;\n#\n# is translated to:\nvcard:\n  fn: Conferences\n  adr:\n    -\n      work: true\n      street: Elm Street\n</code></pre> </li> </ul> <p>Example:</p> <pre><code>listen:\n  -\n    port: 5443\n    module: ejabberd_http\n    tls: true\n    request_handlers:\n      /upload: mod_http_upload\n\nmodules:\n  mod_http_upload:\n    docroot: /ejabberd/upload\n    put_url: \"https://@HOST@:5443/upload\"\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_http_upload_quota","title":"mod_http_upload_quota","text":"<p>This module adds quota support for mod_http_upload.</p> <p>This module depends on mod_http_upload.</p> <p>Available options:</p> <ul> <li> <p>access_hard_quota: <code>AccessName</code> This option defines which access rule is used to specify the \"hard quota\" for the matching JIDs. That rule must yield a positive number for any JID that is supposed to have a quota limit. This is the number of megabytes a corresponding user may upload. When this threshold is exceeded, ejabberd deletes the oldest files uploaded by that user until their disk usage equals or falls below the specified soft quota (see also option <code>access_soft_quota</code>). The default value is <code>hard_upload_quota</code>.</p> </li> <li> <p>access_soft_quota: <code>AccessName</code> This option defines which access rule is used to specify the \"soft quota\" for the matching JIDs. That rule must yield a positive number of megabytes for any JID that is supposed to have a quota limit. See the description of the <code>access_hard_quota</code> option for details. The default value is <code>soft_upload_quota</code>.</p> </li> <li> <p>max_days: <code>Days</code> If a number larger than zero is specified, any files (and directories) older than this number of days are removed from the subdirectories of the <code>docroot</code> directory, once per day. The default value is <code>infinity</code>.</p> </li> </ul> <p>Examples:</p> <p>Notice it\u2019s not necessary to specify the <code>access_hard_quota</code> and <code>access_soft_quota</code> options in order to use the quota feature. You can stick to the default names and just specify access rules such as those in this example:</p> <pre><code>shaper_rules:\n  soft_upload_quota:\n    1000: all # MiB\n  hard_upload_quota:\n    1100: all # MiB\n\nmodules:\n  mod_http_upload: {}\n  mod_http_upload_quota:\n    max_days: 100\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_jidprep","title":"mod_jidprep","text":"<p>This module allows XMPP clients to ask the server to normalize a JID as per the rules specified in RFC 6122: XMPP Address Format. This might be useful for clients in certain constrained environments, or for testing purposes.</p> <p>Available options:</p> <ul> <li>access: <code>AccessName</code> This option defines which access rule will be used to control who is allowed to use this service. The default value is <code>local</code>.</li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_last","title":"mod_last","text":"<p>This module adds support for XEP-0012: Last Activity. It can be used to discover when a disconnected user last accessed the server, to know when a connected user was last active on the server, or to query the uptime of the ejabberd server.</p> <p>Available options:</p> <ul> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed: <code>true | false</code> Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_legacy_auth","title":"mod_legacy_auth","text":"<p>The module implements XEP-0078: Non-SASL Authentication.</p> <p>Note</p> <p>This type of authentication was obsoleted in 2008 and you unlikely need this module unless you have something like outdated Jabber bots.</p> <p>The module has no options.</p>","boost":1},{"location":"admin/configuration/modules/#mod_mam","title":"mod_mam","text":"<p>This module implements XEP-0313: Message Archive Management and XEP-0441: Message Archive Management Preferences. Compatible XMPP clients can use it to store their chat history on the server.</p> <p>Note</p> <p>Mnesia backend for mod_mam is not recommended: it\u2019s limited to 2GB and often gets corrupted when reaching this limit. SQL backend is recommended. Namely, for small servers SQLite is a preferred choice because it\u2019s very easy to configure.</p> <p>Available options:</p> <ul> <li> <p>access_preferences: <code>AccessName</code> This access rule defines who is allowed to modify the MAM preferences. The default value is <code>all</code>.</p> </li> <li> <p>assume_mam_usage: <code>true | false</code> This option determines how ejabberd\u2019s stream management code (see mod_stream_mgmt) handles unacknowledged messages when the connection is lost. Usually, such messages are either bounced or resent. However, neither is done for messages that were stored in the user\u2019s MAM archive if this option is set to <code>true</code>. In this case, ejabberd assumes those messages will be retrieved from the archive. The default value is <code>false</code>.</p> </li> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed: <code>true | false</code> Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>clear_archive_on_room_destroy: <code>true | false</code> Whether to destroy message archive of a room (see mod_muc) when it gets destroyed. The default value is <code>true</code>.</p> </li> <li> <p>compress_xml: <code>true | false</code> When enabled, new messages added to archives are compressed using a custom compression algorithm. This feature works only with SQL backends. The default value is <code>false</code>.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>default: <code>always | never | roster</code> The option defines default policy for chat history. When <code>always</code> is set every chat message is stored. With <code>roster</code> only chat history with contacts from user\u2019s roster is stored. And <code>never</code> fully disables chat history. Note that a client can change its policy via protocol commands. The default value is <code>never</code>.</p> </li> <li> <p>request_activates_archiving: <code>true | false</code> If the value is <code>true</code>, no messages are stored for a user until their client issue a MAM request, regardless of the value of the <code>default</code> option. Once the server received a request, that user\u2019s messages are archived as usual. The default value is <code>false</code>.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> <li> <p>user_mucsub_from_muc_archive: <code>true | false</code> When this option is disabled, for each individual subscriber a separate mucsub message is stored. With this option enabled, when a user fetches archive virtual mucsub, messages are generated from muc archives. The default value is <code>false</code>.</p> </li> </ul> <p>API Tags: mam, purge</p>","boost":1},{"location":"admin/configuration/modules/#mod_matrix_gw","title":"mod_matrix_gw \ud83d\udfe4","text":"<p> improved in 25.07</p> <p>Matrix gateway. Erlang/OTP 25 or higher is required to use this module. This module is available since ejabberd 24.02.</p> <p>Available options:</p> <ul> <li> <p>host: <code>Host</code> This option defines the Jabber IDs of the service. If the <code>host</code> option is not specified, the Jabber ID will be the hostname of the virtual host with the prefix <code>\"matrix.\"</code>. The keyword <code>@HOST@</code> is replaced with the real virtual host name.</p> </li> <li> <p>key: <code>string()</code> Value of the matrix signing key, in base64.</p> </li> <li> <p>key_name: <code>string()</code> Name of the matrix signing key.</p> </li> <li> <p>matrix_domain: <code>Domain</code> Specify a domain in the Matrix federation. The keyword <code>@HOST@</code> is replaced with the hostname. The default value is <code>@HOST@</code>.</p> </li> <li> <p>matrix_id_as_jid: <code>true | false</code> If set to <code>true</code>, all packets failing to be delivered via an XMPP server-to-server connection will then be routed to the Matrix gateway by translating a Jabber ID <code>user@matrixdomain.tld</code> to a Matrix user identifier <code>@user:matrixdomain.tld</code>. When set to <code>false</code>, messages must be explicitly sent to the matrix gateway service Jabber ID to be routed to a remote Matrix server. In this case, to send a message to Matrix user <code>@user:matrixdomain.tld</code>, the client must send a message to the JID <code>user%&lt;matrixdomain.tld@matrix.myxmppdomain&gt;.tld</code>, where <code>matrix.myxmppdomain.tld</code> is the JID of the gateway service as set by the <code>host</code> option. The default is <code>false</code>.</p> </li> </ul> <p>Example:</p> <pre><code>listen:\n  -\n    port: 8448\n    module: ejabberd_http\n    tls: true\n    request_handlers:\n      \"/_matrix\": mod_matrix_gw\n\nmodules:\n  mod_matrix_gw:\n    key_name: \"key1\"\n    key: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n    matrix_id_as_jid: true\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_metrics","title":"mod_metrics","text":"<p>This module sends events to external backend (by now only grapherl is supported). Supported events are:</p> <ul> <li> <p>sm_register_connection</p> </li> <li> <p>sm_remove_connection</p> </li> <li> <p>user_send_packet</p> </li> <li> <p>user_receive_packet</p> </li> <li> <p>s2s_send_packet</p> </li> <li> <p>s2s_receive_packet</p> </li> <li> <p>register_user</p> </li> <li> <p>remove_user</p> </li> <li> <p>offline_message</p> </li> </ul> <p>When enabled, every call to these hooks triggers a counter event to be sent to the external backend.</p> <p>Available options:</p> <ul> <li> <p>ip: <code>IPv4Address</code> IPv4 address where the backend is located. The default value is <code>127.0.0.1</code>.</p> </li> <li> <p>port: <code>Port</code> An internet port number at which the backend is listening for incoming connections/packets. The default value is <code>11111</code>.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_mix","title":"mod_mix","text":"<p> added in 16.03 and improved in 19.02</p> <p>This module is an experimental implementation of XEP-0369: Mediated Information eXchange (MIX). It\u2019s asserted that the MIX protocol is going to replace the MUC protocol in the future (see mod_muc).</p> <p>To learn more about how to use that feature, you can refer to our tutorial: Getting started with MIX</p> <p>The module depends on mod_mam.</p> <p>Available options:</p> <ul> <li> <p>access_create: <code>AccessName</code> An access rule to control MIX channels creations. The default value is <code>all</code>.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>host Deprecated. Use <code>hosts</code> instead.</p> </li> <li> <p>hosts: <code>[Host, ...]</code> This option defines the Jabber IDs of the service. If the <code>hosts</code> option is not specified, the only Jabber ID will be the hostname of the virtual host with the prefix <code>\"mix.\"</code>. The keyword <code>@HOST@</code> is replaced with the real virtual host name.</p> </li> <li> <p>name: <code>Name</code> A name of the service in the Service Discovery. This will only be displayed by special XMPP clients. The default value is <code>Channels</code>.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_mix_pam","title":"mod_mix_pam","text":"<p>This module implements XEP-0405: Mediated Information eXchange (MIX): Participant Server Requirements. The module is needed if MIX compatible clients on your server are going to join MIX channels (either on your server or on any remote servers).</p> <p>Note</p> <p>mod_mix is not required for this module to work, however, without <code>mod_mix_pam</code> the MIX functionality of your local XMPP clients will be impaired.</p> <p>Available options:</p> <ul> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed: <code>true | false</code> Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_mqtt","title":"mod_mqtt","text":"<p>This module adds support for the MQTT protocol version <code>3.1.1</code> and <code>5.0</code>. Remember to configure <code>mod_mqtt</code> in <code>modules</code> and <code>listen</code> sections.</p> <p>Available options:</p> <ul> <li> <p>access_publish: <code>{TopicFilter: AccessName}</code> Access rules to restrict access to topics for publishers. By default there are no restrictions.</p> </li> <li> <p>access_subscribe: <code>{TopicFilter: AccessName}</code> Access rules to restrict access to topics for subscribers. By default there are no restrictions.</p> </li> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed: <code>true | false</code> Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>match_retained_limit: <code>pos_integer() | infinity</code> The option limits the number of retained messages returned to a client when it subscribes to some topic filter. The default value is <code>1000</code>.</p> </li> <li> <p>max_queue: <code>Size</code> Maximum queue size for outgoing packets. The default value is <code>5000</code>.</p> </li> <li> <p>max_topic_aliases: <code>0..65535</code> The maximum number of aliases a client is able to associate with the topics. The default value is <code>100</code>.</p> </li> <li> <p>max_topic_depth: <code>Depth</code> The maximum topic depth, i.e. the number of slashes (<code>/</code>) in the topic. The default value is <code>8</code>.</p> </li> <li> <p>queue_type: <code>ram | file</code> Same as top-level queue_type option, but applied to this module only.</p> </li> <li> <p>ram_db_type: <code>mnesia</code> Same as top-level default_ram_db option, but applied to this module only.</p> </li> <li> <p>session_expiry: <code>timeout()</code> The option specifies how long to wait for an MQTT session resumption. When <code>0</code> is set, the session gets destroyed when the underlying client connection is closed. The default value is <code>5</code> minutes.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_mqtt_bridge","title":"mod_mqtt_bridge","text":"<p>This module adds ability to synchronize local MQTT topics with data on remote servers It can update topics on remote servers when local user updates local topic, or can subscribe for changes on remote server, and update local copy when remote data is updated. It is available since ejabberd 23.01.</p> <p>Available options:</p> <ul> <li> <p>replication_user: <code>JID</code> Identifier of a user that will be assigned as owner of local changes.</p> </li> <li> <p>servers: <code>{ServerUrl: {Key: Value}}</code> Declaration of data to share for each ServerUrl. Server URLs can use schemas: <code>mqtt</code>, <code>mqtts</code> (mqtt with tls), <code>mqtt5</code>, <code>mqtt5s</code> (both to trigger v5 protocol), <code>ws</code>, <code>wss</code>, <code>ws5</code>, <code>wss5</code>. Keys must be:</p> <ul> <li> <p>authentication: <code>{AuthKey: AuthValue}</code>    List of authentication information, where AuthKey can be: <code>username</code> and <code>password</code> fields, or <code>certfile</code> pointing to client certificate. Certificate authentication can be used only with mqtts, mqtt5s, wss, wss5.</p> </li> <li> <p>publish: <code>{LocalTopic: RemoteTopic}</code>    Either publish or subscribe must be set, or both.</p> </li> <li> <p>subscribe: <code>{RemoteTopic: LocalTopic}</code>    Either publish or subscribe must be set, or both.</p> </li> </ul> </li> </ul> <p>Example:</p> <pre><code>modules:\n  mod_mqtt_bridge:\n    replication_user: \"mqtt@xmpp.server.com\"\n    servers:\n      \"mqtt://server.com\":\n        authentication:\n          certfile: \"/etc/ejabberd/mqtt_server.pem\"\n        publish:\n          \"localA\": \"remoteA\" # local changes to 'localA' will be replicated on remote server as 'remoteA'\n          \"topicB\": \"topicB\"\n        subscribe:\n          \"remoteB\": \"localB\" # changes to 'remoteB' on remote server will be stored as 'localB' on local server\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_muc","title":"mod_muc","text":"<p>This module provides support for XEP-0045: Multi-User Chat. Users can discover existing rooms, join or create them. Occupants of a room can chat in public or have private chats.</p> <p>The MUC service allows any Jabber ID to register a nickname, so nobody else can use that nickname in any room in the MUC service. To register a nickname, open the Service Discovery in your XMPP client and register in the MUC service.</p> <p>It is also possible to register a nickname in a room, so nobody else can use that nickname in that room. If a nick is registered in the MUC service, that nick cannot be registered in any room, and vice versa: a nick that is registered in a room cannot be registered at the MUC service.</p> <p>This module supports clustering and load balancing. One module can be started per cluster node. Rooms are distributed at creation time on all available MUC module instances. The multi-user chat module is clustered but the rooms themselves are not clustered nor fault-tolerant: if the node managing a set of rooms goes down, the rooms disappear and they will be recreated on an available node on first connection attempt.</p> <p>Available options:</p> <ul> <li> <p>access: <code>AccessName</code> You can specify who is allowed to use the Multi-User Chat service. By default everyone is allowed to use it.</p> </li> <li> <p>access_admin: <code>AccessName</code> This option specifies who is allowed to administrate the Multi-User Chat service. The default value is <code>none</code>, which means that only the room creator can administer their room. The administrators can send a normal message to the service JID, and it will be shown in all active rooms as a service message. The administrators can send a groupchat message to the JID of an active room, and the message will be shown in the room as a service message.</p> </li> <li> <p>access_create: <code>AccessName</code> To configure who is allowed to create new rooms at the Multi-User Chat service, this option can be used. The default value is <code>all</code>, which means everyone is allowed to create rooms.</p> </li> <li> <p>access_mam: <code>AccessName</code> To configure who is allowed to modify the <code>mam</code> room option. The default value is <code>all</code>, which means everyone is allowed to modify that option.</p> </li> <li> <p>access_persistent: <code>AccessName</code> To configure who is allowed to modify the <code>persistent</code> room option. The default value is <code>all</code>, which means everyone is allowed to modify that option.</p> </li> <li> <p>access_register: <code>AccessName</code> improved in 23.10  This option specifies who is allowed to register nickname within the Multi-User Chat service and rooms. The default is <code>all</code> for backward compatibility, which means that any user is allowed to register any free nick in the MUC service and in the rooms.</p> </li> <li> <p>cleanup_affiliations_on_start: <code>true | false</code> added in 22.05  Remove affiliations for non-existing local users on startup. The default value is <code>false</code>.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>default_room_options: <code>Options</code> Define the default room options. Note that the creator of a room can modify the options of his room at any time using an XMPP client with MUC capability. The <code>Options</code> are:</p> <ul> <li> <p>allow_change_subj: <code>true | false</code>    Allow occupants to change the subject. The default value is <code>true</code>.</p> </li> <li> <p>allow_private_messages_from_visitors: anyone | moderators | nobody Visitors can send private messages to other occupants. The default value is <code>anyone</code> which means visitors can send private messages to any occupant.</p> </li> <li> <p>allow_query_users: <code>true | false</code>    Occupants can send IQ queries to other occupants. The default value is <code>true</code>.</p> </li> <li> <p>allow_subscription: <code>true | false</code>    Allow users to subscribe to room events as described in Multi-User Chat Subscriptions. The default value is <code>false</code>.</p> </li> <li> <p>allow_user_invites: <code>true | false</code>    Allow occupants to send invitations. The default value is <code>false</code>.</p> </li> <li> <p>allow_visitor_nickchange: <code>true | false</code>    Allow visitors to change nickname. The default value is <code>true</code>.</p> </li> <li> <p>allow_visitor_status: <code>true | false</code>    Allow visitors to send status text in presence updates. If disallowed, the status text is stripped before broadcasting the presence update to all the room occupants. The default value is <code>true</code>.</p> </li> <li> <p>allow_voice_requests: <code>true | false</code>    Allow visitors in a moderated room to request voice. The default value is <code>true</code>.</p> </li> <li> <p>allowpm: <code>anyone | participants | moderators | none</code>    Who can send private messages. The default value is <code>anyone</code>.</p> </li> <li> <p>anonymous: <code>true | false</code>    The room is anonymous: occupants don\u2019t see the real JIDs of other occupants. Note that the room moderators can always see the real JIDs of the occupants. The default value is <code>true</code>.</p> </li> <li> <p>captcha_protected: <code>true | false</code>    When a user tries to join a room where they have no affiliation (not owner, admin or member), the room requires them to fill a CAPTCHA challenge (see section CAPTCHA in order to accept their join in the room. The default value is <code>false</code>.</p> </li> <li> <p>description: <code>Room Description</code>    Short description of the room. The default value is an empty string.</p> </li> <li> <p>enable_hats: <code>true | false</code> <code>Note</code> about this option: improved in 25.03. Allow extended roles as defined in XEP-0317 Hats. Check the MUC Hats tutorial. The default value is <code>false</code>.</p> </li> <li> <p>lang: <code>Language</code>    Preferred language for the discussions in the room. The language format should conform to RFC 5646. There is no value by default.</p> </li> <li> <p>logging: <code>true | false</code>    The public messages are logged using mod_muc_log. The default value is <code>false</code>.</p> </li> <li> <p>mam: <code>true | false</code>    Enable message archiving. Implies mod_mam is enabled. The default value is <code>false</code>.</p> </li> <li> <p>max_users: <code>Number</code>    Maximum number of occupants in the room. The default value is <code>200</code>.</p> </li> <li> <p>members_by_default: <code>true | false</code>    The occupants that enter the room are participants by default, so they have \"voice\". The default value is <code>true</code>.</p> </li> <li> <p>members_only: <code>true | false</code>    Only members of the room can enter. The default value is <code>false</code>.</p> </li> <li> <p>moderated: <code>true | false</code>    Only occupants with \"voice\" can send public messages. The default value is <code>true</code>.</p> </li> <li> <p>password: <code>Password</code>    Password of the room. Implies option <code>password_protected</code> set to <code>true</code>. There is no default value.</p> </li> <li> <p>password_protected: <code>true | false</code>    The password is required to enter the room. The default value is <code>false</code>.</p> </li> <li> <p>persistent: <code>true | false</code>    The room persists even if the last participant leaves. The default value is <code>false</code>.</p> </li> <li> <p>presence_broadcast: <code>[Role]</code>    List of roles for which presence is broadcasted. The list can contain one or several of: <code>moderator</code>, <code>participant</code>, <code>visitor</code>. The default value is shown in the example below:</p> <p>Example:</p> <pre><code>presence_broadcast:\n  - moderator\n  - participant\n  - visitor\n</code></pre> </li> <li> <p>public: <code>true | false</code>    The room is public in the list of the MUC service, so it can be discovered. MUC admins and room participants will see private rooms in Service Discovery if their XMPP client supports this feature. The default value is <code>true</code>.</p> </li> <li> <p>public_list: <code>true | false</code>    The list of participants is public, without requiring to enter the room. The default value is <code>true</code>.</p> </li> <li> <p>pubsub: <code>PubSub Node</code>    XMPP URI of associated Publish/Subscribe node. The default value is an empty string.</p> </li> <li> <p>title: <code>Room Title</code>    A human-readable title of the room. There is no default value</p> </li> <li> <p>vcard: <code>vCard</code>    A custom vCard for the room. See the equivalent mod_muc option.The default value is an empty string.</p> </li> <li> <p>vcard_xupdate: <code>undefined | external | AvatarHash</code>    Set the hash of the avatar image. The default value is <code>undefined</code>.</p> </li> <li> <p>voice_request_min_interval: <code>Number</code>    Minimum interval between voice requests, in seconds. The default value is <code>1800</code>.</p> </li> </ul> </li> <li> <p>hibernation_timeout: <code>infinity | Seconds</code> Timeout before hibernating the room process, expressed in seconds. The default value is <code>infinity</code>.</p> </li> <li> <p>history_size: <code>Size</code> A small history of the current discussion is sent to users when they enter the room. With this option you can define the number of history messages to keep and send to users joining the room. The value is a non-negative integer. Setting the value to <code>0</code> disables the history feature and, as a result, nothing is kept in memory. The default value is <code>20</code>. This value affects all rooms on the service. NOTE: modern XMPP clients rely on Message Archives (XEP-0313), so feel free to disable the history feature if you\u2019re only using modern clients and have mod_mam module loaded.</p> </li> <li> <p>host Deprecated. Use <code>hosts</code> instead.</p> </li> <li> <p>hosts: <code>[Host, ...]</code> This option defines the Jabber IDs of the service. If the <code>hosts</code> option is not specified, the only Jabber ID will be the hostname of the virtual host with the prefix \"conference.\". The keyword <code>@HOST@</code> is replaced with the real virtual host name.</p> </li> <li> <p>max_captcha_whitelist: <code>Number</code> added in 21.01  This option defines the maximum number of characters that Captcha Whitelist can have when configuring the room. The default value is <code>infinity</code>.</p> </li> <li> <p>max_password: <code>Number</code> added in 21.01  This option defines the maximum number of characters that Password can have when configuring the room. The default value is <code>infinity</code>.</p> </li> <li> <p>max_room_desc: <code>Number</code> This option defines the maximum number of characters that Room Description can have when configuring the room. The default value is <code>infinity</code>.</p> </li> <li> <p>max_room_id: <code>Number</code> This option defines the maximum number of characters that Room ID can have when creating a new room. The default value is <code>infinity</code>.</p> </li> <li> <p>max_room_name: <code>Number</code> This option defines the maximum number of characters that Room Name can have when configuring the room. The default value is <code>infinity</code>.</p> </li> <li> <p>max_rooms_discoitems: <code>Number</code> When there are more rooms than this <code>Number</code>, only the non-empty ones are returned in a Service Discovery query. The default value is <code>100</code>.</p> </li> <li> <p>max_user_conferences: <code>Number</code> This option defines the maximum number of rooms that any given user can join. The default value is <code>100</code>. This option is used to prevent possible abuses. Note that this is a soft limit: some users can sometimes join more conferences in cluster configurations.</p> </li> <li> <p>max_users: <code>Number</code> This option defines at the service level, the maximum number of users allowed per room. It can be lowered in each room configuration but cannot be increased in individual room configuration. The default value is <code>200</code>.</p> </li> <li> <p>max_users_admin_threshold: <code>Number</code> This option defines the number of service admins or room owners allowed to enter the room when the maximum number of allowed occupants was reached. The default limit is <code>5</code>.</p> </li> <li> <p>max_users_presence: <code>Number</code> This option defines after how many users in the room, it is considered overcrowded. When a MUC room is considered overcrowded, presence broadcasts are limited to reduce load, traffic and excessive presence \"storm\" received by participants. The default value is <code>1000</code>.</p> </li> <li> <p>min_message_interval: <code>Number</code> This option defines the minimum interval between two messages send by an occupant in seconds. This option is global and valid for all rooms. A decimal value can be used. When this option is not defined, message rate is not limited. This feature can be used to protect a MUC service from occupant abuses and limit number of messages that will be broadcasted by the service. A good value for this minimum message interval is <code>0.4</code> second. If an occupant tries to send messages faster, an error is send back explaining that the message has been discarded and describing the reason why the message is not acceptable.</p> </li> <li> <p>min_presence_interval: <code>Number</code> This option defines the minimum of time between presence changes coming from a given occupant in seconds. This option is global and valid for all rooms. A decimal value can be used. When this option is not defined, no restriction is applied. This option can be used to protect a MUC service for occupants abuses. If an occupant tries to change its presence more often than the specified interval, the presence is cached by ejabberd and only the last presence is broadcasted to all occupants in the room after expiration of the interval delay. Intermediate presence packets are silently discarded. A good value for this option is <code>4</code> seconds.</p> </li> <li> <p>name: <code>string()</code> The value of the service name. This name is only visible in some clients that support XEP-0030: Service Discovery. The default is <code>Chatrooms</code>.</p> </li> <li> <p>preload_rooms: <code>true | false</code> Whether to load all persistent rooms in memory on startup. If disabled, the room is only loaded on first participant join. The default is <code>true</code>. It makes sense to disable room preloading when the number of rooms is high: this will improve server startup time and memory consumption.</p> </li> <li> <p>queue_type: <code>ram | file</code> Same as top-level queue_type option, but applied to this module only.</p> </li> <li> <p>ram_db_type: <code>mnesia | sql</code> Same as top-level default_ram_db option, but applied to this module only.</p> </li> <li> <p>regexp_room_id: <code>string()</code> This option defines the regular expression that a Room ID must satisfy to allow the room creation. The default value is the empty string.</p> </li> <li> <p>room_shaper: <code>none | ShaperName</code> This option defines shaper for the MUC rooms. The default value is <code>none</code>.</p> </li> <li> <p>user_message_shaper: <code>none | ShaperName</code> This option defines shaper for the users messages. The default value is <code>none</code>.</p> </li> <li> <p>user_presence_shaper: <code>none | ShaperName</code> This option defines shaper for the users presences. The default value is <code>none</code>.</p> </li> <li> <p>vcard: <code>vCard</code> A custom vCard of the service that will be displayed by some XMPP clients in Service Discovery. The value of <code>vCard</code> is a YAML map constructed from an XML representation of vCard. Since the representation has no attributes, the mapping is straightforward.</p> <p>Example:</p> <pre><code># This XML representation of vCard:\n#   &lt;vCard xmlns='vcard-temp'&gt;\n#     &lt;FN&gt;Conferences&lt;/FN&gt;\n#     &lt;ADR&gt;\n#       &lt;WORK/&gt;\n#       &lt;STREET&gt;Elm Street&lt;/STREET&gt;\n#     &lt;/ADR&gt;\n#   &lt;/vCard&gt;\n#\n# is translated to:\nvcard:\n  fn: Conferences\n  adr:\n    -\n      work: true\n      street: Elm Street\n</code></pre> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_muc_admin","title":"mod_muc_admin","text":"<p>This module provides commands to administer local MUC services and their MUC rooms. It also provides simple WebAdmin pages to view the existing rooms.</p> <p>This module depends on mod_muc.</p> <p>Available options:</p> <ul> <li>subscribe_room_many_max_users: <code>Number</code> added in 22.05  How many users can be subscribed to a room at once using the subscribe_room_many API. The default value is <code>50</code>.</li> </ul> <p>API Tags: muc, muc_room, muc_sub</p>","boost":1},{"location":"admin/configuration/modules/#mod_muc_log","title":"mod_muc_log","text":"<p>This module enables optional logging of Multi-User Chat (MUC) public conversations to HTML. Once you enable this module, users can join a room using a MUC capable XMPP client, and if they have enough privileges, they can request the configuration form in which they can set the option to enable room logging.</p> <p>Features:</p> <ul> <li> <p>Room details are added on top of each page: room title, JID, author,     subject and configuration.</p> </li> <li> <p>The room JID in the generated HTML is a link to join the room (using     XMPP URI).</p> </li> <li> <p>Subject and room configuration changes are tracked and displayed.</p> </li> <li> <p>Joins, leaves, nick changes, kicks, bans and <code>/me</code> are tracked and     displayed, including the reason if available.</p> </li> <li> <p>Generated HTML files are XHTML 1.0 Transitional and CSS compliant.</p> </li> <li> <p>Timestamps are self-referencing links.</p> </li> <li> <p>Links on top for quicker navigation: Previous day, Next day, Up.</p> </li> <li> <p>CSS is used for style definition, and a custom CSS file can be used.</p> </li> <li> <p>URLs on messages and subjects are converted to hyperlinks.</p> </li> <li> <p>Timezone used on timestamps is shown on the log files.</p> </li> <li> <p>A custom link can be added on top of each page.</p> </li> </ul> <p>The module depends on mod_muc.</p> <p>Available options:</p> <ul> <li> <p>access_log: <code>AccessName</code> This option restricts which occupants are allowed to enable or disable room logging. The default value is <code>muc_admin</code>. NOTE: for this default setting you need to have an access rule for <code>muc_admin</code> in order to take effect.</p> </li> <li> <p>cssfile: <code>Path | URL</code> With this option you can set whether the HTML files should have a custom CSS file or if they need to use the embedded CSS. Allowed values are either <code>Path</code> to local file or an <code>URL</code> to a remote file. By default a predefined CSS will be embedded into the HTML page.</p> </li> <li> <p>dirname: <code>room_jid | room_name</code> Configure the name of the room directory. If set to <code>room_jid</code>, the room directory name will be the full room JID. Otherwise, the room directory name will be only the room name, not including the MUC service name. The default value is <code>room_jid</code>.</p> </li> <li> <p>dirtype: <code>subdirs | plain</code> The type of the created directories can be specified with this option. If set to <code>subdirs</code>, subdirectories are created for each year and month. Otherwise, the names of the log files contain the full date, and there are no subdirectories. The default value is <code>subdirs</code>.</p> </li> <li> <p>file_format: <code>html | plaintext</code> Define the format of the log files: <code>html</code> stores in HTML format, <code>plaintext</code> stores in plain text. The default value is <code>html</code>.</p> </li> <li> <p>file_permissions: <code>{mode: Mode, group: Group}</code> Define the permissions that must be used when creating the log files: the number of the mode, and the numeric id of the group that will own the files. The default value is shown in the example below:</p> <p>Example:</p> <pre><code>file_permissions:\n  mode: 644\n  group: 33\n</code></pre> </li> <li> <p>outdir: <code>Path</code> This option sets the full path to the directory in which the HTML files should be stored. Make sure the ejabberd daemon user has write access on that directory. The default value is <code>www/muc</code>.</p> </li> <li> <p>spam_prevention: <code>true | false</code> If set to <code>true</code>, a special attribute is added to links that prevent their indexation by search engines. The default value is <code>true</code>, which mean that <code>nofollow</code> attributes will be added to user submitted links.</p> </li> <li> <p>timezone: <code>local | universal</code> The time zone for the logs is configurable with this option. If set to <code>local</code>, the local time, as reported to Erlang emulator by the operating system, will be used. Otherwise, UTC time will be used. The default value is <code>local</code>.</p> </li> <li> <p>top_link: <code>{URL: Text}</code> With this option you can customize the link on the top right corner of each log file. The default value is shown in the example below:</p> <p>Example:</p> <pre><code>top_link:\n  /: Home\n</code></pre> </li> <li> <p>url: <code>URL</code> A top level <code>URL</code> where a client can access logs of a particular conference. The conference name is appended to the URL if <code>dirname</code> option is set to <code>room_name</code> or a conference JID is appended to the <code>URL</code> otherwise. There is no default value.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_muc_occupantid","title":"mod_muc_occupantid","text":"<p> added in 23.10</p> <p>This module implements XEP-0421: Anonymous unique occupant identifiers for MUCs.</p> <p>When the module is enabled, the feature is enabled in all semi-anonymous rooms.</p> <p>The module has no options.</p>","boost":1},{"location":"admin/configuration/modules/#mod_muc_rtbl","title":"mod_muc_rtbl","text":"<p> added in 23.04</p> <p>This module implement Real-time blocklists for MUC rooms.</p> <p>It works by observing remote pubsub node conforming with specification described in https://xmppbl.org/.</p> <p>Available options:</p> <ul> <li> <p>rtbl_node: <code>PubsubNodeName</code> Name of pubsub node that should be used to track blocked users. The default value is <code>muc_bans_sha256</code>.</p> </li> <li> <p>rtbl_server: <code>Domain</code> Domain of xmpp server that serves block list. The default value is <code>xmppbl.org</code></p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_multicast","title":"mod_multicast","text":"<p>This module implements a service for XEP-0033: Extended Stanza Addressing.</p> <p>Available options:</p> <ul> <li> <p>access: <code>Access</code> The access rule to restrict who can send packets to the multicast service. Default value: <code>all</code>.</p> </li> <li> <p>host Deprecated. Use <code>hosts</code> instead.</p> </li> <li> <p>hosts: <code>[Host, ...]</code> This option defines the Jabber IDs of the service. If the <code>hosts</code> option is not specified, the only Jabber ID will be the hostname of the virtual host with the prefix \"multicast.\". The keyword <code>@HOST@</code> is replaced with the real virtual host name. The default value is <code>multicast.@HOST@</code>.</p> </li> <li> <p>limits: <code>Sender: Stanza: Number</code> Specify a list of custom limits which override the default ones defined in XEP-0033. Limits are defined per sender type and stanza type, where:</p> <ul> <li> <p><code>sender</code> can be: <code>local</code> or <code>remote</code>.</p> </li> <li> <p><code>stanza</code> can be: <code>message</code> or <code>presence</code>.</p> </li> <li> <p><code>number</code> can be a positive integer or <code>infinite</code>.</p> <p>Example:</p> <pre><code># Default values:\nlocal:\n  message: 100\n  presence: 100\nremote:\n  message: 20\n  presence: 20\n</code></pre> </li> </ul> </li> <li> <p>name Service name to provide in the Info query to the Service Discovery. Default is <code>\"Multicast\"</code>.</p> </li> <li> <p>vcard vCard element to return when queried. Default value is <code>undefined</code>.</p> </li> </ul> <p>Example:</p> <pre><code># Only admins can send packets to multicast service\naccess_rules:\n  multicast:\n    - allow: admin\n\n# If you want to allow all your users:\naccess_rules:\n  multicast:\n    - allow\n\n# This allows both admins and remote users to send packets,\n# but does not allow local users\nacl:\n  allservers:\n    server_glob: \"*\"\naccess_rules:\n  multicast:\n    - allow: admin\n    - deny: local\n    - allow: allservers\n\nmodules:\n  mod_multicast:\n     host: multicast.example.org\n     access: multicast\n     limits:\n       local:\n         message: 40\n         presence: infinite\n       remote:\n         message: 150\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_offline","title":"mod_offline","text":"<p>This module implements XEP-0160: Best Practices for Handling Offline Messages and XEP-0013: Flexible Offline Message Retrieval. This means that all messages sent to an offline user will be stored on the server until that user comes online again. Thus it is very similar to how email works. A user is considered offline if no session presence priority &gt; 0 are currently open.</p> <p>The delete_expired_messages API allows to delete expired messages, and delete_old_messages API deletes older ones.</p> <p>Available options:</p> <ul> <li> <p>access_max_user_messages: <code>AccessName</code> This option defines which access rule will be enforced to limit the maximum number of offline messages that a user can have (quota). When a user has too many offline messages, any new messages that they receive are discarded, and a &lt;resource-constraint/&gt; error is returned to the sender. The default value is <code>max_user_offline_messages</code>.</p> </li> <li> <p>bounce_groupchat: <code>true | false</code> This option is use the disable an optimization that avoids bouncing error messages when groupchat messages could not be stored as offline. It will reduce chat room load, without any drawback in standard use cases. You may change default value only if you have a custom module which uses offline hook after <code>mod_offline</code>. This option can be useful for both standard MUC and MucSub, but the bounce is much more likely to happen in the context of MucSub, so it is even more important to have it on large MucSub services. The default value is <code>false</code>, meaning the optimization is enabled.</p> </li> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>store_empty_body: <code>true | false | unless_chat_state</code> Whether or not to store messages that lack a &lt;body/&gt; element. The default value is <code>unless_chat_state</code>, which tells ejabberd to store messages even if they lack the &lt;body/&gt; element, unless they only contain a chat state notification (as defined in XEP-0085: Chat State Notifications.</p> </li> <li> <p>store_groupchat: <code>true | false</code> Whether or not to store groupchat messages. The default value is <code>false</code>.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> <li> <p>use_mam_for_storage: <code>true | false</code> This is an experimental option. By enabling the option, this module uses the <code>archive</code> table from mod_mam instead of its own spool table to retrieve the messages received when the user was offline. This allows client developers to slowly drop XEP-0160 and rely on XEP-0313 instead. It also further reduces the storage required when you enable MucSub. Enabling this option has a known drawback for the moment: most of flexible message retrieval queries don\u2019t work (those that allow retrieval/deletion of messages by id), but this specification is not widely used. The default value is <code>false</code> to keep former behaviour as default.</p> </li> </ul> <p>Examples:</p> <p>This example allows power users to have as much as 5000 offline messages, administrators up to 2000, and all the other users up to 100:</p> <pre><code>acl:\n  admin:\n    user:\n      - admin1@localhost\n      - admin2@example.org\n  poweruser:\n    user:\n      - bob@example.org\n      - jane@example.org\n\nshaper_rules:\n  max_user_offline_messages:\n    - 5000: poweruser\n    - 2000: admin\n    - 100\n\nmodules:\n  ...\n  mod_offline:\n    access_max_user_messages: max_user_offline_messages\n  ...\n</code></pre> <p>API Tags: offline</p>","boost":1},{"location":"admin/configuration/modules/#mod_ping","title":"mod_ping","text":"<p>This module implements support for XEP-0199: XMPP Ping and periodic keepalives. When this module is enabled ejabberd responds correctly to ping requests, as defined by the protocol.</p> <p>Available options:</p> <ul> <li> <p>ping_ack_timeout: <code>timeout()</code> How long to wait before deeming that a client has not answered a given server ping request. NOTE: when mod_stream_mgmt is loaded and stream management is enabled by a client, this value is ignored, and the <code>ack_timeout</code> applies instead. The default value is <code>undefined</code>.</p> </li> <li> <p>ping_interval: <code>timeout()</code> How often to send pings to connected clients, if option <code>send_pings</code> is set to <code>true</code>. If a client connection does not send or receive any stanza within this interval, a ping request is sent to the client. The default value is <code>1</code> minute.</p> </li> <li> <p>send_pings: <code>true | false</code> If this option is set to <code>true</code>, the server sends pings to connected clients that are not active in a given interval defined in <code>ping_interval</code> option. This is useful to keep client connections alive or checking availability. The default value is <code>false</code>.</p> </li> <li> <p>timeout_action: <code>none | kill</code> What to do when a client does not answer to a server ping request in less than period defined in <code>ping_ack_timeout</code> option: <code>kill</code> means destroying the underlying connection, <code>none</code> means to do nothing. NOTE: when mod_stream_mgmt is loaded and stream management is enabled by a client, killing the client connection doesn\u2019t mean killing the client session - the session will be kept alive in order to give the client a chance to resume it. The default value is <code>none</code>.</p> </li> </ul> <p>Example:</p> <pre><code>modules:\n  mod_ping:\n    send_pings: true\n    ping_interval: 4 min\n    timeout_action: kill\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_pres_counter","title":"mod_pres_counter","text":"<p>This module detects flood/spam in presence subscriptions traffic. If a user sends or receives more of those stanzas in a given time interval, the exceeding stanzas are silently dropped, and a warning is logged.</p> <p>Available options:</p> <ul> <li> <p>count: <code>Number</code> The number of subscription presence stanzas (subscribe, unsubscribe, subscribed, unsubscribed) allowed for any direction (input or output) per time defined in <code>interval</code> option. Please note that two users subscribing to each other usually generate 4 stanzas, so the recommended value is <code>4</code> or more. The default value is <code>5</code>.</p> </li> <li> <p>interval: <code>timeout()</code> The time interval. The default value is <code>1</code> minute.</p> </li> </ul> <p>Example:</p> <pre><code>modules:\n  mod_pres_counter:\n    count: 5\n    interval: 30 secs\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_privacy","title":"mod_privacy","text":"<p>This module implements XEP-0016: Privacy Lists.</p> <p>Note</p> <p>Nowadays modern XMPP clients rely on XEP-0191: Blocking Command which is implemented by mod_blocking. However, you still need <code>mod_privacy</code> loaded in order for <code>mod_blocking</code> to work.</p> <p>Available options:</p> <ul> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed: <code>true | false</code> Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_private","title":"mod_private","text":"<p>This module adds support for XEP-0049: Private XML Storage.</p> <p>Using this method, XMPP entities can store private data on the server, retrieve it whenever necessary and share it between multiple connected clients of the same user. The data stored might be anything, as long as it is a valid XML. One typical usage is storing a bookmark of all user\u2019s conferences (XEP-0048: Bookmarks).</p> <p>It also implements the bookmark conversion described in XEP-0402: PEP Native Bookmarks, see bookmarks_to_pep API.</p> <p>Available options:</p> <ul> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed: <code>true | false</code> Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> </ul> <p>API Tags: private</p>","boost":1},{"location":"admin/configuration/modules/#mod_privilege","title":"mod_privilege","text":"<p> improved in 24.10</p> <p>This module is an implementation of XEP-0356: Privileged Entity. This extension allows components to have privileged access to other entity data (send messages on behalf of the server or on behalf of a user, get/set user roster, access presence information, etc.). This may be used to write powerful external components, for example implementing an external PEP or MAM service.</p> <p>By default a component does not have any privileged access. It is worth noting that the permissions grant access to the component to a specific data type for all users of the virtual host on which <code>mod_privilege</code> is loaded.</p> <p>Make sure you have a listener configured to connect your component. Check the section about listening ports for more information.</p> <p>Warning</p> <p>Security issue: Privileged access gives components access to sensitive data, so permission should be granted carefully, only if you trust a component.</p> <p>Note</p> <p>This module is complementary to mod_delegation, but can also be used separately.</p> <p>Available options:</p> <ul> <li> <p>iq: <code>{Namespace: Options}</code> This option defines namespaces and their IQ permissions. By default no permissions are given. The <code>Options</code> are:</p> <ul> <li> <p>both: <code>AccessName</code>    Allows sending IQ stanzas of type <code>get</code> and <code>set</code>. The default value is <code>none</code>.</p> </li> <li> <p>get: <code>AccessName</code>    Allows sending IQ stanzas of type <code>get</code>. The default value is <code>none</code>.</p> </li> <li> <p>set: <code>AccessName</code>    Allows sending IQ stanzas of type <code>set</code>. The default value is <code>none</code>.</p> </li> </ul> </li> <li> <p>message: <code>Options</code> This option defines permissions for messages. By default no permissions are given. The <code>Options</code> are:</p> <ul> <li>outgoing: <code>AccessName</code>    The option defines an access rule for sending outgoing messages by the component. The default value is <code>none</code>.</li> </ul> </li> <li> <p>presence: <code>Options</code> This option defines permissions for presences. By default no permissions are given. The <code>Options</code> are:</p> <ul> <li> <p>managed_entity: <code>AccessName</code>    An access rule that gives permissions to the component to receive server presences. The default value is <code>none</code>.</p> </li> <li> <p>roster: <code>AccessName</code>    An access rule that gives permissions to the component to receive the presence of both the users and the contacts in their roster. The default value is <code>none</code>.</p> </li> </ul> </li> <li> <p>roster: <code>Options</code> This option defines roster permissions. By default no permissions are given. The <code>Options</code> are:</p> <ul> <li> <p>both: <code>AccessName</code>    Sets read/write access to a user\u2019s roster. The default value is <code>none</code>.</p> </li> <li> <p>get: <code>AccessName</code>    Sets read access to a user\u2019s roster. The default value is <code>none</code>.</p> </li> <li> <p>set: <code>AccessName</code>    Sets write access to a user\u2019s roster. The default value is <code>none</code>.</p> </li> </ul> </li> </ul> <p>Example:</p> <pre><code>modules:\n  mod_privilege:\n    iq:\n      http://jabber.org/protocol/pubsub:\n        get: all\n    roster:\n      get: all\n    presence:\n      managed_entity: all\n    message:\n      outgoing: all\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_proxy65","title":"mod_proxy65","text":"<p>This module implements XEP-0065: SOCKS5 Bytestreams. It allows ejabberd to act as a file transfer proxy between two XMPP clients.</p> <p>Available options:</p> <ul> <li> <p>access: <code>AccessName</code> Defines an access rule for file transfer initiators. The default value is <code>all</code>. You may want to restrict access to the users of your server only, in order to avoid abusing your proxy by the users of remote servers.</p> </li> <li> <p>auth_type: <code>anonymous | plain</code> SOCKS5 authentication type. The default value is <code>anonymous</code>. If set to <code>plain</code>, ejabberd will use authentication backend as it would for SASL PLAIN.</p> </li> <li> <p>host Deprecated. Use <code>hosts</code> instead.</p> </li> <li> <p>hostname: <code>Host</code> Defines a hostname offered by the proxy when establishing a session with clients. This is useful when you run the proxy behind a NAT. The keyword <code>@HOST@</code> is replaced with the virtual host name. The default is to use the value of <code>ip</code> option. Examples: <code>proxy.mydomain.org</code>, <code>200.150.100.50</code>.</p> </li> <li> <p>hosts: <code>[Host, ...]</code> This option defines the Jabber IDs of the service. If the <code>hosts</code> option is not specified, the only Jabber ID will be the hostname of the virtual host with the prefix \"proxy.\". The keyword <code>@HOST@</code> is replaced with the real virtual host name.</p> </li> <li> <p>ip: <code>IPAddress</code> This option specifies which network interface to listen for. The default value is an IP address of the service\u2019s DNS name, or, if fails, <code>127.0.0.1</code>.</p> </li> <li> <p>max_connections: <code>pos_integer() | infinity</code> Maximum number of active connections per file transfer initiator. The default value is <code>infinity</code>.</p> </li> <li> <p>name: <code>Name</code> The value of the service name. This name is only visible in some clients that support XEP-0030: Service Discovery. The default is \"SOCKS5 Bytestreams\".</p> </li> <li> <p>port: <code>1..65535</code> A port number to listen for incoming connections. The default value is <code>7777</code>.</p> </li> <li> <p>ram_db_type: <code>mnesia | redis | sql</code> Same as top-level default_ram_db option, but applied to this module only.</p> </li> <li> <p>recbuf: <code>Size</code> A size of the buffer for incoming packets. If you define a shaper, set the value of this option to the size of the shaper in order to avoid traffic spikes in file transfers. The default value is <code>65536</code> bytes.</p> </li> <li> <p>shaper: <code>Shaper</code> This option defines a shaper for the file transfer peers. A shaper with the maximum bandwidth will be selected. The default is <code>none</code>, i.e. no shaper.</p> </li> <li> <p>sndbuf: <code>Size</code> A size of the buffer for outgoing packets. If you define a shaper, set the value of this option to the size of the shaper in order to avoid traffic spikes in file transfers. The default value is <code>65536</code> bytes.</p> </li> <li> <p>vcard: <code>vCard</code> A custom vCard of the service that will be displayed by some XMPP clients in Service Discovery. The value of <code>vCard</code> is a YAML map constructed from an XML representation of vCard. Since the representation has no attributes, the mapping is straightforward.</p> </li> </ul> <p>Example:</p> <pre><code>acl:\n  admin:\n    user: admin@example.org\n  proxy_users:\n    server: example.org\n\naccess_rules:\n  proxy65_access:\n    allow: proxy_users\n\nshaper_rules:\n  proxy65_shaper:\n    none: admin\n  proxyrate: proxy_users\n\nshaper:\n  proxyrate: 10240\n\nmodules:\n  mod_proxy65:\n    host: proxy1.example.org\n    name: \"File Transfer Proxy\"\n    ip: 200.150.100.1\n    port: 7778\n    max_connections: 5\n    access: proxy65_access\n    shaper: proxy65_shaper\n    recbuf: 10240\n    sndbuf: 10240\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_pubsub","title":"mod_pubsub","text":"<p>This module offers a service for XEP-0060: Publish-Subscribe. The functionality in <code>mod_pubsub</code> can be extended using plugins. The plugin that implements PEP (XEP-0163: Personal Eventing via Pubsub) is enabled in the default ejabberd configuration file, and it requires mod_caps.</p> <p>Available options:</p> <ul> <li> <p>access_createnode: <code>AccessName</code> This option restricts which users are allowed to create pubsub nodes using <code>acl</code> and <code>access</code>. By default any account in the local ejabberd server is allowed to create pubsub nodes. The default value is: <code>all</code>.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>default_node_config: <code>List of Key:Value</code> To override default node configuration, regardless of node plugin. Value is a list of key-value definition. Node configuration still uses default configuration defined by node plugin, and overrides any items by value defined in this configurable list.</p> </li> <li> <p>force_node_config: <code>List of Node and the list of its Key:Value</code> Define the configuration for given nodes. The default value is: <code>[]</code>.</p> <p>Example:</p> <pre><code>force_node_config:\n  ## Avoid buggy clients to make their bookmarks public\n  storage:bookmarks:\n    access_model: whitelist\n</code></pre> </li> <li> <p>host Deprecated. Use <code>hosts</code> instead.</p> </li> <li> <p>hosts: <code>[Host, ...]</code> This option defines the Jabber IDs of the service. If the <code>hosts</code> option is not specified, the only Jabber ID will be the hostname of the virtual host with the prefix \"pubsub.\". The keyword <code>@HOST@</code> is replaced with the real virtual host name.</p> </li> <li> <p>ignore_pep_from_offline: <code>false | true</code> To specify whether or not we should get last published PEP items from users in our roster which are offline when we connect. Value is <code>true</code> or <code>false</code>. If not defined, pubsub assumes true so we only get last items of online contacts.</p> </li> <li> <p>last_item_cache: <code>false | true</code> To specify whether or not pubsub should cache last items. Value is <code>true</code> or <code>false</code>. If not defined, pubsub does not cache last items. On systems with not so many nodes, caching last items speeds up pubsub and allows you to raise the user connection rate. The cost is memory usage, as every item is stored in memory.</p> </li> <li> <p>max_item_expire_node: <code>timeout() | infinity</code> added in 21.12  Specify the maximum item epiry time. Default value is: <code>infinity</code>.</p> </li> <li> <p>max_items_node: <code>non_neg_integer() | infinity</code> Define the maximum number of items that can be stored in a node. Default value is: <code>1000</code>.</p> </li> <li> <p>max_nodes_discoitems: <code>pos_integer() | infinity</code> The maximum number of nodes to return in a discoitem response. The default value is: <code>100</code>.</p> </li> <li> <p>max_subscriptions_node: <code>MaxSubs</code> Define the maximum number of subscriptions managed by a node. Default value is no limitation: <code>undefined</code>.</p> </li> <li> <p>name: <code>Name</code> The value of the service name. This name is only visible in some clients that support XEP-0030: Service Discovery. The default is <code>vCard User Search</code>.</p> </li> <li> <p>nodetree: <code>Nodetree</code> To specify which nodetree to use. If not defined, the default pubsub nodetree is used: <code>tree</code>. Only one nodetree can be used per host, and is shared by all node plugins.</p> <ul> <li> <p><code>tree</code> nodetree store node configuration and relations on the database. <code>flat</code> nodes are stored without any relationship, and <code>hometree</code> nodes can have child nodes.</p> </li> <li> <p><code>virtual</code> nodetree does not store nodes on database. This saves resources on systems with tons of nodes. If using the <code>virtual</code> nodetree, you can only enable those node plugins: <code>[flat, pep]</code> or <code>[flat]</code>; any other plugins configuration will not work. Also, all nodes will have the default configuration, and this can not be changed. Using <code>virtual</code> nodetree requires to start from a clean database, it will not work if you used the default <code>tree</code> nodetree before.</p> </li> </ul> </li> <li> <p>pep_mapping: <code>List of Key:Value</code> In this option you can provide a list of key-value to choose defined node plugins on given PEP namespace. The following example will use <code>node_tune</code> instead of <code>node_pep</code> for every PEP node with the tune namespace:</p> <p>Example:</p> <pre><code>modules:\n  ...\n  mod_pubsub:\n    pep_mapping:\n      http://jabber.org/protocol/tune: tune\n  ...\n</code></pre> </li> <li> <p>plugins: <code>[Plugin, ...]</code> To specify which pubsub node plugins to use. The first one in the list is used by default. If this option is not defined, the default plugins list is: <code>[flat]</code>. PubSub clients can define which plugin to use when creating a node: add type='plugin-name<code>' attribute to the</code>create stanza element.</p> <ul> <li> <p><code>flat</code> plugin handles the default behaviour and follows standard XEP-0060 implementation.</p> </li> <li> <p><code>pep</code> plugin adds extension to handle Personal Eventing Protocol (XEP-0163) to the PubSub engine. When enabled, PEP is handled automatically.</p> </li> </ul> </li> <li> <p>vcard: <code>vCard</code> A custom vCard of the server that will be displayed by some XMPP clients in Service Discovery. The value of <code>vCard</code> is a YAML map constructed from an XML representation of vCard. Since the representation has no attributes, the mapping is straightforward.</p> <p>Example:</p> <pre><code># This XML representation of vCard:\n#   &lt;vCard xmlns='vcard-temp'&gt;\n#     &lt;FN&gt;Conferences&lt;/FN&gt;\n#     &lt;ADR&gt;\n#       &lt;WORK/&gt;\n#       &lt;STREET&gt;Elm Street&lt;/STREET&gt;\n#     &lt;/ADR&gt;\n#   &lt;/vCard&gt;\n#\n# is translated to:\nvcard:\n  fn: Conferences\n  adr:\n    -\n      work: true\n      street: Elm Street\n</code></pre> </li> </ul> <p>Examples:</p> <p>Example of configuration that uses flat nodes as default, and allows use of flat, hometree and pep nodes:</p> <pre><code>modules:\n  mod_pubsub:\n    access_createnode: pubsub_createnode\n    max_subscriptions_node: 100\n    default_node_config:\n      notification_type: normal\n      notify_retract: false\n      max_items: 4\n    plugins:\n      - flat\n      - pep\n</code></pre> <p>Using relational database requires using mod_pubsub with db_type <code>sql</code>. Only flat, hometree and pep plugins supports SQL. The following example shows previous configuration with SQL usage:</p> <pre><code>modules:\n  mod_pubsub:\n    db_type: sql\n    access_createnode: pubsub_createnode\n    ignore_pep_from_offline: true\n    last_item_cache: false\n    plugins:\n      - flat\n      - pep\n</code></pre> <p>API Tags: purge</p>","boost":1},{"location":"admin/configuration/modules/#mod_pubsub_serverinfo","title":"mod_pubsub_serverinfo \ud83d\udfe4","text":"<p> added in 25.07</p> <p>This module adds support for XEP-0485: PubSub Server Information to expose S2S information over the Pub/Sub service.</p> <p>Active S2S connections are published to a local PubSub node. Currently the node name is hardcoded as <code>\"serverinfo\"</code>.</p> <p>Connections that support this feature are exposed with their domain names, otherwise they are shown as anonymous nodes. At startup a list of well known public servers is fetched. Those are not shown as anonymous even if they don\u2019t support this feature.</p> <p>Please note that the module only shows S2S connections established while the module is running. If you install the module at runtime, run stop_s2s_connections API or restart ejabberd to force S2S reconnections that the module will detect and publish.</p> <p>This module depends on mod_pubsub and mod_disco.</p> <p>Available options:</p> <ul> <li>pubsub_host: <code>undefined | string()</code> Use this local PubSub host to advertise S2S connections. This must be a host local to this service handled by mod_pubsub. This option is only needed if your configuration has more than one host in mod_pubsub\u2019s <code>hosts</code> option. The default value is the first host defined in mod_pubsub <code>hosts</code> option.</li> </ul> <p>Example:</p> <pre><code>modules:\n  mod_pubsub_serverinfo:\n    pubsub_host: custom.pubsub.domain.local\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_push","title":"mod_push","text":"<p>This module implements the XMPP server\u2019s part of the push notification solution specified in XEP-0357: Push Notifications. It does not generate, for example, APNS or FCM notifications directly. Instead, it\u2019s designed to work with so-called \"app servers\" operated by third-party vendors of mobile apps. Those app servers will usually trigger notification delivery to the user\u2019s mobile device using platform-dependent backend services such as FCM or APNS.</p> <p>Available options:</p> <ul> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed: <code>true | false</code> Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>include_body: <code>true | false | Text</code> If this option is set to <code>true</code>, the message text is included with push notifications generated for incoming messages with a body. The option can instead be set to a static <code>Text</code>, in which case the specified text will be included in place of the actual message body. This can be useful to signal the app server whether the notification was triggered by a message with body (as opposed to other types of traffic) without leaking actual message contents. The default value is \"New message\".</p> </li> <li> <p>include_sender: <code>true | false</code> If this option is set to <code>true</code>, the sender\u2019s JID is included with push notifications generated for incoming messages with a body. The default value is <code>false</code>.</p> </li> <li> <p>notify_on: <code>messages | all</code> added in 23.10  If this option is set to <code>messages</code>, notifications are generated only for actual chat messages with a body text (or some encrypted payload). If it\u2019s set to <code>all</code>, any kind of XMPP stanza will trigger a notification. If unsure, it\u2019s strongly recommended to stick to <code>all</code>, which is the default value.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> </ul> <p>API Tags: purge</p>","boost":1},{"location":"admin/configuration/modules/#mod_push_keepalive","title":"mod_push_keepalive","text":"<p>This module tries to keep the stream management session (see mod_stream_mgmt) of a disconnected mobile client alive if the client enabled push notifications for that session. However, the normal session resumption timeout is restored once a push notification is issued, so the session will be closed if the client doesn\u2019t respond to push notifications.</p> <p>The module depends on mod_push.</p> <p>Available options:</p> <ul> <li> <p>resume_timeout: <code>timeout()</code> This option specifies the period of time until the session of a disconnected push client times out. This timeout is only in effect as long as no push notification is issued. Once that happened, the resumption timeout configured for mod_stream_mgmt is restored. The default value is <code>72</code> hours.</p> </li> <li> <p>wake_on_start: <code>true | false</code> If this option is set to <code>true</code>, notifications are generated for all registered push clients during server startup. This option should not be enabled on servers with many push clients as it can generate significant load on the involved push services and the server itself. The default value is <code>false</code>.</p> </li> <li> <p>wake_on_timeout: <code>true | false</code> If this option is set to <code>true</code>, a notification is generated shortly before the session would time out as per the <code>resume_timeout</code> option. The default value is <code>true</code>.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_register","title":"mod_register","text":"<p>This module adds support for XEP-0077: In-Band Registration. This protocol enables end users to use an XMPP client to:</p> <ul> <li> <p>Register a new account on the server.</p> </li> <li> <p>Change the password from an existing account on the server.</p> </li> <li> <p>Delete an existing account on the server.</p> </li> </ul> <p>This module reads also the top-level registration_timeout option defined globally for the server, so please check that option documentation too.</p> <p>Available options:</p> <ul> <li> <p>access: <code>AccessName</code> Specify rules to restrict what usernames can be registered. If a rule returns <code>deny</code> on the requested username, registration of that user name is denied. There are no restrictions by default. If <code>AccessName</code> is <code>none</code>, then registering new accounts using In-Band Registration is disabled and the corresponding stream feature is not announced to clients.</p> </li> <li> <p>access_from: <code>AccessName</code> By default, ejabberd doesn\u2019t allow the client to register new accounts from s2s or existing c2s sessions. You can change it by defining access rule in this option. Use with care: allowing registration from s2s leads to uncontrolled massive accounts creation by rogue users.</p> </li> <li> <p>access_remove: <code>AccessName</code> Specify rules to restrict access for user unregistration. By default any user is able to unregister their account.</p> </li> <li> <p>allow_modules: <code>all | [Module, ...]</code> added in 21.12  List of modules that can register accounts, or <code>all</code>. The default value is <code>all</code>, which is equivalent to something like <code>\\[mod\\_register, mod_register_web]</code>.</p> </li> <li> <p>captcha_protected: <code>true | false</code> Protect registrations with CAPTCHA. The default is <code>false</code>.</p> </li> <li> <p>ip_access: <code>AccessName</code> Define rules to allow or deny account registration depending on the IP address of the XMPP client. The <code>AccessName</code> should be of type <code>ip</code>. The default value is <code>all</code>.</p> </li> <li> <p>password_strength: <code>Entropy</code> This option sets the minimum Shannon entropy for passwords. The value <code>Entropy</code> is a number of bits of entropy. The recommended minimum is 32 bits. The default is <code>0</code>, i.e. no checks are performed.</p> </li> <li> <p>redirect_url: <code>URL</code> This option enables registration redirection as described in XEP-0077: In-Band Registration: Redirection.</p> </li> <li> <p>registration_watchers: <code>[JID, ...]</code> This option defines a list of JIDs which will be notified each time a new account is registered.</p> </li> <li> <p>welcome_message: <code>{subject: Subject, body: Body}</code> Set a welcome message that is sent to each newly registered account. The message will have subject <code>Subject</code> and text <code>Body</code>.</p> <p>Example:</p> <pre><code>modules:\n  mod_register:\n    welcome_message:\n      subject: \"Welcome!\"\n      body: |-\n        Hi!\n        Welcome to this XMPP server\n</code></pre> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_register_web","title":"mod_register_web","text":"<p>This module provides a web page where users can:</p> <ul> <li> <p>Register a new account on the server.</p> </li> <li> <p>Change the password from an existing account on the server.</p> </li> <li> <p>Unregister an existing account on the server.</p> </li> </ul> <p>This module supports CAPTCHA to register a new account. To enable this feature, configure the top-level captcha_cmd and top-level captcha_url options.</p> <p>As an example usage, the users of the host <code>localhost</code> can visit the page: <code>https://localhost:5280/register/</code> It is important to include the last / character in the URL, otherwise the subpages URL will be incorrect.</p> <p>This module is enabled in <code>listen</code> \u2192 <code>ejabberd_http</code> \u2192 request_handlers, no need to enable in <code>modules</code>. The module depends on mod_register where all the configuration is performed.</p> <p>The module has no options.</p> <p>Example:</p> <pre><code>listen:\n  -\n    port: 5280\n    module: ejabberd_http\n    request_handlers:\n      /register: mod_register_web\n\nmodules:\n  mod_register: {}\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_roster","title":"mod_roster","text":"<p>This module implements roster management as defined in RFC6121 Section 2. The module also adds support for XEP-0237: Roster Versioning.</p> <p>Available options:</p> <ul> <li> <p>access: <code>AccessName</code> This option can be configured to specify rules to restrict roster management. If the rule returns <code>deny</code> on the requested user name, that user cannot modify their personal roster, i.e. they cannot add/remove/modify contacts or send presence subscriptions. The default value is <code>all</code>, i.e. no restrictions.</p> </li> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed: <code>true | false</code> Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>store_current_id: <code>true | false</code> If this option is set to <code>true</code>, the current roster version number is stored on the database. If set to <code>false</code>, the roster version number is calculated on the fly each time. Enabling this option reduces the load for both ejabberd and the database. This option does not affect the client in any way. This option is only useful if option <code>versioning</code> is set to <code>true</code>. The default value is <code>false</code>. IMPORTANT: if you use mod_shared_roster or mod_shared_roster_ldap, you must set the value of the option to <code>false</code>.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> <li> <p>versioning: <code>true | false</code> Enables/disables Roster Versioning. The default value is <code>false</code>.</p> </li> </ul> <p>Example:</p> <pre><code>modules:\n  mod_roster:\n    versioning: true\n    store_current_id: false\n</code></pre> <p>API Tags: roster</p>","boost":1},{"location":"admin/configuration/modules/#mod_s2s_bidi","title":"mod_s2s_bidi","text":"<p> added in 24.10</p> <p>The module adds support for XEP-0288: Bidirectional Server-to-Server Connections that allows using single s2s connection to communicate in both directions.</p> <p>The module has no options.</p> <p>Example:</p> <pre><code>modules:\n  mod_s2s_bidi: {}\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_s2s_dialback","title":"mod_s2s_dialback","text":"<p>The module adds support for XEP-0220: Server Dialback to provide server identity verification based on DNS.</p> <p>Warning</p> <p>DNS-based verification is vulnerable to DNS cache poisoning, so modern servers rely on verification based on PKIX certificates. Thus this module is only recommended for backward compatibility with servers running outdated software or non-TLS servers, or those with invalid certificates (as long as you accept the risks, e.g. you assume that the remote server has an invalid certificate due to poor administration and not because it\u2019s compromised).</p> <p>Available options:</p> <ul> <li>access: <code>AccessName</code> An access rule that can be used to restrict dialback for some servers. The default value is <code>all</code>.</li> </ul> <p>Example:</p> <pre><code>modules:\n  mod_s2s_dialback:\n    access:\n      allow:\n        server: legacy.domain.tld\n        server: invalid-cert.example.org\n      deny: all\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_scram_upgrade","title":"mod_scram_upgrade","text":"<p> added in 24.10</p> <p>The module adds support for XEP-0480: SASL Upgrade Tasks that allows users to upgrade passwords to more secure representation.</p> <p>Available options:</p> <ul> <li>offered_upgrades: <code>list(sha256, sha512)</code> List with upgrade types that should be offered</li> </ul> <p>Example:</p> <pre><code>modules:\n  mod_scram_upgrade:\n    offered_upgrades:\n      - sha256\n      - sha512\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_service_log","title":"mod_service_log","text":"<p>This module forwards copies of all stanzas to remote XMPP servers or components. Every stanza is encapsulated into &lt;forwarded/&gt; element as described in XEP-0297: Stanza Forwarding.</p> <p>Available options:</p> <ul> <li>loggers: <code>[Domain, ...]</code> A list of servers or connected components to which stanzas will be forwarded.</li> </ul> <p>Example:</p> <pre><code>modules:\n  mod_service_log:\n    loggers:\n      - xmpp-server.tld\n      - component.domain.tld\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_shared_roster","title":"mod_shared_roster","text":"<p>This module enables you to create shared roster groups: groups of accounts that can see members from (other) groups in their rosters.</p> <p>The big advantages of this feature are that end users do not need to manually add all users to their rosters, and that they cannot permanently delete users from the shared roster groups. A shared roster group can have members from any XMPP server, but the presence will only be available from and to members of the same virtual host where the group is created. It still allows the users to have / add their own contacts, as it does not replace the standard roster. Instead, the shared roster contacts are merged to the relevant users at retrieval time. The standard user rosters thus stay unmodified.</p> <p>Shared roster groups can be edited via the Web Admin, and some API commands called <code>srg_</code>, for example srg_add API. Each group has a unique name and those parameters:</p> <ul> <li> <p>Label: Used in the rosters where this group is displayed.</p> </li> <li> <p>Description: of the group, which has no effect.</p> </li> <li> <p>Members: A list of JIDs of group members, entered one per line in     the Web Admin. The special member directive <code>@all@</code> represents all     the registered users in the virtual host; which is only recommended     for a small server with just a few hundred users. The special member     directive <code>@online@</code> represents the online users in the virtual     host. With those two directives, the actual list of members in those     shared rosters is generated dynamically at retrieval time.</p> </li> <li> <p>Displayed: A list of groups that will be in the rosters of this     group\u2019s members. A group of other vhost can be identified with     <code>groupid@vhost</code>.</p> </li> </ul> <p>This module depends on mod_roster. If not enabled, roster queries will return 503 errors.</p> <p>Available options:</p> <ul> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed: <code>true | false</code> Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>db_type: <code>mnesia | sql</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> </ul> <p>Examples:</p> <p>Take the case of a computer club that wants all its members seeing each other in their rosters. To achieve this, they need to create a shared roster group similar to this one:</p> <pre><code>Name: club_members\nLabel: Club Members\nDescription: Members from the computer club\nMembers: member1@example.org, member2@example.org, member3@example.org\nDisplayed Groups: club_members\n</code></pre> <p>In another case we have a company which has three divisions: Management, Marketing and Sales. All group members should see all other members in their rosters. Additionally, all managers should have all marketing and sales people in their roster. Simultaneously, all marketeers and the whole sales team should see all managers. This scenario can be achieved by creating shared roster groups as shown in the following lists:</p> <pre><code>First list:\nName: management\nLabel: Management\nDescription: Management\nMembers: manager1@example.org, manager2@example.org\nDisplayed: management, marketing, sales\n\nSecond list:\nName: marketing\nLabel: Marketing\nDescription: Marketing\nMembers: marketeer1@example.org, marketeer2@example.org, marketeer3@example.org\nDisplayed: management, marketing\n\nThird list:\nName: sales\nLabel: Sales\nDescription: Sales\nMembers: salesman1@example.org, salesman2@example.org, salesman3@example.org\nDisplayed: management, sales\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_shared_roster_ldap","title":"mod_shared_roster_ldap","text":"<p>This module lets the server administrator automatically populate users' rosters (contact lists) with entries based on users and groups defined in an LDAP-based directory.</p> <p>Note</p> <p><code>mod\\_shared_roster_ldap</code> depends on <code>mod_roster</code> being enabled. Roster queries will return <code>503</code> errors if <code>mod_roster</code> is not enabled.</p> <p>The module accepts many configuration options. Some of them, if unspecified, default to the values specified for the top level of configuration. This lets you avoid specifying, for example, the bind password in multiple places.</p> <ul> <li> <p>Filters: <code>ldap_rfilter</code>, <code>ldap_ufilter</code>, <code>ldap_gfilter</code>,     <code>ldap_filter</code>. These options specify LDAP filters used to query for     shared roster information. All of them are run against the     ldap_base.</p> </li> <li> <p>Attributes: <code>ldap_groupattr</code>, <code>ldap_groupdesc</code>,     <code>ldap_memberattr</code>, <code>ldap_userdesc</code>, <code>ldap_useruid</code>. These options     specify the names of the attributes which hold interesting data in     the entries returned by running filters specified with the filter     options.</p> </li> <li> <p>Control parameters: <code>ldap_auth_check</code>,     <code>ldap\\_group\\_cache_validity</code>, <code>ldap_memberattr_format</code>,     <code>ldap\\_memberattr\\_format\\_re</code>, <code>ldap_user_cache_validity</code>. These     parameters control the behaviour of the module.</p> </li> <li> <p>Connection parameters: The module also accepts the connection     parameters, all of which default to the top-level parameter of the     same name, if unspecified. See     LDAP Connection section for more     information about them.</p> </li> </ul> <p>Check also the Configuration examples section to get details about retrieving the roster, and configuration examples including Flat DIT and Deep DIT.</p> <p>Available options:</p> <ul> <li> <p>cache_life_time Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>ldap_auth_check: <code>true | false</code> Whether the module should check (via the ejabberd authentication subsystem) for existence of each user in the shared LDAP roster. Set to <code>false</code> if you want to disable the check. Default value is <code>true</code>.</p> </li> <li> <p>ldap_backups Same as top-level ldap_backups option, but applied to this module only.</p> </li> <li> <p>ldap_base Same as top-level ldap_base option, but applied to this module only.</p> </li> <li> <p>ldap_deref_aliases Same as top-level ldap_deref_aliases option, but applied to this module only.</p> </li> <li> <p>ldap_encrypt Same as top-level ldap_encrypt option, but applied to this module only.</p> </li> <li> <p>ldap_filter Additional filter which is AND-ed together with \"User Filter\" and \"Group Filter\". For more information check the LDAP Filters section.</p> </li> <li> <p>ldap_gfilter \"Group Filter\", used when retrieving human-readable name (a.k.a. \"Display Name\") and the members of a group. See also the parameters <code>ldap_groupattr</code>, <code>ldap_groupdesc</code> and <code>ldap_memberattr</code>. If unspecified, defaults to the top-level parameter of the same name. If that one also is unspecified, then the filter is constructed exactly like \"User Filter\".</p> </li> <li> <p>ldap_groupattr The name of the attribute that holds the group name, and that is used to differentiate between them. Retrieved from results of the \"Roster Filter\" and \"Group Filter\". Defaults to <code>cn</code>.</p> </li> <li> <p>ldap_groupdesc The name of the attribute which holds the human-readable group name in the objects you use to represent groups. Retrieved from results of the \"Group Filter\". Defaults to whatever <code>ldap_groupattr</code> is set.</p> </li> <li> <p>ldap_memberattr The name of the attribute which holds the IDs of the members of a group. Retrieved from results of the \"Group Filter\". Defaults to <code>memberUid</code>. The name of the attribute differs depending on the objectClass you use for your group objects, for example: <code>posixGroup</code> \u2192 <code>memberUid</code>; <code>groupOfNames</code> \u2192 <code>member</code>; <code>groupOfUniqueNames</code> \u2192 <code>uniqueMember</code>.</p> </li> <li> <p>ldap_memberattr_format A globbing format for extracting user ID from the value of the attribute named by <code>ldap_memberattr</code>. Defaults to <code>%u</code>, which means that the whole value is the member ID. If you change it to something different, you may also need to specify the User and Group Filters manually; see section Filters.</p> </li> <li> <p>ldap_memberattr_format_re A regex for extracting user ID from the value of the attribute named by <code>ldap_memberattr</code>. Check the LDAP Control Parameters section.</p> </li> <li> <p>ldap_password Same as top-level ldap_password option, but applied to this module only.</p> </li> <li> <p>ldap_port Same as top-level ldap_port option, but applied to this module only.</p> </li> <li> <p>ldap_rfilter So called \"Roster Filter\". Used to find names of all \"shared roster\" groups. See also the <code>ldap_groupattr</code> parameter. If unspecified, defaults to the top-level parameter of the same name. You must specify it in some place in the configuration, there is no default.</p> </li> <li> <p>ldap_rootdn Same as top-level ldap_rootdn option, but applied to this module only.</p> </li> <li> <p>ldap_servers Same as top-level ldap_servers option, but applied to this module only.</p> </li> <li> <p>ldap_tls_cacertfile Same as top-level ldap_tls_cacertfile option, but applied to this module only.</p> </li> <li> <p>ldap_tls_certfile Same as top-level ldap_tls_certfile option, but applied to this module only.</p> </li> <li> <p>ldap_tls_depth Same as top-level ldap_tls_depth option, but applied to this module only.</p> </li> <li> <p>ldap_tls_verify Same as top-level ldap_tls_verify option, but applied to this module only.</p> </li> <li> <p>ldap_ufilter \"User Filter\", used for retrieving the human-readable name of roster entries (usually full names of people in the roster). See also the parameters <code>ldap_userdesc</code> and <code>ldap_useruid</code>. For more information check the LDAP Filters section.</p> </li> <li> <p>ldap_uids Same as top-level ldap_uids option, but applied to this module only.</p> </li> <li> <p>ldap_userdesc The name of the attribute which holds the human-readable user name. Retrieved from results of the \"User Filter\". Defaults to <code>cn</code>.</p> </li> <li> <p>ldap_userjidattr The name of the attribute which is used to map user id to XMPP jid. If not specified (and that is default value of this option), user jid will be created from user id and this module host.</p> </li> <li> <p>ldap_useruid The name of the attribute which holds the ID of a roster item. Value of this attribute in the roster item objects needs to match the ID retrieved from the <code>ldap_memberattr</code> attribute of a group object. Retrieved from results of the \"User Filter\". Defaults to <code>cn</code>.</p> </li> <li> <p>use_cache Same as top-level use_cache option, but applied to this module only.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_sic","title":"mod_sic","text":"<p>This module adds support for XEP-0279: Server IP Check. This protocol enables a client to discover its external IP address.</p> <p>Warning</p> <p>The protocol extension is deferred and seems like there are no clients supporting it, so using this module is not recommended and, furthermore, the module might be removed in the future.</p> <p>The module has no options.</p>","boost":1},{"location":"admin/configuration/modules/#mod_sip","title":"mod_sip","text":"<p>This module adds SIP proxy/registrar support for the corresponding virtual host.</p> <p>Note</p> <p>It is not enough to just load this module. You should also configure listeners and DNS records properly. For details see the section about the ejabberd_sip listen module in the ejabberd Documentation.</p> <p>Available options:</p> <ul> <li> <p>always_record_route: <code>true | false</code> Always insert \"Record-Route\" header into SIP messages. With this approach it is possible to bypass NATs/firewalls a bit more easily. The default value is <code>true</code>.</p> </li> <li> <p>flow_timeout_tcp: <code>timeout()</code> The option sets a keep-alive timer for SIP outbound TCP connections. The default value is <code>2</code> minutes.</p> </li> <li> <p>flow_timeout_udp: <code>timeout()</code> The options sets a keep-alive timer for SIP outbound UDP connections. The default value is <code>29</code> seconds.</p> </li> <li> <p>record_route: <code>URI</code> When the option <code>always_record_route</code> is set to <code>true</code> or when SIP outbound is utilized, ejabberd inserts \"Record-Route\" header field with this <code>URI</code> into a SIP message. The default is a SIP URI constructed from the virtual host on which the module is loaded.</p> </li> <li> <p>routes: <code>[URI, ...]</code> You can set a list of SIP URIs of routes pointing to this SIP proxy server. The default is a list containing a single SIP URI constructed from the virtual host on which the module is loaded.</p> </li> <li> <p>via: <code>[URI, ...]</code> A list to construct \"Via\" headers for inserting them into outgoing SIP messages. This is useful if you\u2019re running your SIP proxy in a non-standard network topology. Every <code>URI</code> element in the list must be in the form of \"scheme://host:port\", where \"transport\" must be <code>tls</code>, <code>tcp</code>, or <code>udp</code>, \"host\" must be a domain name or an IP address and \"port\" must be an internet port number. Note that all parts of the <code>URI</code> are mandatory (e.g. you cannot omit \"port\" or \"scheme\").</p> </li> </ul> <p>Example:</p> <pre><code>modules:\n  mod_sip:\n    always_record_route: false\n    record_route: \"sip:example.com;lr\"\n    routes:\n      - \"sip:example.com;lr\"\n      - \"sip:sip.example.com;lr\"\n    flow_timeout_udp: 30 sec\n    flow_timeout_tcp: 1 min\n    via:\n      - tls://sip-tls.example.com:5061\n      - tcp://sip-tcp.example.com:5060\n      - udp://sip-udp.example.com:5060\n</code></pre>","boost":1},{"location":"admin/configuration/modules/#mod_stats","title":"mod_stats","text":"<p>This module adds support for XEP-0039: Statistics Gathering. This protocol allows you to retrieve the following statistics from your ejabberd server:</p> <ul> <li> <p>Total number of registered users on the current virtual host     (users/total).</p> </li> <li> <p>Total number of registered users on all virtual hosts     (users/all-hosts/total).</p> </li> <li> <p>Total number of online users on the current virtual host     (users/online).</p> </li> <li> <p>Total number of online users on all virtual hosts     (users/all-hosts/online).</p> </li> </ul> <p>Note</p> <p>The protocol extension is deferred and seems like even a few clients that were supporting it are now abandoned. So using this module makes very little sense.</p> <p>The module has no options.</p>","boost":1},{"location":"admin/configuration/modules/#mod_stream_mgmt","title":"mod_stream_mgmt","text":"<p>This module adds support for XEP-0198: Stream Management. This protocol allows active management of an XML stream between two XMPP entities, including features for stanza acknowledgments and stream resumption.</p> <p>Available options:</p> <ul> <li> <p>ack_timeout: <code>timeout()</code> A time to wait for stanza acknowledgments. Setting it to <code>infinity</code> effectively disables the timeout. The default value is <code>1</code> minute.</p> </li> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only. The default value is <code>48 hours</code>.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>max_ack_queue: <code>Size</code> This option specifies the maximum number of unacknowledged stanzas queued for possible retransmission. When the limit is exceeded, the client session is terminated. The allowed values are positive integers and <code>infinity</code>. You should be careful when setting this value as it should not be set too low, otherwise, you could kill sessions in a loop, before they get the chance to finish proper session initiation. It should definitely be set higher that the size of the offline queue (for example at least 3 times the value of the max offline queue and never lower than <code>1000</code>). The default value is <code>5000</code>.</p> </li> <li> <p>max_resume_timeout: <code>timeout()</code> A client may specify the period of time until a session times out if the connection is lost. During this period of time, the client may resume its session. This option limits the period of time a client is permitted to request. It must be set to a timeout equal to or larger than the default <code>resume_timeout</code>. By default, it is set to the same value as the <code>resume_timeout</code> option.</p> </li> <li> <p>queue_type: <code>ram | file</code> Same as top-level queue_type option, but applied to this module only.</p> </li> <li> <p>resend_on_timeout: <code>true | false | if_offline</code> If this option is set to <code>true</code>, any message stanzas that weren\u2019t acknowledged by the client will be resent on session timeout. This behavior might often be desired, but could have unexpected results under certain circumstances. For example, a message that was sent to two resources might get resent to one of them if the other one timed out. Therefore, the default value for this option is <code>false</code>, which tells ejabberd to generate an error message instead. As an alternative, the option may be set to <code>if_offline</code>. In this case, unacknowledged messages are resent only if no other resource is online when the session times out. Otherwise, error messages are generated.</p> </li> <li> <p>resume_timeout: <code>timeout()</code> This option configures the (default) period of time until a session times out if the connection is lost. During this period of time, a client may resume its session. Note that the client may request a different timeout value, see the <code>max_resume_timeout</code> option. Setting it to <code>0</code> effectively disables session resumption. The default value is <code>5</code> minutes.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_stun_disco","title":"mod_stun_disco","text":"<p> added in 20.04</p> <p>This module allows XMPP clients to discover STUN/TURN services and to obtain temporary credentials for using them as per XEP-0215: External Service Discovery.</p> <p>Available options:</p> <ul> <li> <p>access: <code>AccessName</code> This option defines which access rule will be used to control who is allowed to discover STUN/TURN services and to request temporary credentials. The default value is <code>local</code>.</p> </li> <li> <p>credentials_lifetime: <code>timeout()</code> The lifetime of temporary credentials offered to clients. If ejabberd\u2019s built-in TURN service is used, TURN relays allocated using temporary credentials will be terminated shortly after the credentials expired. The default value is <code>12 hours</code>. Note that restarting the ejabberd node invalidates any temporary credentials offered before the restart unless a <code>secret</code> is specified (see below).</p> </li> <li> <p>offer_local_services: <code>true | false</code> This option specifies whether local STUN/TURN services configured as ejabberd listeners should be announced automatically. Note that this will not include TLS-enabled services, which must be configured manually using the <code>services</code> option (see below). For non-anonymous TURN services, temporary credentials will be offered to the client. The default value is <code>true</code>.</p> </li> <li> <p>secret: <code>Text</code> The secret used for generating temporary credentials. If this option isn\u2019t specified, a secret will be auto-generated. However, a secret must be specified explicitly if non-anonymous TURN services running on other ejabberd nodes and/or external TURN <code>services</code> are configured. Also note that auto-generated secrets are lost when the node is restarted, which invalidates any credentials offered before the restart. Therefore, it\u2019s recommended to explicitly specify a secret if clients cache retrieved credentials (for later use) across service restarts.</p> </li> <li> <p>services: <code>[Service, ...]</code> The list of services offered to clients. This list can include STUN/TURN services running on any ejabberd node and/or external services. However, if any listed TURN service not running on the local ejabberd node requires authentication, a <code>secret</code> must be specified explicitly, and must be shared with that service. This will only work with ejabberd\u2019s built-in STUN/TURN server and with external servers that support the same REST API For Access To TURN Services. Unless the <code>offer_local_services</code> is set to <code>false</code>, the explicitly listed services will be offered in addition to those announced automatically.</p> <ul> <li> <p>host: <code>Host</code>    The hostname or IP address the STUN/TURN service is listening on. For non-TLS services, it\u2019s recommended to specify an IP address (to avoid additional DNS lookup latency on the client side). For TLS services, the hostname (or IP address) should match the certificate. Specifying the <code>host</code> option is mandatory.</p> </li> <li> <p>port: <code>1..65535</code>    The port number the STUN/TURN service is listening on. The default port number is 3478 for non-TLS services and 5349 for TLS services.</p> </li> <li> <p>restricted: <code>true | false</code>    This option determines whether temporary credentials for accessing the service are offered. The default is <code>false</code> for STUN/STUNS services and <code>true</code> for TURN/TURNS services.</p> </li> <li> <p>transport: <code>tcp | udp</code>    The transport protocol supported by the service. The default is <code>udp</code> for non-TLS services and <code>tcp</code> for TLS services.</p> </li> <li> <p>type: <code>stun | turn | stuns | turns</code>    The type of service. Must be <code>stun</code> or <code>turn</code> for non-TLS services, <code>stuns</code> or <code>turns</code> for TLS services. The default type is <code>stun</code>.</p> </li> </ul> <p>Example:</p> <pre><code>services:\n  -\n    host: 203.0.113.3\n    port: 3478\n    type: stun\n    transport: udp\n    restricted: false\n  -\n    host: 203.0.113.3\n    port: 3478\n    type: turn\n    transport: udp\n    restricted: true\n  -\n    host: 2001:db8::3\n    port: 3478\n    type: stun\n    transport: udp\n    restricted: false\n  -\n    host: 2001:db8::3\n    port: 3478\n    type: turn\n    transport: udp\n    restricted: true\n  -\n    host: server.example.com\n    port: 5349\n    type: turns\n    transport: tcp\n    restricted: true\n</code></pre> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_time","title":"mod_time","text":"<p>This module adds support for XEP-0202: Entity Time. In other words, the module reports server\u2019s system time.</p> <p>The module has no options.</p>","boost":1},{"location":"admin/configuration/modules/#mod_vcard","title":"mod_vcard","text":"<p>This module allows end users to store and retrieve their vCard, and to retrieve other users vCards, as defined in XEP-0054: vcard-temp. The module also implements an uncomplicated Jabber User Directory based on the vCards of these users. Moreover, it enables the server to send its vCard when queried.</p> <p>Available options:</p> <ul> <li> <p>allow_return_all: <code>true | false</code> This option enables you to specify if search operations with empty input fields should return all users who added some information to their vCard. The default value is <code>false</code>.</p> </li> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed: <code>true | false</code> Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>db_type: <code>mnesia | sql | ldap</code> Same as top-level default_db option, but applied to this module only.</p> </li> <li> <p>host Deprecated. Use <code>hosts</code> instead.</p> </li> <li> <p>hosts: <code>[Host, ...]</code> This option defines the Jabber IDs of the service. If the <code>hosts</code> option is not specified, the only Jabber ID will be the hostname of the virtual host with the prefix \"vjud.\". The keyword <code>@HOST@</code> is replaced with the real virtual host name.</p> </li> <li> <p>matches: <code>pos_integer() | infinity</code> With this option, the number of reported search results can be limited. If the option\u2019s value is set to <code>infinity</code>, all search results are reported. The default value is <code>30</code>.</p> </li> <li> <p>name: <code>Name</code> The value of the service name. This name is only visible in some clients that support XEP-0030: Service Discovery. The default is <code>vCard User Search</code>.</p> </li> <li> <p>search: <code>true | false</code> This option specifies whether the search functionality is enabled or not. If disabled, the options <code>hosts</code>, <code>name</code> and <code>vcard</code> will be ignored and the Jabber User Directory service will not appear in the Service Discovery item list. The default value is <code>false</code>.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> <li> <p>vcard: <code>vCard</code> A custom vCard of the server that will be displayed by some XMPP clients in Service Discovery. The value of <code>vCard</code> is a YAML map constructed from an XML representation of vCard. Since the representation has no attributes, the mapping is straightforward.</p> <p>Example:</p> <pre><code># This XML representation of vCard:\n#\n#   &lt;vCard xmlns='vcard-temp'&gt;\n#     &lt;FN&gt;Conferences&lt;/FN&gt;\n#     &lt;ADR&gt;\n#       &lt;WORK/&gt;\n#       &lt;STREET&gt;Elm Street&lt;/STREET&gt;\n#     &lt;/ADR&gt;\n#   &lt;/vCard&gt;\n#\n# is translated to:\n#\nvcard:\n  fn: Conferences\n  adr:\n    -\n      work: true\n      street: Elm Street\n</code></pre> </li> </ul> <p>Available options for <code>ldap</code> backend:</p> <ul> <li> <p>ldap_backups Same as top-level ldap_backups option, but applied to this module only.</p> </li> <li> <p>ldap_base Same as top-level ldap_base option, but applied to this module only.</p> </li> <li> <p>ldap_deref_aliases Same as top-level ldap_deref_aliases option, but applied to this module only.</p> </li> <li> <p>ldap_encrypt Same as top-level ldap_encrypt option, but applied to this module only.</p> </li> <li> <p>ldap_filter Same as top-level ldap_filter option, but applied to this module only.</p> </li> <li> <p>ldap_password Same as top-level ldap_password option, but applied to this module only.</p> </li> <li> <p>ldap_port Same as top-level ldap_port option, but applied to this module only.</p> </li> <li> <p>ldap_rootdn Same as top-level ldap_rootdn option, but applied to this module only.</p> </li> <li> <p>ldap_search_fields: <code>{Name: Attribute, ...}</code> This option defines the search form and the LDAP attributes to search within. <code>Name</code> is the name of a search form field which will be automatically translated by using the translation files (see <code>msgs/*.msg</code> for available words). <code>Attribute</code> is the LDAP attribute or the pattern <code>%u</code>.</p> <p>Examples:</p> <p>The default is:</p> <pre><code>User: \"%u\"\n\"Full Name\": displayName\n\"Given Name\": givenName\n\"Middle Name\": initials\n\"Family Name\": sn\nNickname: \"%u\"\nBirthday: birthDay\nCountry: c\nCity: l\nEmail: mail\n\"Organization Name\": o\n\"Organization Unit\": ou\n</code></pre> </li> <li> <p>ldap_search_reported: <code>{SearchField: VcardField}, ...}</code> This option defines which search fields should be reported. <code>SearchField</code> is the name of a search form field which will be automatically translated by using the translation files (see <code>msgs/*.msg</code> for available words). <code>VcardField</code> is the vCard field name defined in the <code>ldap_vcard_map</code> option.</p> <p>Examples:</p> <p>The default is:</p> <pre><code>\"Full Name\": FN\n\"Given Name\": FIRST\n\"Middle Name\": MIDDLE\n\"Family Name\": LAST\n\"Nickname\": NICKNAME\n\"Birthday\": BDAY\n\"Country\": CTRY\n\"City\": LOCALITY\n\"Email\": EMAIL\n\"Organization Name\": ORGNAME\n\"Organization Unit\": ORGUNIT\n</code></pre> </li> <li> <p>ldap_servers Same as top-level ldap_servers option, but applied to this module only.</p> </li> <li> <p>ldap_tls_cacertfile Same as top-level ldap_tls_cacertfile option, but applied to this module only.</p> </li> <li> <p>ldap_tls_certfile Same as top-level ldap_tls_certfile option, but applied to this module only.</p> </li> <li> <p>ldap_tls_depth Same as top-level ldap_tls_depth option, but applied to this module only.</p> </li> <li> <p>ldap_tls_verify Same as top-level ldap_tls_verify option, but applied to this module only.</p> </li> <li> <p>ldap_uids Same as top-level ldap_uids option, but applied to this module only.</p> </li> <li> <p>ldap_vcard_map: <code>{Name: {Pattern, LDAPattributes}, ...}</code> With this option you can set the table that maps LDAP attributes to vCard fields. <code>Name</code> is the type name of the vCard as defined in RFC 2426. <code>Pattern</code> is a string which contains pattern variables <code>%u</code>, <code>%d</code> or <code>%s</code>. <code>LDAPattributes</code> is the list containing LDAP attributes. The pattern variables <code>%s</code> will be sequentially replaced with the values of LDAP attributes from <code>List_of_LDAP_attributes</code>, <code>%u</code> will be replaced with the user part of a JID, and <code>%d</code> will be replaced with the domain part of a JID.</p> <p>Examples:</p> <p>The default is:</p> <pre><code>NICKNAME: {\"%u\": []}\nFN: {\"%s\": [displayName]}\nLAST: {\"%s\": [sn]}\nFIRST: {\"%s\": [givenName]}\nMIDDLE: {\"%s\": [initials]}\nORGNAME: {\"%s\": [o]}\nORGUNIT: {\"%s\": [ou]}\nCTRY: {\"%s\": [c]}\nLOCALITY: {\"%s\": [l]}\nSTREET: {\"%s\": [street]}\nREGION: {\"%s\": [st]}\nPCODE: {\"%s\": [postalCode]}\nTITLE: {\"%s\": [title]}\nURL: {\"%s\": [labeleduri]}\nDESC: {\"%s\": [description]}\nTEL: {\"%s\": [telephoneNumber]}\nEMAIL: {\"%s\": [mail]}\nBDAY: {\"%s\": [birthDay]}\nROLE: {\"%s\": [employeeType]}\nPHOTO: {\"%s\": [jpegPhoto]}\n</code></pre> </li> </ul> <p>Available options for <code>mnesia</code> backend:</p> <ul> <li>search_all_hosts: <code>true | false</code> Whether to perform search on all virtual hosts or not. The default value is <code>true</code>.</li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_vcard_xupdate","title":"mod_vcard_xupdate","text":"<p>The user\u2019s client can store an avatar in the user vCard. The vCard-Based Avatars protocol (XEP-0153) provides a method for clients to inform the contacts what is the avatar hash value. However, simple or small clients may not implement that protocol.</p> <p>If this module is enabled, all the outgoing client presence stanzas get automatically the avatar hash on behalf of the client. So, the contacts receive the presence stanzas with the <code>Update Data</code> described in XEP-0153 as if the client would had inserted it itself. If the client had already included such element in the presence stanza, it is replaced with the element generated by ejabberd.</p> <p>By enabling this module, each vCard modification produces a hash recalculation, and each presence sent by a client produces hash retrieval and a presence stanza rewrite. For this reason, enabling this module will introduce a computational overhead in servers with clients that change frequently their presence. However, the overhead is significantly reduced by the use of caching, so you probably don\u2019t want to set <code>use_cache</code> to <code>false</code>.</p> <p>The module depends on mod_vcard.</p> <p>Note</p> <p>Nowadays XEP-0153 is used mostly as \"read-only\", i.e. modern clients don\u2019t publish their avatars inside vCards. Thus in the majority of cases the module is only used along with mod_avatar for providing backward compatibility.</p> <p>Available options:</p> <ul> <li> <p>cache_life_time: <code>timeout()</code> Same as top-level cache_life_time option, but applied to this module only.</p> </li> <li> <p>cache_missed: <code>true | false</code> Same as top-level cache_missed option, but applied to this module only.</p> </li> <li> <p>cache_size: <code>pos_integer() | infinity</code> Same as top-level cache_size option, but applied to this module only.</p> </li> <li> <p>use_cache: <code>true | false</code> Same as top-level use_cache option, but applied to this module only.</p> </li> </ul>","boost":1},{"location":"admin/configuration/modules/#mod_version","title":"mod_version","text":"<p>This module implements XEP-0092: Software Version. Consequently, it answers ejabberd\u2019s version when queried.</p> <p>Available options:</p> <ul> <li>show_os: <code>true | false</code> Should the operating system be revealed or not. The default value is <code>true</code>.</li> </ul>","boost":1},{"location":"admin/configuration/toplevel/","title":"Top-Level Options","text":"<p>Please note</p> <p>This section describes top level options of ejabberd 25.07.  If you are using an old ejabberd release, please refer to the corresponding archived version of this page in the Archive.</p> <p>The options that changed in this version are marked with \ud83d\udfe4.</p>","boost":1},{"location":"admin/configuration/toplevel/#access_rules","title":"access_rules","text":"<p><code>{AccessName: {allow|deny: ACLName|ACLDefinition}}</code> </p> <p>This option defines Access Rules. Each access rule is assigned a name that can be referenced from other parts of the configuration file (mostly from <code>access</code> options of ejabberd modules). Each rule definition may contain arbitrary number of <code>allow</code> or <code>deny</code> sections, and each section may contain any number of ACL rules (see acl option). There are no access rules defined by default.</p> <p>Example:</p> <pre><code>access_rules:\n  configure:\n    allow: admin\n  something:\n    deny: someone\n    allow: all\n  s2s_banned:\n    deny: problematic_hosts\n    deny: banned_forever\n    deny:\n      ip: 222.111.222.111/32\n    deny:\n      ip: 111.222.111.222/32\n    allow: all\n  xmlrpc_access:\n    allow:\n      user: peter@example.com\n    allow:\n      user: ivone@example.com\n    allow:\n      user: bot@example.com\n      ip: 10.0.0.0/24\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#acl","title":"acl","text":"<p><code>{ACLName: {ACLType: ACLValue}}</code> </p> <p>This option defines access control lists: named sets of rules which are used to match against different targets (such as a JID or an IP address). Every set of rules has name <code>ACLName</code>: it can be any string except <code>all</code> or <code>none</code> (those are predefined names for the rules that match all or nothing respectively). The name <code>ACLName</code> can be referenced from other parts of the configuration file, for example in access_rules option. The rules of <code>ACLName</code> are represented by mapping <code>{ACLType: ACLValue}</code>. These can be one of the following:</p> <ul> <li> <p>ip: <code>Network</code>     The rule matches any IP address from the     <code>Network</code>.</p> </li> <li> <p>node_glob: <code>Pattern</code>     Same as <code>node_regexp</code>, but matching is     performed on a specified <code>Pattern</code> according to the rules used by     the Unix shell.</p> </li> <li> <p>node_regexp: <code>user_regexp@server_regexp</code>     The rule matches any     JID with node part matching regular expression <code>user_regexp</code> and     server part matching regular expression <code>server_regexp</code>.</p> </li> <li> <p>resource: <code>Resource</code>     The rule matches any JID with a resource     <code>Resource</code>.</p> </li> <li> <p>resource_glob: <code>Pattern</code>     Same as <code>resource_regexp</code>, but     matching is performed on a specified <code>Pattern</code> according to the     rules used by the Unix shell.</p> </li> <li> <p>resource_regexp: <code>Regexp</code>     The rule matches any JID with a     resource that matches regular expression <code>Regexp</code>.</p> </li> <li> <p>server: <code>Server</code>     The rule matches any JID from server <code>Server</code>.     The value of <code>Server</code> must be a valid hostname or an IP address.</p> </li> <li> <p>server_glob: <code>Pattern</code>     Same as <code>server_regexp</code>, but matching     is performed on a specified <code>Pattern</code> according to the rules used by     the Unix shell.</p> </li> <li> <p>server_regexp: <code>Regexp</code>     The rule matches any JID from the     server that matches regular expression <code>Regexp</code>.</p> </li> <li> <p>user: <code>Username</code>     If <code>Username</code> is in the form of \"user@server\",     the rule matches a JID against this value. Otherwise, if <code>Username</code>     is in the form of \"user\", the rule matches any JID that has     <code>Username</code> in the node part as long as the server part of this JID     is any virtual host served by ejabberd.</p> </li> <li> <p>user_glob: <code>Pattern</code>     Same as <code>user_regexp</code>, but matching is     performed on a specified <code>Pattern</code> according to the rules used by     the Unix shell.</p> </li> <li> <p>user_regexp: <code>Regexp</code>     If <code>Regexp</code> is in the form of     \"regexp@server\", the rule matches any JID with node part matching     regular expression \"regexp\" as long as the server part of this JID     is equal to \"server\". If <code>Regexp</code> is in the form of \"regexp\", the     rule matches any JID with node part matching regular expression     \"regexp\" as long as the server part of this JID is any virtual host     served by ejabberd.</p> </li> </ul>","boost":1},{"location":"admin/configuration/toplevel/#acme","title":"acme","text":"<p><code>Options</code> </p> <p>ACME configuration, to automatically obtain SSL certificates for the domains served by ejabberd, which means that certificate requests and renewals are performed to some CA server (aka \"ACME server\") in a fully automated mode. The <code>Options</code> are:</p> <ul> <li> <p>auto: <code>true | false</code>     Whether to automatically request     certificates for all configured domains (that yet have no a     certificate) on server start or configuration reload. The default is     <code>true</code>.</p> </li> <li> <p>ca_url: <code>URL</code>     The ACME directory URL used as an entry point for     the ACME server. The default value is     https://acme-v02.api.letsencrypt.org/directory - the directory URL     of Let\u2019s Encrypt authority.</p> </li> <li> <p>cert_type: <code>rsa | ec</code>     A type of a certificate key. Available     values are <code>ec</code> and <code>rsa</code> for EC and RSA certificates respectively.     It\u2019s better to have RSA certificates for the purpose of backward     compatibility with legacy clients and servers, thus the default is     <code>rsa</code>.</p> </li> <li> <p>contact: <code>[Contact, ...]</code>     A list of contact addresses     (typically emails) where an ACME server will send notifications when     problems occur. The value of <code>Contact</code> must be in the form of     \"scheme:address\" (e.g. \"mailto:user@domain.tld\"). The default is an     empty list which means an ACME server will send no notices.</p> </li> </ul> <p>Example:</p> <pre><code>acme:\n  ca_url: https://acme-v02.api.letsencrypt.org/directory\n  contact:\n    - mailto:admin@domain.tld\n    - mailto:bot@domain.tld\n  auto: true\n  cert_type: rsa\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#allow_contrib_modules","title":"allow_contrib_modules","text":"<p><code>true | false</code> </p> <p>Whether to allow installation of third-party modules or not. See ejabberd-contrib documentation section. The default value is <code>true</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#allow_multiple_connections","title":"allow_multiple_connections","text":"<p><code>true | false</code> </p> <p>This option is only used when the anonymous mode is enabled. Setting it to <code>true</code> means that the same username can be taken multiple times in anonymous login mode if different resource are used to connect. This option is only useful in very special occasions. The default value is <code>false</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#anonymous_protocol","title":"anonymous_protocol","text":"<p><code>login_anon | sasl_anon | both</code> </p> <p>Define what anonymous protocol will be used:</p> <ul> <li> <p><code>login_anon</code> means that the anonymous login method will be used.</p> </li> <li> <p><code>sasl_anon</code> means that the SASL Anonymous method will be used.</p> </li> <li> <p><code>both</code> means that SASL Anonymous and login anonymous are both     enabled.</p> </li> </ul> <p>The default value is <code>sasl_anon</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#api_permissions","title":"api_permissions","text":"<p><code>[Permission, ...]</code> </p> <p>Define the permissions for API access. Please consult the ejabberd Docs web \u2192 For Developers \u2192 ejabberd ReST API \u2192 API Permissions.</p>","boost":1},{"location":"admin/configuration/toplevel/#append_host_config","title":"append_host_config","text":"<p><code>{Host: Options}</code> </p> <p>Add a few specific options to a certain virtual host.</p>","boost":1},{"location":"admin/configuration/toplevel/#auth_cache_life_time","title":"auth_cache_life_time","text":"<p><code>timeout()</code> </p> <p>Same as cache_life_time, but applied to authentication cache only. If not set, the value from cache_life_time will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#auth_cache_missed","title":"auth_cache_missed","text":"<p><code>true | false</code> </p> <p>Same as cache_missed, but applied to authentication cache only. If not set, the value from cache_missed will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#auth_cache_size","title":"auth_cache_size","text":"<p><code>pos_integer() | infinity</code> </p> <p>Same as cache_size, but applied to authentication cache only. If not set, the value from cache_size will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#auth_external_user_exists_check","title":"auth_external_user_exists_check","text":"<p><code>true | false</code> </p> <p> added in 23.10</p> <p>Supplement check for user existence based on mod_last data, for authentication methods that don\u2019t have a way to reliably tell if a user exists (like is the case for <code>jwt</code> and certificate based authentication). This helps with processing offline message for those users. The default value is <code>true</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#auth_method","title":"auth_method","text":"<p><code>[mnesia | sql | anonymous | external | jwt | ldap | pam, ...]</code> </p> <p>A list of authentication methods to use. If several methods are defined, authentication is considered successful as long as authentication of at least one of the methods succeeds. The default value is <code>[mnesia]</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#auth_opts","title":"auth_opts","text":"<p><code>[Option, ...]</code> </p> <p>This is used by the contributed module <code>ejabberd_auth_http</code> that can be installed from the ejabberd-contrib Git repository. Please refer to that module\u2019s README file for details.</p>","boost":1},{"location":"admin/configuration/toplevel/#auth_password_format","title":"auth_password_format","text":"<p><code>plain | scram</code> </p> <p> improved in 20.01</p> <p>The option defines in what format the users passwords are stored, plain text or in SCRAM format:</p> <ul> <li> <p><code>plain</code>: The password is stored as plain text in the database. This     is risky because the passwords can be read if your database gets     compromised. This is the default value. This format allows clients     to authenticate using: the old Jabber Non-SASL (XEP-0078), SASL     PLAIN, SASL DIGEST-MD5, and SASL SCRAM-SHA-1/256/512(-PLUS).</p> </li> <li> <p><code>scram</code>: The password is not stored, only some information required     to verify the hash provided by the client. It is impossible to     obtain the original plain password from the stored information; for     this reason, when this value is configured it cannot be changed to     plain anymore. This format allows clients to authenticate using:     SASL PLAIN and SASL SCRAM-SHA-1/256/512(-PLUS). The SCRAM variant     depends on the auth_scram_hash option.</p> </li> </ul> <p>The default value is <code>plain</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#auth_password_types_hidden_in_scram1","title":"auth_password_types_hidden_in_scram1 \ud83d\udfe4","text":"<p><code>[plain | scram_sha1 | scram_sha256 | scram_sha512]</code> </p> <p> added in 25.07</p> <p>List of password types that should not be offered in SCRAM1 authenticatication. Because SCRAM1, unlike SCRAM2, can\u2019t have list of available mechanisms tailored to individual user, it\u2019s possible that offered mechanisms will not be compatible with stored password, especially if new password type was added recently. This option allows disabling offering some mechanisms in SASL1, to a time until new password type will be available for all users.</p>","boost":1},{"location":"admin/configuration/toplevel/#auth_scram_hash","title":"auth_scram_hash","text":"<p><code>sha | sha256 | sha512</code> </p> <p>Hash algorithm that should be used to store password in SCRAM format. You shouldn\u2019t change this if you already have passwords generated with a different algorithm - users that have such passwords will not be able to authenticate. The default value is <code>sha</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#auth_stored_password_types","title":"auth_stored_password_types","text":"<p><code>[plain | scram_sha1 | scram_sha256 | scram_sha512]</code> </p> <p> added in 25.03</p> <p>List of password types that should be stored simultaneously for each user in database. When the user sets the account password, database will be updated to store the password in formats compatible with each type listed here. This can be used to migrate user passwords to a more secure format. If this option if set, it will override values set in auth_scram_hash and auth_password_format options. The default value is <code>[]</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#auth_use_cache","title":"auth_use_cache","text":"<p><code>true | false</code> </p> <p>Same as use_cache, but applied to authentication cache only. If not set, the value from use_cache will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#c2s_cafile","title":"c2s_cafile","text":"<p><code>Path</code> </p> <p>Full path to a file containing one or more CA certificates in PEM format. All client certificates should be signed by one of these root CA certificates and should contain the corresponding JID(s) in <code>subjectAltName</code> field. There is no default value.</p> <p>You can use host_config to specify this option per-vhost.</p> <p>To set a specific file per listener, use the listener\u2019s cafile option. Please notice that <code>c2s_cafile</code> overrides the listener\u2019s <code>cafile</code> option.</p>","boost":1},{"location":"admin/configuration/toplevel/#c2s_ciphers","title":"c2s_ciphers","text":"<p><code>[Cipher, ...]</code> </p> <p>A list of OpenSSL ciphers to use for c2s connections. The default value is shown in the example below:</p> <p>Example:</p> <pre><code>c2s_ciphers:\n  - HIGH\n  - \"!aNULL\"\n  - \"!eNULL\"\n  - \"!3DES\"\n  - \"@STRENGTH\"\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#c2s_dhfile","title":"c2s_dhfile","text":"<p><code>Path</code> </p> <p>Full path to a file containing custom DH parameters to use for c2s connections. Such a file could be created with the command \"openssl dhparam -out dh.pem 2048\". If this option is not specified, 2048-bit MODP Group with 256-bit Prime Order Subgroup will be used as defined in RFC5114 Section 2.3.</p>","boost":1},{"location":"admin/configuration/toplevel/#c2s_protocol_options","title":"c2s_protocol_options","text":"<p><code>[Option, ...]</code> </p> <p>List of general SSL options to use for c2s connections. These map to OpenSSL\u2019s <code>set_options()</code>. The default value is shown in the example below:</p> <p>Example:</p> <pre><code>c2s_protocol_options:\n  - no_sslv3\n  - cipher_server_preference\n  - no_compression\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#c2s_tls_compression","title":"c2s_tls_compression","text":"<p><code>true | false</code> </p> <p>Whether to enable or disable TLS compression for c2s connections. The default value is <code>false</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#ca_file","title":"ca_file","text":"<p><code>Path</code> </p> <p>Path to a file of CA root certificates. The default is to use system defined file if possible.</p> <p>For server connections, this <code>ca_file</code> option is overridden by the s2s_cafile option.</p>","boost":1},{"location":"admin/configuration/toplevel/#cache_life_time","title":"cache_life_time","text":"<p><code>timeout()</code> </p> <p>The time of a cached item to keep in cache. Once it\u2019s expired, the corresponding item is erased from cache. The default value is <code>1 hour</code>. Several modules have a similar option; and some core ejabberd parts support similar options too, see auth_cache_life_time, oauth_cache_life_time, router_cache_life_time, and sm_cache_life_time.</p>","boost":1},{"location":"admin/configuration/toplevel/#cache_missed","title":"cache_missed","text":"<p><code>true | false</code> </p> <p>Whether or not to cache missed lookups. When there is an attempt to lookup for a value in a database and this value is not found and the option is set to <code>true</code>, this attempt will be cached and no attempts will be performed until the cache expires (see cache_life_time). Usually you don\u2019t want to change it. Default is <code>true</code>. Several modules have a similar option; and some core ejabberd parts support similar options too, see auth_cache_missed, oauth_cache_missed, router_cache_missed, and sm_cache_missed.</p>","boost":1},{"location":"admin/configuration/toplevel/#cache_size","title":"cache_size","text":"<p><code>pos_integer() | infinity</code> </p> <p>A maximum number of items (not memory!) in cache. The rule of thumb, for all tables except rosters, you should set it to the number of maximum online users you expect. For roster multiply this number by 20 or so. If the cache size reaches this threshold, it\u2019s fully cleared, i.e. all items are deleted, and the corresponding warning is logged. You should avoid frequent cache clearance, because this degrades performance. The default value is <code>1000</code>. Several modules have a similar option; and some core ejabberd parts support similar options too, see auth_cache_size, oauth_cache_size, router_cache_size, and sm_cache_size.</p>","boost":1},{"location":"admin/configuration/toplevel/#captcha_cmd","title":"captcha_cmd","text":"<p><code>Path | ModuleName</code> </p> <p> improved in 23.01</p> <p>Full path to a script that generates CAPTCHA images. The keyword @VERSION@ is replaced with ejabberd version number in <code>XX.YY</code> format. The keyword <code>@SEMVER@</code> is replaced with ejabberd version number in semver format when compiled with Elixir\u2019s mix, or XX.YY format otherwise. Alternatively, it can be the name of a module that implements ejabberd CAPTCHA support. There is no default value: when this option is not set, CAPTCHA functionality is completely disabled.</p> <p>Examples:</p> <p>When using the ejabberd installers or container image, the example captcha scripts can be used like this:</p> <pre><code>captcha_cmd: /opt/ejabberd-@VERSION@/lib/ejabberd-@SEMVER@/priv/bin/captcha.sh\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#captcha_host","title":"captcha_host","text":"<p><code>String</code> </p> <p>Deprecated. Use captcha_url instead.</p>","boost":1},{"location":"admin/configuration/toplevel/#captcha_limit","title":"captcha_limit","text":"<p><code>pos_integer() | infinity</code> </p> <p>Maximum number of CAPTCHA generated images per minute for any given JID. The option is intended to protect the server from CAPTCHA DoS. The default value is <code>infinity</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#captcha_url","title":"captcha_url","text":"<p><code>URL | auto | undefined</code> </p> <p> improved in 23.04</p> <p>An URL where CAPTCHA requests should be sent. NOTE: you need to configure <code>request_handlers</code> for <code>ejabberd_http</code> listener as well. If set to <code>auto</code>, it builds the URL using a <code>request_handler</code> already enabled, with encryption if available. If set to <code>undefined</code>, it builds the URL using the deprecated captcha_host <code>+ /captcha</code>. The default value is <code>auto</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#certfiles","title":"certfiles","text":"<p><code>[Path, ...]</code> </p> <p>The option accepts a list of file paths (optionally with wildcards) containing either PEM certificates or PEM private keys. At startup or configuration reload, ejabberd reads all certificates from these files, sorts them, removes duplicates, finds matching private keys and then rebuilds full certificate chains for the use in TLS connections. Use this option when TLS is enabled in either of ejabberd listeners: <code>ejabberd_c2s</code>, <code>ejabberd_http</code> and so on. NOTE: if you modify the certificate files or change the value of the option, run ejabberdctl reload-config in order to rebuild and reload the certificate chains.</p> <p>Examples:</p> <p>If you use Let\u2019s Encrypt certificates for your domain \"domain.tld\", the configuration will look like this:</p> <pre><code>certfiles:\n  - /etc/letsencrypt/live/domain.tld/fullchain.pem\n  - /etc/letsencrypt/live/domain.tld/privkey.pem\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#cluster_backend","title":"cluster_backend","text":"<p><code>Backend</code> </p> <p>A database backend to use for storing information about cluster. The only available value so far is <code>mnesia</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#cluster_nodes","title":"cluster_nodes","text":"<p><code>[Node, ...]</code> </p> <p>A list of Erlang nodes to connect on ejabberd startup. This option is mostly intended for ejabberd customization and sophisticated setups. The default value is an empty list.</p>","boost":1},{"location":"admin/configuration/toplevel/#default_db","title":"default_db","text":"<p><code>mnesia | sql</code> </p> <p>Default database to store persistent data in ejabberd. Modules and other components (e.g. authentication) may have its own value. The default value is <code>mnesia</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#default_ram_db","title":"default_ram_db","text":"<p><code>mnesia | redis | sql</code> </p> <p>Default volatile (in-memory) storage for ejabberd. Modules and other components (e.g. session management) may have its own value. The default value is <code>mnesia</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#define_keyword","title":"define_keyword","text":"<p><code>{NAME: Value}</code> </p> <p> added in 25.03</p> <p>Allows to define configuration keywords.</p> <p>Example:</p> <pre><code>define_keyword:\n  SQL_USERNAME: \"eja.global\"\n\nhost_config:\n  localhost:\n    define_keyword:\n      SQL_USERNAME: \"eja.localhost\"\n\nsql_username: \"prefix.@SQL_USERNAME@\"\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#define_macro","title":"define_macro","text":"<p><code>{NAME: Value}</code> </p> <p> improved in 25.03</p> <p>Allows to define configuration macros.</p> <p>Example:</p> <pre><code>define_macro:\n  DEBUG: debug\n  LOG_LEVEL: DEBUG\n  USERBOB:\n    user: bob@localhost\n\nloglevel: LOG_LEVEL\n\nacl:\n  admin: USERBOB\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#disable_sasl_mechanisms","title":"disable_sasl_mechanisms","text":"<p><code>[Mechanism, ...]</code> </p> <p>Specify a list of SASL mechanisms (such as <code>DIGEST-MD5</code> or <code>SCRAM-SHA1</code>) that should not be offered to the client. For convenience, the value of <code>Mechanism</code> is case-insensitive. The default value is an empty list, i.e. no mechanisms are disabled by default.</p>","boost":1},{"location":"admin/configuration/toplevel/#disable_sasl_scram_downgrade_protection","title":"disable_sasl_scram_downgrade_protection","text":"<p><code>true | false</code> </p> <p>Allows to disable sending data required by XEP-0474: SASL SCRAM Downgrade Protection. There are known buggy clients (like those that use strophejs 1.6.2) which will not be able to authenticatate when servers sends data from that specification. This options allows server to disable it to allow even buggy clients connects, but in exchange decrease MITM protection. The default value of this option is <code>false</code> which enables this extension.</p>","boost":1},{"location":"admin/configuration/toplevel/#domain_balancing","title":"domain_balancing","text":"<p><code>{Domain: Options}</code> </p> <p>An algorithm to load-balance the components that are plugged on an ejabberd cluster. It means that you can plug one or several instances of the same component on each ejabberd node and that the traffic will be automatically distributed. The algorithm to deliver messages to the component(s) can be specified by this option. For any component connected as <code>Domain</code>, available <code>Options</code> are:</p> <ul> <li> <p>component_number: <code>2..1000</code>     The number of components to     balance.</p> </li> <li> <p>type: <code>Value</code>     How to deliver stanzas to connected components.     The default value is <code>random</code>. Possible values:</p> <p>- bare_destination by the bare JID (without resource) of the packet\u2019s <code>to</code> attribute</p> <p>- bare_source by the bare JID (without resource) of the packet\u2019s <code>from</code> attribute is used</p> <p>- destination an instance is chosen by the full JID of the packet\u2019s <code>to</code> attribute</p> <p>- random an instance is chosen at random</p> <p>- source by the full JID of the packet\u2019s <code>from</code> attribute</p> <p>Example:</p> <pre><code>domain_balancing:\n  component.domain.tld:\n    type: destination\n    component_number: 5\n  transport.example.org:\n    type: bare_source\n</code></pre> </li> </ul>","boost":1},{"location":"admin/configuration/toplevel/#ext_api_headers","title":"ext_api_headers","text":"<p><code>Headers</code> </p> <p>String of headers (separated with commas <code>,</code>) that will be provided by ejabberd when sending ReST requests. The default value is an empty string of headers: <code>\"\"</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#ext_api_http_pool_size","title":"ext_api_http_pool_size","text":"<p><code>pos_integer()</code> </p> <p>Define the size of the HTTP pool, that is, the maximum number of sessions that the ejabberd ReST service will handle simultaneously. The default value is: <code>100</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#ext_api_path_oauth","title":"ext_api_path_oauth","text":"<p><code>Path</code> </p> <p>Define the base URI path when performing OAUTH ReST requests. The default value is: <code>\"/oauth\"</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#ext_api_url","title":"ext_api_url","text":"<p><code>URL</code> </p> <p>Define the base URI when performing ReST requests. The default value is: <code>\"http://localhost/api\"</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#extauth_pool_name","title":"extauth_pool_name","text":"<p><code>Name</code> </p> <p>Define the pool name appendix in external auth, so the full pool name will be <code>extauth_pool_Name</code>. The default value is the hostname.</p>","boost":1},{"location":"admin/configuration/toplevel/#extauth_pool_size","title":"extauth_pool_size","text":"<p><code>Size</code> </p> <p>The option defines the number of instances of the same external auth program to start for better load balancing. The default is the number of available CPU cores.</p>","boost":1},{"location":"admin/configuration/toplevel/#extauth_program","title":"extauth_program","text":"<p><code>Path</code> </p> <p>Indicate in this option the full path to the external authentication script. The script must be executable by ejabberd.</p>","boost":1},{"location":"admin/configuration/toplevel/#fqdn","title":"fqdn","text":"<p><code>Domain</code> </p> <p>A fully qualified domain name that will be used in SASL DIGEST-MD5 authentication. The default is detected automatically.</p>","boost":1},{"location":"admin/configuration/toplevel/#hide_sensitive_log_data","title":"hide_sensitive_log_data","text":"<p><code>true | false</code> </p> <p>A privacy option to not log sensitive data (mostly IP addresses). The default value is <code>false</code> for backward compatibility.</p>","boost":1},{"location":"admin/configuration/toplevel/#host_config","title":"host_config","text":"<p><code>{Host: Options}</code> </p> <p>The option is used to redefine <code>Options</code> for virtual host <code>Host</code>. In the example below LDAP authentication method will be used on virtual host <code>domain.tld</code> and SQL method will be used on virtual host <code>example.org</code>.</p> <p>Example:</p> <pre><code>hosts:\n  - domain.tld\n  - example.org\n\nauth_method:\n  - sql\n\nhost_config:\n  domain.tld:\n    auth_method:\n      - ldap\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#hosts","title":"hosts","text":"<p><code>[Domain1, Domain2, ...]</code> </p> <p>List of one or more host names (or domains) that ejabberd will serve. This is a mandatory option.</p>","boost":1},{"location":"admin/configuration/toplevel/#hosts_alias","title":"hosts_alias \ud83d\udfe4","text":"<p><code>{Alias: Host}</code> </p> <p> added in 25.07</p> <p>Define aliases for existing vhosts managed by ejabberd. An alias may be a regexp expression. This option is only consulted by the <code>ejabberd_http</code> listener.</p> <p>Example:</p> <pre><code>hosts:\n  - domain.tld\n  - example.org\n\nhosts_alias:\n  xmpp.domain.tld: domain.tld\n  jabber.domain.tld: domain.tld\n  mytest.net: example.org\n  \"exa*\": example.org\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#include_config_file","title":"include_config_file","text":"<p>[Filename, ...] | {Filename: Options} </p> <p>Read and include additional file from <code>Filename</code>. If the value is provided in {Filename: Options} format, the <code>Options</code> must be one of the following:</p> <ul> <li> <p>allow_only: <code>[OptionName, ...]</code>     Allows only the usage of     those options in the included file <code>Filename</code>. The options that do     not match this criteria are not accepted. The default value is to     include all options.</p> </li> <li> <p>disallow: <code>[OptionName, ...]</code>     Disallows the usage of those     options in the included file <code>Filename</code>. The options that match this     criteria are not accepted. The default value is an empty list.</p> </li> </ul>","boost":1},{"location":"admin/configuration/toplevel/#install_contrib_modules","title":"install_contrib_modules","text":"<p><code>[Module, ...]</code> </p> <p> added in 23.10</p> <p>Modules to install from ejabberd-contrib at start time. The default value is an empty list of modules: <code>[]</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#jwt_auth_only_rule","title":"jwt_auth_only_rule","text":"<p><code>AccessName</code> </p> <p>This ACL rule defines accounts that can use only the JWT auth method, even if others are also defined in the ejabberd configuration file. In other words: if there are several auth methods enabled for this host (JWT, SQL, \u2026), users that match this rule can only use JWT. The default value is <code>none</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#jwt_jid_field","title":"jwt_jid_field","text":"<p><code>FieldName</code> </p> <p>By default, the JID is defined in the <code>\"jid\"</code> JWT field. In this option you can specify other JWT field name where the JID is defined.</p>","boost":1},{"location":"admin/configuration/toplevel/#jwt_key","title":"jwt_key","text":"<p><code>FilePath</code> </p> <p>Path to the file that contains the JWT key. The default value is <code>undefined</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#language","title":"language","text":"<p><code>Language</code> </p> <p>Define the default language of server strings that can be seen by XMPP clients. If an XMPP client does not possess <code>xml:lang</code> attribute, the specified language is used. The default value is <code>\"en\"</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#ldap_backups","title":"ldap_backups","text":"<p><code>[Host, ...]</code> </p> <p>A list of IP addresses or DNS names of LDAP backup servers (see LDAP connection). When no servers listed in ldap_servers option are reachable, ejabberd connects to these backup servers. The default is an empty list, i.e. no backup servers specified. Please notice that ejabberd only connects to the next server when the existing connection is lost; it doesn\u2019t detect when a previously-attempted server becomes available again.</p>","boost":1},{"location":"admin/configuration/toplevel/#ldap_base","title":"ldap_base","text":"<p><code>Base</code> </p> <p>LDAP base directory which stores users accounts. There is no default value: you must set the option in order for LDAP connections to work properly.</p>","boost":1},{"location":"admin/configuration/toplevel/#ldap_deref_aliases","title":"ldap_deref_aliases","text":"<p><code>never | always | finding | searching</code> </p> <p>Whether to dereference aliases or not. The default value is <code>never</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#ldap_dn_filter","title":"ldap_dn_filter","text":"<p><code>{Filter: FilterAttrs}</code> </p> <p>This filter is applied on the results returned by the main filter. The filter performs an additional LDAP lookup to make the complete result. This is useful when you are unable to define all filter rules in <code>ldap_filter</code>. You can define <code>\"%u\"</code>, <code>\"%d\"</code>, <code>\"%s\"* and *\"%D\"</code> pattern variables in Filter: \"%u\" is replaced by a user\u2019s part of the JID, <code>\"%d\"</code> is replaced by the corresponding domain (virtual host), all <code>\"%s\"</code> variables are consecutively replaced by values from the attributes in <code>FilterAttrs</code> and \"%D\" is replaced by Distinguished Name from the result set. There is no default value, which means the result is not filtered. WARNING: Since this filter makes additional LDAP lookups, use it only as the last resort: try to define all filter rules in ldap_filter option if possible.</p> <p>Example:</p> <pre><code>ldap_dn_filter:\n  \"(&amp;(name=%s)(owner=%D)(user=%u@%d))\": [sn]\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#ldap_encrypt","title":"ldap_encrypt","text":"<p><code>tls | none</code> </p> <p>Whether to encrypt LDAP connection using TLS or not. The default value is <code>none</code>. NOTE: STARTTLS encryption is not supported.</p>","boost":1},{"location":"admin/configuration/toplevel/#ldap_filter","title":"ldap_filter","text":"<p><code>Filter</code> </p> <p>An LDAP filter as defined in RFC4515. There is no default value. Example: \"(&amp;(objectClass=shadowAccount)(memberOf=XMPP Users))\". NOTE: don\u2019t forget to close brackets and don\u2019t use superfluous whitespaces. Also you must not use <code>\"uid\"</code> attribute in the filter because this attribute will be appended to the filter automatically.</p>","boost":1},{"location":"admin/configuration/toplevel/#ldap_password","title":"ldap_password","text":"<p><code>Password</code> </p> <p>Bind password. The default value is an empty string.</p>","boost":1},{"location":"admin/configuration/toplevel/#ldap_port","title":"ldap_port","text":"<p><code>1..65535</code> </p> <p>Port to connect to your LDAP server. The default port is <code>389</code> if encryption is disabled and <code>636</code> if encryption is enabled.</p>","boost":1},{"location":"admin/configuration/toplevel/#ldap_rootdn","title":"ldap_rootdn","text":"<p><code>RootDN</code> </p> <p>Bind Distinguished Name. The default value is an empty string, which means \"anonymous connection\".</p>","boost":1},{"location":"admin/configuration/toplevel/#ldap_servers","title":"ldap_servers","text":"<p><code>[Host, ...]</code> </p> <p>A list of IP addresses or DNS names of your LDAP servers (see LDAP connection). ejabberd connects immediately to all of them, and reconnects infinitely if connection is lost. The default value is <code>[localhost]</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#ldap_tls_cacertfile","title":"ldap_tls_cacertfile","text":"<p><code>Path</code> </p> <p>A path to a file containing PEM encoded CA certificates. This option is required when TLS verification is enabled.</p>","boost":1},{"location":"admin/configuration/toplevel/#ldap_tls_certfile","title":"ldap_tls_certfile","text":"<p><code>Path</code> </p> <p>A path to a file containing PEM encoded certificate along with PEM encoded private key. This certificate will be provided by ejabberd when TLS enabled for LDAP connections. There is no default value, which means no client certificate will be sent.</p>","boost":1},{"location":"admin/configuration/toplevel/#ldap_tls_depth","title":"ldap_tls_depth","text":"<p><code>Number</code> </p> <p>Specifies the maximum verification depth when TLS verification is enabled, i.e. how far in a chain of certificates the verification process can proceed before the verification is considered to be failed. Peer certificate = 0, CA certificate = 1, higher level CA certificate = 2, etc. The value <code>2</code> thus means that a chain can at most contain peer cert, CA cert, next CA cert, and an additional CA cert. The default value is <code>1</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#ldap_tls_verify","title":"ldap_tls_verify","text":"<p><code>false | soft | hard</code> </p> <p>This option specifies whether to verify LDAP server certificate or not when TLS is enabled. When <code>hard</code> is set, ejabberd doesn\u2019t proceed if the certificate is invalid. When <code>soft</code> is set, ejabberd proceeds even if the check has failed. The default is <code>false</code>, which means no checks are performed.</p>","boost":1},{"location":"admin/configuration/toplevel/#ldap_uids","title":"ldap_uids","text":"<p>[Attr] | {Attr: AttrFormat} </p> <p>LDAP attributes which hold a list of attributes to use as alternatives for getting the JID, where <code>Attr</code> is an LDAP attribute which holds the user\u2019s part of the JID and <code>AttrFormat</code> must contain one and only one pattern variable \"%u\" which will be replaced by the user\u2019s part of the JID. For example, \"%u@example.org\". If the value is in the form of <code>[Attr]</code> then <code>AttrFormat</code> is assumed to be \"%u\".</p>","boost":1},{"location":"admin/configuration/toplevel/#listen","title":"listen","text":"<p><code>[Options, ...]</code> </p> <p>The option for listeners configuration. See the Listen Modules section for details.</p>","boost":1},{"location":"admin/configuration/toplevel/#log_burst_limit_count","title":"log_burst_limit_count","text":"<p><code>Number</code> </p> <p> added in 22.10</p> <p>The number of messages to accept in <code>log_burst_limit_window_time</code> period before starting to drop them. Default <code>500</code></p>","boost":1},{"location":"admin/configuration/toplevel/#log_burst_limit_window_time","title":"log_burst_limit_window_time","text":"<p><code>Number</code> </p> <p> added in 22.10</p> <p>The time period to rate-limit log messages by. Defaults to <code>1</code> second.</p>","boost":1},{"location":"admin/configuration/toplevel/#log_modules_fully","title":"log_modules_fully","text":"<p><code>[Module, ...]</code> </p> <p> added in 23.01</p> <p>List of modules that will log everything independently from the general loglevel option.</p>","boost":1},{"location":"admin/configuration/toplevel/#log_rotate_count","title":"log_rotate_count","text":"<p><code>Number</code> </p> <p>The number of rotated log files to keep. The default value is <code>1</code>, which means that only keeps <code>ejabberd.log.0</code>, <code>error.log.0</code> and <code>crash.log.0</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#log_rotate_size","title":"log_rotate_size","text":"<p><code>pos_integer() | infinity</code> </p> <p>The size (in bytes) of a log file to trigger rotation. If set to <code>infinity</code>, log rotation is disabled. The default value is 10 Mb expressed in bytes: <code>10485760</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#loglevel","title":"loglevel","text":"<p><code>none | emergency | alert | critical | error | warning | notice | info | debug</code> </p> <p>Verbosity of ejabberd logging. The default value is <code>info</code>. NOTE: previous versions of ejabberd had log levels defined in numeric format (<code>0..5</code>). The numeric values are still accepted for backward compatibility, but are not recommended.</p>","boost":1},{"location":"admin/configuration/toplevel/#max_fsm_queue","title":"max_fsm_queue","text":"<p><code>Size</code> </p> <p>This option specifies the maximum number of elements in the queue of the FSM (Finite State Machine). Roughly speaking, each message in such queues represents one XML stanza queued to be sent into its relevant outgoing stream. If queue size reaches the limit (because, for example, the receiver of stanzas is too slow), the FSM and the corresponding connection (if any) will be terminated and error message will be logged. The reasonable value for this option depends on your hardware configuration. The allowed values are positive integers. The default value is <code>10000</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#modules","title":"modules","text":"<p><code>{Module: Options}</code> </p> <p>Set all the modules configuration options.</p>","boost":1},{"location":"admin/configuration/toplevel/#negotiation_timeout","title":"negotiation_timeout","text":"<p><code>timeout()</code> </p> <p>Time to wait for an XMPP stream negotiation to complete. When timeout occurs, the corresponding XMPP stream is closed. The default value is <code>120</code> seconds.</p>","boost":1},{"location":"admin/configuration/toplevel/#net_ticktime","title":"net_ticktime","text":"<p><code>timeout()</code> </p> <p>This option can be used to tune tick time parameter of <code>net_kernel</code>. It tells Erlang VM how often nodes should check if intra-node communication was not interrupted. This option must have identical value on all nodes, or it will lead to subtle bugs. Usually leaving default value of this is option is best, tweak it only if you know what you are doing. The default value is <code>1 minute</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#new_sql_schema","title":"new_sql_schema","text":"<p><code>true | false</code> </p> <p>Whether to use the new SQL schema. All schemas are located at https://github.com/processone/ejabberd/tree/25.07/sql. There are two schemas available. The default legacy schema stores one XMPP domain into one ejabberd database. The <code>new</code> schema can handle several XMPP domains in a single ejabberd database. Using this <code>new</code> schema is best when serving several XMPP domains and/or changing domains from time to time. This avoid need to manage several databases and handle complex configuration changes. The default depends on configuration flag <code>--enable-new-sql-schema</code> which is set at compile time.</p>","boost":1},{"location":"admin/configuration/toplevel/#oauth_access","title":"oauth_access","text":"<p><code>AccessName</code> </p> <p>By default creating OAuth tokens is not allowed. To define which users can create OAuth tokens, you can refer to an ejabberd access rule in the <code>oauth_access</code> option. Use <code>all</code> to allow everyone to create tokens.</p>","boost":1},{"location":"admin/configuration/toplevel/#oauth_cache_life_time","title":"oauth_cache_life_time","text":"<p><code>timeout()</code> </p> <p>Same as cache_life_time, but applied to OAuth cache only. If not set, the value from cache_life_time will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#oauth_cache_missed","title":"oauth_cache_missed","text":"<p><code>true | false</code> </p> <p>Same as cache_missed, but applied to OAuth cache only. If not set, the value from cache_missed will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#oauth_cache_rest_failure_life_time","title":"oauth_cache_rest_failure_life_time","text":"<p><code>timeout()</code> </p> <p> added in 21.01</p> <p>The time that a failure in OAuth ReST is cached. The default value is <code>infinity</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#oauth_cache_size","title":"oauth_cache_size","text":"<p><code>pos_integer() | infinity</code> </p> <p>Same as cache_size, but applied to OAuth cache only. If not set, the value from cache_size will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#oauth_client_id_check","title":"oauth_client_id_check","text":"<p><code>allow | db | deny</code> </p> <p>Define whether the client authentication is always allowed, denied, or it will depend if the client ID is present in the database. The default value is <code>allow</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#oauth_db_type","title":"oauth_db_type","text":"<p><code>mnesia | sql</code> </p> <p>Database backend to use for OAuth authentication. The default value is picked from default_db option, or if it\u2019s not set, <code>mnesia</code> will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#oauth_expire","title":"oauth_expire","text":"<p><code>timeout()</code> </p> <p>Time during which the OAuth token is valid, in seconds. After that amount of time, the token expires and the delegated credential cannot be used and is removed from the database. The default is <code>4294967</code> seconds.</p>","boost":1},{"location":"admin/configuration/toplevel/#oauth_use_cache","title":"oauth_use_cache","text":"<p><code>true | false</code> </p> <p>Same as use_cache, but applied to OAuth cache only. If not set, the value from use_cache will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#oom_killer","title":"oom_killer","text":"<p><code>true | false</code> </p> <p>Enable or disable OOM (out-of-memory) killer. When system memory raises above the limit defined in oom_watermark option, ejabberd triggers OOM killer to terminate most memory consuming Erlang processes. Note that in order to maintain functionality, ejabberd only attempts to kill transient processes, such as those managing client sessions, s2s or database connections. The default value is <code>true</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#oom_queue","title":"oom_queue","text":"<p><code>Size</code> </p> <p>Trigger OOM killer when some of the running Erlang processes have messages queue above this <code>Size</code>. Note that such processes won\u2019t be killed if oom_killer option is set to <code>false</code> or if oom_watermark is not reached yet.</p>","boost":1},{"location":"admin/configuration/toplevel/#oom_watermark","title":"oom_watermark","text":"<p><code>Percent</code> </p> <p>A percent of total system memory consumed at which OOM killer should be activated with some of the processes possibly be killed (see oom_killer option). Later, when memory drops below this <code>Percent</code>, OOM killer is deactivated. The default value is <code>80</code> percents.</p>","boost":1},{"location":"admin/configuration/toplevel/#outgoing_s2s_families","title":"outgoing_s2s_families","text":"<p><code>[ipv6 | ipv4, ...]</code> </p> <p> changed in 23.01</p> <p>Specify which address families to try, in what order. The default is <code>[ipv6, ipv4]</code> which means it first tries connecting with IPv6, if that fails it tries using IPv4. This option is obsolete and irrelevant when using ejabberd 23.01 and Erlang/OTP 22, or newer versions of them.</p>","boost":1},{"location":"admin/configuration/toplevel/#outgoing_s2s_ipv4_address","title":"outgoing_s2s_ipv4_address","text":"<p><code>Address</code> </p> <p> added in 20.12</p> <p>Specify the IPv4 address that will be used when establishing an outgoing S2S IPv4 connection, for example <code>\"127.0.0.1\"</code>. The default value is <code>undefined</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#outgoing_s2s_ipv6_address","title":"outgoing_s2s_ipv6_address","text":"<p><code>Address</code> </p> <p> added in 20.12</p> <p>Specify the IPv6 address that will be used when establishing an outgoing S2S IPv6 connection, for example <code>\"::FFFF:127.0.0.1\"</code>. The default value is <code>undefined</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#outgoing_s2s_port","title":"outgoing_s2s_port","text":"<p><code>1..65535</code> </p> <p>A port number to use for outgoing s2s connections when the target server doesn\u2019t have an SRV record. The default value is <code>5269</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#outgoing_s2s_timeout","title":"outgoing_s2s_timeout","text":"<p><code>timeout()</code> </p> <p>The timeout in seconds for outgoing S2S connection attempts. The default value is <code>10</code> seconds.</p>","boost":1},{"location":"admin/configuration/toplevel/#pam_service","title":"pam_service","text":"<p><code>Name</code> </p> <p>This option defines the PAM service name. Refer to the PAM documentation of your operation system for more information. The default value is <code>ejabberd</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#pam_userinfotype","title":"pam_userinfotype","text":"<p><code>username | jid</code> </p> <p>This option defines what type of information about the user ejabberd provides to the PAM service: only the username, or the user\u2019s JID. Default is <code>username</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#pgsql_users_number_estimate","title":"pgsql_users_number_estimate","text":"<p><code>true | false</code> </p> <p>Whether to use PostgreSQL estimation when counting registered users. The default value is <code>false</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#queue_dir","title":"queue_dir","text":"<p><code>Directory</code> </p> <p>If queue_type option is set to <code>file</code>, use this <code>Directory</code> to store file queues. The default is to keep queues inside Mnesia directory.</p>","boost":1},{"location":"admin/configuration/toplevel/#queue_type","title":"queue_type","text":"<p><code>ram | file</code> </p> <p>Default type of queues in ejabberd. Modules may have its own value of the option. The value of <code>ram</code> means that queues will be kept in memory. If value <code>file</code> is set, you may also specify directory in queue_dir option where file queues will be placed. The default value is <code>ram</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#redis_connect_timeout","title":"redis_connect_timeout","text":"<p><code>timeout()</code> </p> <p>A timeout to wait for the connection to be re-established to the Redis server. The default is <code>1 second</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#redis_db","title":"redis_db","text":"<p><code>Number</code> </p> <p>Redis database number. The default is <code>0</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#redis_password","title":"redis_password","text":"<p><code>Password</code> </p> <p>The password to the Redis server. The default is an empty string, i.e. no password.</p>","boost":1},{"location":"admin/configuration/toplevel/#redis_pool_size","title":"redis_pool_size","text":"<p><code>Number</code> </p> <p>The number of simultaneous connections to the Redis server. The default value is <code>10</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#redis_port","title":"redis_port","text":"<p><code>1..65535</code> </p> <p>The port where the Redis server is accepting connections. The default is <code>6379</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#redis_queue_type","title":"redis_queue_type","text":"<p><code>ram | file</code> </p> <p>The type of request queue for the Redis server. See description of queue_type option for the explanation. The default value is the value defined in queue_type or <code>ram</code> if the latter is not set.</p>","boost":1},{"location":"admin/configuration/toplevel/#redis_server","title":"redis_server","text":"<p><code>Host | IP Address | Unix Socket Path</code> </p> <p> improved in 24.12</p> <p>A hostname, IP address or unix domain socket file of the Redis server. Setup the path to unix domain socket like: <code>\"unix:/path/to/socket\"</code>. The default value is <code>localhost</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#registration_timeout","title":"registration_timeout","text":"<p><code>timeout()</code> </p> <p>This is a global option for module mod_register. It limits the frequency of registrations from a given IP or username. So, a user that tries to register a new account from the same IP address or JID during this time after their previous registration will receive an error with the corresponding explanation. To disable this limitation, set the value to <code>infinity</code>. The default value is <code>600 seconds</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#resource_conflict","title":"resource_conflict","text":"<p><code>setresource | closeold | closenew</code> </p> <p>NOTE: this option is deprecated and may be removed anytime in the future versions. The possible values match exactly the three possibilities described in XMPP Core: section 7.7.2.2. The default value is <code>closeold</code>. If the client uses old Jabber Non-SASL authentication (XEP-0078), then this option is not respected, and the action performed is <code>closeold</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#rest_proxy","title":"rest_proxy \ud83d\udfe4","text":"<p><code>Host</code> </p> <p> added in 25.07</p> <p>Address of a HTTP Connect proxy used by modules issuing rest calls (like ejabberd_oauth_rest)</p>","boost":1},{"location":"admin/configuration/toplevel/#rest_proxy_password","title":"rest_proxy_password \ud83d\udfe4","text":"<p><code>string()</code> </p> <p> added in 25.07</p> <p>Password used to authenticate to HTTP Connect proxy used by modules issuing rest calls (like ejabberd_oauth_rest)</p>","boost":1},{"location":"admin/configuration/toplevel/#rest_proxy_port","title":"rest_proxy_port \ud83d\udfe4","text":"<p><code>1..65535</code> </p> <p> added in 25.07</p> <p>Port of a HTTP Connect proxy used by modules issuing rest calls (like ejabberd_oauth_rest)</p>","boost":1},{"location":"admin/configuration/toplevel/#rest_proxy_username","title":"rest_proxy_username \ud83d\udfe4","text":"<p><code>string()</code> </p> <p> added in 25.07</p> <p>Username used to authenticate to HTTP Connect proxy used by modules issuing rest calls (like ejabberd_oauth_rest)</p>","boost":1},{"location":"admin/configuration/toplevel/#router_cache_life_time","title":"router_cache_life_time","text":"<p><code>timeout()</code> </p> <p>Same as cache_life_time, but applied to routing table cache only. If not set, the value from cache_life_time will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#router_cache_missed","title":"router_cache_missed","text":"<p><code>true | false</code> </p> <p>Same as cache_missed, but applied to routing table cache only. If not set, the value from cache_missed will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#router_cache_size","title":"router_cache_size","text":"<p><code>pos_integer() | infinity</code> </p> <p>Same as cache_size, but applied to routing table cache only. If not set, the value from cache_size will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#router_db_type","title":"router_db_type","text":"<p><code>mnesia | redis | sql</code> </p> <p>Database backend to use for routing information. The default value is picked from default_ram_db option, or if it\u2019s not set, <code>mnesia</code> will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#router_use_cache","title":"router_use_cache","text":"<p><code>true | false</code> </p> <p>Same as use_cache, but applied to routing table cache only. If not set, the value from use_cache will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#rpc_timeout","title":"rpc_timeout","text":"<p><code>timeout()</code> </p> <p>A timeout for remote function calls between nodes in an ejabberd cluster. You should probably never change this value since those calls are used for internal needs only. The default value is <code>5</code> seconds.</p>","boost":1},{"location":"admin/configuration/toplevel/#s2s_access","title":"s2s_access","text":"<p><code>Access</code> </p> <p>This Access Rule defines to what remote servers can s2s connections be established. The default value is <code>all</code>; no restrictions are applied, it is allowed to connect s2s to/from all remote servers.</p>","boost":1},{"location":"admin/configuration/toplevel/#s2s_cafile","title":"s2s_cafile","text":"<p><code>Path</code> </p> <p>A path to a file with CA root certificates that will be used to authenticate s2s connections. If not set, the value of ca_file will be used.</p> <p>You can use host_config to specify this option per-vhost.</p>","boost":1},{"location":"admin/configuration/toplevel/#s2s_ciphers","title":"s2s_ciphers","text":"<p><code>[Cipher, ...]</code> </p> <p>A list of OpenSSL ciphers to use for s2s connections. The default value is shown in the example below:</p> <p>Example:</p> <pre><code>s2s_ciphers:\n  - HIGH\n  - \"!aNULL\"\n  - \"!eNULL\"\n  - \"!3DES\"\n  - \"@STRENGTH\"\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#s2s_dhfile","title":"s2s_dhfile","text":"<p><code>Path</code> </p> <p>Full path to a file containing custom DH parameters to use for s2s connections. Such a file could be created with the command \"openssl dhparam -out dh.pem 2048\". If this option is not specified, 2048-bit MODP Group with 256-bit Prime Order Subgroup will be used as defined in RFC5114 Section 2.3.</p>","boost":1},{"location":"admin/configuration/toplevel/#s2s_dns_retries","title":"s2s_dns_retries","text":"<p><code>Number</code> </p> <p>DNS resolving retries. The default value is <code>2</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#s2s_dns_timeout","title":"s2s_dns_timeout","text":"<p><code>timeout()</code> </p> <p>The timeout for DNS resolving. The default value is <code>10</code> seconds.</p>","boost":1},{"location":"admin/configuration/toplevel/#s2s_max_retry_delay","title":"s2s_max_retry_delay","text":"<p><code>timeout()</code> </p> <p>The maximum allowed delay for s2s connection retry to connect after a failed connection attempt. The default value is <code>300</code> seconds (5 minutes).</p>","boost":1},{"location":"admin/configuration/toplevel/#s2s_protocol_options","title":"s2s_protocol_options","text":"<p><code>[Option, ...]</code> </p> <p>List of general SSL options to use for s2s connections. These map to OpenSSL\u2019s <code>set_options()</code>. The default value is shown in the example below:</p> <p>Example:</p> <pre><code>s2s_protocol_options:\n  - no_sslv3\n  - cipher_server_preference\n  - no_compression\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#s2s_queue_type","title":"s2s_queue_type","text":"<p><code>ram | file</code> </p> <p>The type of a queue for s2s packets. See description of queue_type option for the explanation. The default value is the value defined in queue_type or <code>ram</code> if the latter is not set.</p>","boost":1},{"location":"admin/configuration/toplevel/#s2s_timeout","title":"s2s_timeout","text":"<p><code>timeout()</code> </p> <p>A time to wait before closing an idle s2s connection. The default value is <code>1</code> hour.</p>","boost":1},{"location":"admin/configuration/toplevel/#s2s_tls_compression","title":"s2s_tls_compression","text":"<p><code>true | false</code> </p> <p>Whether to enable or disable TLS compression for s2s connections. The default value is <code>false</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#s2s_use_starttls","title":"s2s_use_starttls","text":"<p><code>true | false | optional | required</code> </p> <p>Whether to use STARTTLS for s2s connections. The value of <code>false</code> means STARTTLS is prohibited. The value of <code>true</code> or <code>optional</code> means STARTTLS is enabled but plain connections are still allowed. And the value of <code>required</code> means that only STARTTLS connections are allowed. The default value is <code>false</code> (for historical reasons).</p>","boost":1},{"location":"admin/configuration/toplevel/#s2s_zlib","title":"s2s_zlib","text":"<p><code>true | false</code> </p> <p>Whether to use <code>zlib</code> compression (as defined in XEP-0138) or not. The default value is <code>false</code>. WARNING: this type of compression is nowadays considered insecure.</p>","boost":1},{"location":"admin/configuration/toplevel/#shaper","title":"shaper","text":"<p><code>{ShaperName: Rate}</code> </p> <p>The option defines a set of shapers. Every shaper is assigned a name <code>ShaperName</code> that can be used in other parts of the configuration file, such as shaper_rules option. The shaper itself is defined by its <code>Rate</code>, where <code>Rate</code> stands for the maximum allowed incoming rate in bytes per second. When a connection exceeds this limit, ejabberd stops reading from the socket until the average rate is again below the allowed maximum. In the example below shaper <code>normal</code> limits the traffic speed to 1,000 bytes/sec and shaper <code>fast</code> limits the traffic speed to 50,000 bytes/sec:</p> <p>Example:</p> <pre><code>shaper:\n  normal: 1000\n  fast: 50000\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#shaper_rules","title":"shaper_rules","text":"<p><code>{ShaperRuleName: {Number|ShaperName: ACLName|ACLDefinition}}</code> </p> <p>This option defines shaper rules to use for matching user/hosts. Semantics is similar to access_rules option, the only difference is that instead using <code>allow</code> or <code>deny</code>, a name of a shaper (defined in shaper option) or a positive number should be used.</p> <p>Example:</p> <pre><code>shaper_rules:\n  connections_limit:\n    10:\n      user: peter@example.com\n    100: admin\n    5: all\n  download_speed:\n    fast: admin\n    slow: anonymous_users\n    normal: all\n  log_days: 30\n</code></pre>","boost":1},{"location":"admin/configuration/toplevel/#sm_cache_life_time","title":"sm_cache_life_time","text":"<p><code>timeout()</code> </p> <p>Same as cache_life_time, but applied to client sessions table cache only. If not set, the value from cache_life_time will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#sm_cache_missed","title":"sm_cache_missed","text":"<p><code>true | false</code> </p> <p>Same as cache_missed, but applied to client sessions table cache only. If not set, the value from cache_missed will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#sm_cache_size","title":"sm_cache_size","text":"<p><code>pos_integer() | infinity</code> </p> <p>Same as cache_size, but applied to client sessions table cache only. If not set, the value from cache_size will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#sm_db_type","title":"sm_db_type","text":"<p><code>mnesia | redis | sql</code> </p> <p>Database backend to use for client sessions information. The default value is picked from default_ram_db option, or if it\u2019s not set, <code>mnesia</code> will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#sm_use_cache","title":"sm_use_cache","text":"<p><code>true | false</code> </p> <p>Same as use_cache, but applied to client sessions table cache only. If not set, the value from use_cache will be used.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_connect_timeout","title":"sql_connect_timeout","text":"<p><code>timeout()</code> </p> <p>A time to wait for connection to an SQL server to be established. The default value is <code>5</code> seconds.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_database","title":"sql_database","text":"<p><code>Database</code> </p> <p>An SQL database name. For SQLite this must be a full path to a database file. The default value is <code>ejabberd</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_flags","title":"sql_flags","text":"<p><code>[mysql_alternative_upsert]</code> </p> <p> added in 24.02</p> <p>This option accepts a list of SQL flags, and is empty by default. <code>mysql_alternative_upsert</code> forces the alternative upsert implementation in MySQL.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_keepalive_interval","title":"sql_keepalive_interval","text":"<p><code>timeout()</code> </p> <p>An interval to make a dummy SQL request to keep alive the connections to the database. There is no default value, so no keepalive requests are made.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_odbc_driver","title":"sql_odbc_driver","text":"<p><code>Path</code> </p> <p> added in 20.12</p> <p>Path to the ODBC driver to use to connect to a Microsoft SQL Server database. This option only applies if the sql_type option is set to <code>mssql</code> and sql_server is not an ODBC connection string. The default value is: <code>libtdsodbc.so</code></p>","boost":1},{"location":"admin/configuration/toplevel/#sql_password","title":"sql_password","text":"<p><code>Password</code> </p> <p>The password for SQL authentication. The default is empty string.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_pool_size","title":"sql_pool_size","text":"<p><code>Size</code> </p> <p>Number of connections to the SQL server that ejabberd will open for each virtual host. The default value is <code>10</code>. WARNING: for SQLite this value is <code>1</code> by default and it\u2019s not recommended to change it due to potential race conditions.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_port","title":"sql_port","text":"<p><code>1..65535</code> </p> <p>The port where the SQL server is accepting connections. The default is <code>3306</code> for MySQL, <code>5432</code> for PostgreSQL and <code>1433</code> for MS SQL. The option has no effect for SQLite.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_prepared_statements","title":"sql_prepared_statements","text":"<p><code>true | false</code> </p> <p> added in 20.01</p> <p>This option is <code>true</code> by default, and is useful to disable prepared statements. The option is valid for PostgreSQL and MySQL.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_query_timeout","title":"sql_query_timeout","text":"<p><code>timeout()</code> </p> <p>A time to wait for an SQL query response. The default value is <code>60</code> seconds.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_queue_type","title":"sql_queue_type","text":"<p><code>ram | file</code> </p> <p>The type of a request queue for the SQL server. See description of queue_type option for the explanation. The default value is the value defined in queue_type or <code>ram</code> if the latter is not set.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_server","title":"sql_server","text":"<p><code>Host | IP Address | ODBC Connection String | Unix Socket Path</code> </p> <p> improved in 24.06</p> <p>The hostname or IP address of the SQL server. For sql_type <code>mssql</code> or <code>odbc</code> this can also be an ODBC connection string. When sql_type is <code>mysql</code> or <code>pgsql</code>, this can be the path to a unix domain socket expressed like: <code>\"unix:/path/to/socket\"</code>.The default value is <code>localhost</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_ssl","title":"sql_ssl","text":"<p><code>true | false</code> </p> <p> improved in 20.03</p> <p>Whether to use SSL encrypted connections to the SQL server. The option is only available for MySQL, MS SQL and PostgreSQL. The default value is <code>false</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_ssl_cafile","title":"sql_ssl_cafile","text":"<p><code>Path</code> </p> <p>A path to a file with CA root certificates that will be used to verify SQL connections. Implies sql_ssl and sql_ssl_verify options are set to <code>true</code>. There is no default which means certificate verification is disabled. This option has no effect for MS SQL.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_ssl_certfile","title":"sql_ssl_certfile","text":"<p><code>Path</code> </p> <p>A path to a certificate file that will be used for SSL connections to the SQL server. Implies sql_ssl option is set to <code>true</code>. There is no default which means ejabberd won\u2019t provide a client certificate to the SQL server. This option has no effect for MS SQL.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_ssl_verify","title":"sql_ssl_verify","text":"<p><code>true | false</code> </p> <p>Whether to verify SSL connection to the SQL server against CA root certificates defined in sql_ssl_cafile option. Implies sql_ssl option is set to <code>true</code>. This option has no effect for MS SQL. The default value is <code>false</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_start_interval","title":"sql_start_interval","text":"<p><code>timeout()</code> </p> <p>A time to wait before retrying to restore failed SQL connection. The default value is <code>30</code> seconds.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_type","title":"sql_type","text":"<p><code>mssql | mysql | odbc | pgsql | sqlite</code> </p> <p>The type of an SQL connection. The default is <code>odbc</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#sql_username","title":"sql_username","text":"<p><code>Username</code> </p> <p>A user name for SQL authentication. The default value is <code>ejabberd</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#trusted_proxies","title":"trusted_proxies","text":"<p><code>all | [Network1, Network2, ...]</code> </p> <p>Specify what proxies are trusted when an HTTP request contains the header <code>X-Forwarded-For</code>. You can specify <code>all</code> to allow all proxies, or specify a list of IPs, possibly with masks. The default value is an empty list. Using this option you can know the real IP of the request, for admin purpose, or security configuration (for example using mod_fail2ban). IMPORTANT: The proxy MUST be configured to set the <code>X-Forwarded-For</code> header if you enable this option as, otherwise, the client can set it itself and as a result the IP value cannot be trusted for security rules in ejabberd.</p>","boost":1},{"location":"admin/configuration/toplevel/#update_sql_schema","title":"update_sql_schema","text":"<p><code>true | false</code> </p> <p> updated in 24.06</p> <p>Allow ejabberd to update SQL schema in MySQL, PostgreSQL and SQLite databases. This option was added in ejabberd 23.10, and enabled by default since 24.06. The default value is <code>true</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#update_sql_schema_timeout","title":"update_sql_schema_timeout","text":"<p><code>timeout()</code> </p> <p> added in 24.07</p> <p>Time allocated to SQL schema update queries. The default value is set to 5 minutes.</p>","boost":1},{"location":"admin/configuration/toplevel/#use_cache","title":"use_cache","text":"<p><code>true | false</code> </p> <p>Enable or disable cache. The default is <code>true</code>. Several modules have a similar option; and some core ejabberd parts support similar options too, see auth_use_cache, oauth_use_cache, router_use_cache, and sm_use_cache.</p>","boost":1},{"location":"admin/configuration/toplevel/#validate_stream","title":"validate_stream","text":"<p><code>true | false</code> </p> <p>Whether to validate any incoming XML packet according to the schemas of supported XMPP extensions. WARNING: the validation is only intended for the use by client developers - don\u2019t enable it in production environment. The default value is <code>false</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#version","title":"version","text":"<p><code>string()</code> </p> <p>The option can be used to set custom ejabberd version, that will be used by different parts of ejabberd, for example by mod_version module. The default value is obtained at compile time from the underlying version control system.</p>","boost":1},{"location":"admin/configuration/toplevel/#websocket_origin","title":"websocket_origin","text":"<p><code>ignore | URL</code> </p> <p>This option enables validation for <code>Origin</code> header to protect against connections from other domains than given in the configuration file. In this way, the lower layer load balancer can be chosen for a specific ejabberd implementation while still providing a secure WebSocket connection. The default value is <code>ignore</code>. An example value of the <code>URL</code> is <code>\"https://test.example.org:8081\"</code>.</p>","boost":1},{"location":"admin/configuration/toplevel/#websocket_ping_interval","title":"websocket_ping_interval","text":"<p><code>timeout()</code> </p> <p>Defines time between pings sent by the server to a client (WebSocket level protocol pings are used for this) to keep a connection active. If the client doesn\u2019t respond to two consecutive pings, the connection will be assumed as closed. The value of <code>0</code> can be used to disable the feature. This option makes the server sending pings only for connections using the RFC compliant protocol. For older style connections the server expects that whitespace pings would be used for this purpose. The default value is <code>60</code> seconds.</p>","boost":1},{"location":"admin/configuration/toplevel/#websocket_timeout","title":"websocket_timeout","text":"<p><code>timeout()</code> </p> <p>Amount of time without any communication after which the connection would be closed. The default value is <code>300</code> seconds.</p>","boost":1},{"location":"admin/contrib/","title":"External authentication","text":"<p>There are examples of external authentication scripts in many different languages in the page: <code>https://www.ejabberd.im/extauth/</code></p>"},{"location":"admin/contrib/#main-contribution-repository","title":"Main contribution repository","text":"<p>Check also the contributions hosted in the <code>ejabberd-contrib Github repository</code>.</p>"},{"location":"admin/contrib/#ejabberd-api-libraries","title":"ejabberd API libraries","text":"<p>Here is a ejabberd API implementations allowing to ease ejabberd integration with your own backends:</p> <ul> <li><code>Pyejabberd</code>:   Client library for ejabberd XMLRPC API, in Python, by Dirkmoors, MIT license.     See <code>https://pypi.org/project/pyejabberd/</code>     and <code>https://github.com/dirkmoors/pyejabberd</code></li> </ul>"},{"location":"admin/contrib/#old-obsolete-contributions","title":"Old / obsolete contributions","text":"<p>Finally, there is an old list of contributions that were developed for ejabberd 2.x in: <code>https://www.ejabberd.im/contributions/</code></p>"},{"location":"admin/guide/","title":"Advanced ejabberd Administration","text":"<ul> <li>Clustering ejabberd</li> <li>Managing an ejabberd server</li> <li>MQTT Support</li> <li>Securing ejabberd</li> <li>Troubleshooting ejabberd</li> </ul>"},{"location":"admin/guide/clustering/","title":"Clustering","text":""},{"location":"admin/guide/clustering/#purpose","title":"Purpose","text":"<p>The purpose of ejabberd clustering is to be able to use several servers for a single or small group of large domains, for fault-tolerance and scalability.</p> <p>Note that you do not necessarily need clustering if you want to run two large domains independently. You may simply want to run two different independent servers.</p> <p>However, to build reliable service and support large user base, clustering is a must have feature.</p>"},{"location":"admin/guide/clustering/#how-it-works","title":"How it Works","text":"<p>A XMPP domain is served by one or more ejabberd nodes. These nodes can be run on different machines that are connected via a network. They all must have the ability to connect to port 4369 of all another nodes, and must have the same magic cookie (see Erlang/OTP documentation, in other words the file <code>~ejabberd/.erlang.cookie</code> must be the same on all nodes). This is needed because all nodes exchange information about connected users, s2s connections, registered services, etc\u2026</p> <p>Each ejabberd node has the following modules:</p> <ul> <li>router</li> <li>local router</li> <li>session manager</li> <li>s2s manager</li> </ul>"},{"location":"admin/guide/clustering/#router","title":"Router","text":"<p>This module is the main router of XMPP packets on each node. It routes them based on their destination\u2019s domains. It uses a global routing table. The domain of the packet\u2019s destination is searched in the routing table, and if it is found, the packet is routed to the appropriate process. If not, it is sent to the s2s manager.</p>"},{"location":"admin/guide/clustering/#local-router","title":"Local Router","text":"<p>This module routes packets which have a destination domain equal to one of this server\u2019s host names. If the destination JID has a non-empty user part, it is routed to the session manager, otherwise it is processed depending on its content.</p>"},{"location":"admin/guide/clustering/#session-manager","title":"Session Manager","text":"<p>This module routes packets to local users. It looks up to which user resource a packet must be sent via a presence table. Then the packet is either routed to the appropriate c2s process, or stored in offline storage, or bounced back.</p>"},{"location":"admin/guide/clustering/#s2s-manager","title":"s2s Manager","text":"<p>This module routes packets to other XMPP servers. First, it checks if an opened s2s connection from the domain of the packet\u2019s source to the domain of the packet\u2019s destination exists. If that is the case, the s2s manager routes the packet to the process serving this connection, otherwise a new connection is opened.</p>"},{"location":"admin/guide/clustering/#before-you-get-started","title":"Before you get started","text":"<p>Before you start implementing clustering, there are a few things you need to take into account:</p> <ul> <li>Cluster should be set up in a single data center: The clustering in   ejabberd Community Edition relies on low latency networking. While it may   work across regions, it is recommended that you run an ejabberd   cluster in a single Amazon region.</li> <li>Clustering relies on Erlang features and Mnesia shared schemas. Before   getting started, it is best to get familiar with the Erlang environment   as this guide will heavily reference Erlang terms.</li> </ul>"},{"location":"admin/guide/clustering/#clustering-setup","title":"Clustering Setup","text":"<p>erlang node</p> <p>A node in erlang connected to a cluster.   See Erlang node name</p>"},{"location":"admin/guide/clustering/#adding-a-node-to-a-cluster","title":"Adding a node to a cluster","text":"<p>Suppose you have already configured ejabberd on one node named <code>ejabberd01</code>. Let's create an additional node (<code>ejabberd02</code>) and connect them together.</p> <ol> <li>Copy the <code>/home/ejabberd/.erlang.cookie</code> file from <code>ejabberd01</code> to    <code>ejabberd02</code>.</li> </ol> <p>Alternatively you could pass the <code>-setcookie &lt;value&gt;</code>    option to all <code>erl</code> commands below.</p> <ol> <li> <p>Make sure your new ejabberd node is properly configured. Usually,    you want to have the same <code>ejabberd.yml</code> config file on the new node that on the    other cluster nodes.</p> </li> <li> <p>Adding a node to the cluster is done by starting a new ejabberd node within the same network, and running join_cluster from a cluster node. On the <code>ejabberd02</code> node for example, as ejabberd is already started, run the following command as the ejabberd daemon user, using the ejabberdctl script:</p> </li> </ol> <pre><code>ejabberdctl --no-timeout join_cluster 'ejabberd@ejabberd01'\n</code></pre> <p>This enables ejabberd's internal replications to be launched across all nodes so new nodes can start receiving messages from other nodes and be registered in the routing tables.</p>"},{"location":"admin/guide/clustering/#removing-a-node-from-the-cluster","title":"Removing a node from the cluster","text":"<p>To remove a node from the cluster, it just needs to be shut down. There is no specific delay for the cluster to figure out that the node is gone, the node is immediately removed from other router entries. All clients directly connected to the stopped node are disconnected, and should reconnect to other nodes.</p> <p>If the cluster is used behind a load balancer and the node has been removed from the load balancer, no new clients should be connecting to that node but established connections should be kept, thus allowing to remove a node smoothly, by stopping it after most clients disconnected by themselves. If the node is started again, it's immediately attached back to the cluster until it has been explicitly removed permanently from the cluster.</p> <p>To permanently remove a running node from the cluster, the leave_cluster command must be run as the ejabberd daemon user, from one node of the cluster:</p> <pre><code>ejabberdctl leave_cluster 'ejabberd@ejabberd02'\n</code></pre> <p>The removed node must be running while calling leave_cluster to make it permanently removed. It's then immediately stopped.</p>"},{"location":"admin/guide/clustering/#restarting-cluster-nodes","title":"Restarting cluster nodes","text":"<p>Ejabberd Community Server uses mnesia internal database to manage cluster and internode synchronization. As a result, you may restart ejabberd nodes as long as there is at least one running node. If you stop the last running node of a cluster, you MUST restart that node first in order to get a running service back.</p>"},{"location":"admin/guide/clustering/#service-load-balancing","title":"Service Load-Balancing","text":""},{"location":"admin/guide/clustering/#domain-load-balancing-algorithm","title":"Domain Load-Balancing Algorithm","text":"<p>ejabberd includes an algorithm to load balance the components that are plugged on an ejabberd cluster. It means that you can plug one or several instances of the same component on each ejabberd cluster and that the traffic will be automatically distributed.</p> <p>The default distribution algorithm attempts to deliver to a local instance of a component. If several local instances are available, one instance is chosen at random. If no instance is available locally, one instance is randomly chosen among the remote component instances.</p> <p>If you need a different behaviour, you can change the load balancing behaviour with the domain_balancing option.</p>"},{"location":"admin/guide/clustering/#load-balancing-buckets","title":"Load-Balancing Buckets","text":"<p>When there is a risk of failure for a given component, domain balancing can cause service trouble. If one component is failing the service will not work correctly unless the sessions are rebalanced.</p> <p>In this case, it is best to limit the problem to the sessions handled by the failing component. This is what the <code>component_number</code> option does, making the load balancing algorithm not dynamic, but sticky on a fix number of component instances. Check domain_balancing top-level option documentation for details.</p>"},{"location":"admin/guide/managing/","title":"Managing an ejabberd server","text":""},{"location":"admin/guide/managing/#ejabberdctl","title":"ejabberdctl","text":"<p>ejabberdctl</p> <p>Command line administration script to start/stop ejabberd and execute API commands.</p> <p>With <code>ejabberdctl</code> you can execute:</p> <ul> <li> <p>ejabberdctl commands   like <code>start</code> and <code>stop</code> an ejabberd server</p> </li> <li> <p>ejabberd API commands   for everyday administrative tasks in your running ejabberd servers</p> </li> </ul> <p><code>ejabberdctl</code> can connect to a local ejabberd server, and even remote ones if you properly set the erlang cookie and provide the argument <code>\u2013node NODENAME</code>.</p> <p>The <code>ejabberdctl</code> script can be configured in the file <code>ejabberdctl.cfg</code>. This file includes detailed information about each configurable option. See section Erlang Runtime System.</p> <p>The <code>ejabberdctl</code> script returns a numerical status code. Success is represented by <code>0</code>, error is represented by <code>1</code>, and other codes may be used for specific results. This can be used by other scripts to determine automatically if a command succeeded or failed, for example using: <code>echo $?</code></p> <p>To restrict what commands can be executed; see API Permissions.</p>"},{"location":"admin/guide/managing/#bash-completion","title":"Bash Completion","text":"<p>If you use Bash, you can get Bash completion for ejabberdctl commands names.</p> <p>Some methods to enable that feature:</p> <ul> <li> <p>Copy the file <code>tools/ejabberdctl.bc</code> to the directory <code>/etc/bash_completion.d/</code> (in Debian, Ubuntu, Fedora and maybe others)</p> </li> <li> <p>Or add to your <code>$HOME/.bashrc</code> a line similar to:</p> <pre><code>source /path/to/ejabberd/tools/ejabberdctl.bc\n</code></pre> </li> </ul> <p>When ejabberd is running in the machine, type <code>ejabberdctl</code> in a console and press the <code>TAB</code> key.</p> <p>The first time this is used, the list of commands is extracted from ejabberd and stored in a file in <code>/tmp/</code>. The next time, that file is reused for faster responses.</p>"},{"location":"admin/guide/managing/#ejabberdctl-commands","title":"ejabberdctl Commands","text":"<p>When <code>ejabberdctl</code> is executed without any parameter, it displays the available options. If there isn't an ejabberd server running, the available parameters are:</p> <ul> <li> <p><code>start</code>:   Start ejabberd in background mode. This is the default method.</p> </li> <li> <p><code>debug</code>:   Attach an Erlang shell to an already existing ejabberd server.  This allows to execute commands interactively in the ejabberd  server.</p> </li> <li> <p><code>live</code>:   Start ejabberd in live mode: the shell keeps attached to the  started server, showing log messages and allowing to execute  interactive commands.</p> </li> </ul> <p>If there is an ejabberd server running in the system, <code>ejabberdctl</code> shows the <code>ejabberdctl commands</code> described below and all the <code>ejabberd commands</code> available in that server (see List of ejabberd Commands).</p> <p>The <code>ejabberdctl commands</code> are:</p> <ul> <li> <p><code>help</code>:   Get help about ejabberdctl or any available command. Try  <code>ejabberdctl help help</code>.</p> </li> <li> <p><code>status</code>:   Check the status of the ejabberd server.</p> </li> <li> <p><code>stop</code>:   Stop the ejabberd server.</p> </li> <li> <p><code>restart</code>:   Restart the ejabberd server.</p> </li> <li> <p><code>mnesia</code>:   Get information about the Mnesia database.</p> </li> </ul>"},{"location":"admin/guide/managing/#ctl_over_http","title":"CTL_OVER_HTTP","text":"<p> added in 25.03</p> <p>The <code>ejabberdctl</code> script can execute ejabberd API commands inside the running ejabberd node. For this, the script starts another erlang virtual machine and connects it to the already existing one that is running ejabberd.</p> <p>This connection method is acceptable for performing a few administrative tasks (reload configuration, register an account, etc). However, ejabberdctl is noticeably slow for performing multiple calls, for example to register 1000 accounts. In that case, it is preferable to send ReST queries over HTTP to mod_http_api.</p> <p>ejabberdctl can be configured to use an HTTP connection to execute the command, which is way faster than starting an erlang node, around 20 times faster.</p> <p>To enable this feature, first configure in <code>ejabberd.yml</code>:</p> <pre><code>listen:\n  -\n    port: \"unix:sockets/ctl_over_http.sock\"\n    module: ejabberd_http\n    tag: \"ctl_over_http\"\n    unix_socket:\n      mode: '0600'\n    request_handlers:\n      /ctl: ejabberd_ctl\n\napi_permissions:\n  \"console commands over http\":\n    from:\n      - tag: \"ctl_over_http\"\n    who: all\n    what: \"*\"\n</code></pre> <p>Then enable CTL_OVER_HTTP in <code>ejabberdctl.cfg</code>:</p> <pre><code>CTL_OVER_HTTP=sockets/ctl_over_http.sock\n</code></pre> <p>Let's register 100 accounts using the standard method and CTL_OVER_HTTP:</p> <pre><code>$ time for (( i=100 ; i ; i=i-1 )) ; do ejabberdctl register user$i localhost pass; done\n...\nreal    0m43,929s\nuser    0m41,878s\nsys     0m10,558s\n\n$ time for (( i=100 ; i  ; i=i-1 )) ; do CTL_OVER_HTTP=sockets/ctl_over_http.socket ejabberdctl register user$i localhost pass; done\n...\nreal    0m2,144s\nuser    0m1,377s\nsys     0m0,566s\n</code></pre>"},{"location":"admin/guide/managing/#ejabberd-commands","title":"ejabberd Commands","text":"<p>Please go to the API section.</p>"},{"location":"admin/guide/managing/#erlang-runtime-system","title":"Erlang Runtime System","text":"<p>ejabberd is an Erlang/OTP application that runs inside an Erlang runtime system. This system is configured using environment variables and command line parameters. The <code>ejabberdctl</code> administration script uses many of those possibilities. You can configure some of them with the file <code>ejabberdctl.cfg</code>, which includes detailed description about them. This section describes for reference purposes all the environment variables and command line parameters.</p> <p>The environment variables:</p> <p><code>EJABBERD_CONFIG_PATH</code>:   Path to the ejabberd configuration file.</p> <p><code>EJABBERD_MSGS_PATH</code>:   Path to the directory with translated strings.</p> <p><code>EJABBERD_LOG_PATH</code>:   Path to the ejabberd service log file.</p> <p><code>EJABBERD_SO_PATH</code>:   Path to the directory with binary system libraries.</p> <p><code>EJABBERD_PID_PATH</code>:   Path to the PID file that ejabberd can create when started.</p> <p><code>HOME</code>:   Path to the directory that is considered ejabberd\u2019s home. This  path is used to read the file <code>.erlang.cookie</code>.</p> <p><code>ERL_CRASH_DUMP</code>:   Path to the file where crash reports will be dumped.</p> <p><code>ERL_EPMD_ADDRESS</code>:   IP address where epmd listens for connections (see epmd).</p> <p><code>ERL_INETRC</code>:   Indicates which IP name resolution to use. If using <code>-sname</code>,  specify either this option or <code>-kernel inetrc filepath</code>.</p> <p><code>ERL_MAX_PORTS</code>:   Maximum number of simultaneously open Erlang ports.</p> <p><code>ERL_MAX_ETS_TABLES</code>:   Maximum number of ETS and Mnesia tables.</p> <p>The command line parameters:</p> <p><code>-sname ejabberd</code>:   The Erlang node will be identified using only the first part of the  host name, i.e. other Erlang nodes outside this domain cannot  contact this node. This is the preferable option in most cases.</p> <p><code>-name ejabberd</code>:   The Erlang node will be fully identified. This is only useful if you  plan to setup an ejabberd cluster with nodes in different  networks.</p> <p><code>-kernel inetrc \u2019/etc/ejabberd/inetrc\u2019</code>:   Indicates which IP name resolution to use. If using <code>-sname</code>,  specify either this option or <code>ERL_INETRC</code>.</p> <p><code>-kernel inet_dist_listen_min 4200 inet_dist_listen_min 4210</code>:   Define the first and last ports that <code>epmd</code> can listen to  (see epmd).</p> <p><code>-kernel inet_dist_use_interface { 127,0,0,1 }</code>:   Define the IP address where this Erlang node listens for other nodes  connections (see epmd).</p> <p><code>-detached</code>:   Starts the Erlang system detached from the system console. Useful  for running daemons and background processes.</p> <p><code>-noinput</code>:   Ensures that the Erlang system never tries to read any input. Useful  for running daemons and background processes.</p> <p><code>-pa /var/lib/ejabberd/ebin</code>:   Specify the directory where Erlang binary files (*.beam) are  located.</p> <p><code>-s ejabberd</code>:   Tell Erlang runtime system to start the ejabberd application.</p> <p><code>-mnesia dir \u2019/var/lib/ejabberd/\u2019</code>:   Specify the Mnesia database directory.</p> <p><code>-sasl sasl_error_logger {file, /var/log/ejabberd/erlang.log}</code>:   Path to the Erlang/OTP system log file. SASL here means \u201cSystem  Architecture Support Libraries\u201d not \u201cSimple Authentication and  Security Layer\u201d.</p> <p><code>+K [true|false]</code>:   Kernel polling.</p> <p><code>-smp [auto|enable|disable]</code>:   SMP support.</p> <p><code>+P 250000</code>:   Maximum number of Erlang processes.</p> <p><code>-remsh ejabberd@localhost</code>:   Open an Erlang shell in a remote Erlang node.</p> <p><code>-hidden</code>:   The connections to other nodes are hidden (not published). The  result is that this node is not considered part of the cluster. This  is important when starting a temporary <code>ctl</code> or <code>debug</code> node.</p> <p>Note that some characters need to be escaped when used in shell scripts, for instance <code>\"</code> and <code>{}</code>. You can find other options in the Erlang manual page (<code>erl -man erl</code>).</p>"},{"location":"admin/guide/managing/#web-admin","title":"Web Admin","text":"<p>The ejabberd Web Admin allows to administer some parts of ejabberd using a web browser: accounts, Shared Roster Groups, manage the Mnesia database, create and restore backups, view server statistics, \u2026</p>"},{"location":"admin/guide/managing/#basic-setup","title":"Basic Setup","text":"<ol> <li> <p>If not done already, register an account and grant administration rights to it    using the <code>configure</code> access rule    (see Administration Account):</p> <pre><code>acl:\n  admin:\n    user: admin1@example.org\naccess_rules:\n  configure:\n    allow: admin\n</code></pre> </li> <li> <p>Make sure <code>ejabberd_web_admin</code> is available in    request_handlers    of a ejabberd_http listener.    If you want to use HTTPS, enable tls.    For example:</p> <pre><code>listen:\n   -\n     port: 5443\n     ip: \"::\"\n     module: ejabberd_http\n     tls: true\n     request_handlers:\n       /admin: ejabberd_web_admin\n</code></pre> </li> <li> <p>Open the Web Admin page in your favorite web browser. The exact address depends on your configuration; in this example the address is: <code>https://example.org:5443/admin/</code></p> </li> <li> <p>In the login window provide the full Jabber ID: <code>admin1@example.org</code> and password.    If the web address hostname is the same that the account JID,    you can provide simply the username instead of the full JID: <code>admin1</code>.</p> </li> <li> <p>You're good! You can now use the Web Admin.</p> </li> </ol>"},{"location":"admin/guide/managing/#additional-security","title":"Additional Security","text":"<p>For security reasons, you can serve the Web Admin on a secured connection and bind it to the internal LAN IP.</p> <p>In this example, the Web Admin will be available in the address <code>https://192.168.1.1:5282/admin/</code>:</p> <pre><code>hosts:\n  - example.org\n\nlisten:\n  -\n    ip: \"192.168.1.1\"\n    port: 5282\n    module: ejabberd_http\n    certfile: \"/usr/local/etc/server.pem\"\n    tls: true\n    request_handlers:\n      /admin: ejabberd_web_admin\n</code></pre>"},{"location":"admin/guide/managing/#vhost-permissions","title":"Vhost permissions","text":"<p>As you may have noticed in the previous examples, the <code>configure</code> access rule determines what ACL can access the Web Admin. And then you can add specific accounts to that ACL.</p> <p>It is possible to define specific ACL for individual vhosts, this allows you to grant administrative privilege to certain accounts only to one or some vhosts.</p> <p>In this example different accounts have different privileges in WebAdmin:</p> <ul> <li><code>adminglobal@example.net</code> can administer all virtual hosts in <code>http://example.net:5280/admin/</code></li> <li><code>admincom@example.com</code> can administer only <code>example.com</code> in <code>http://example.com:5280/admin/</code></li> </ul> <pre><code>hosts:\n  - example.net\n  - example.com\n\nlisten:\n  -\n    port: 5280\n    module: ejabberd_http\n    request_handlers:\n      /admin: ejabberd_web_admin\n\nacl:\n  admin:\n    user:\n      - adminglobal: example.net\n\naccess_rules:\n  configure:\n    allow: admin\n\nhost_config:\n  example.com:\n    acl:\n      admin:\n        user:\n          - adminglobal: example.net\n          - admincom: example.com\n</code></pre>"},{"location":"admin/guide/managing/#commands-permissions","title":"Commands permissions","text":"<p> added in 24.06</p>"},{"location":"admin/guide/managing/#developer-add-pages","title":"Developer: Add Pages","text":""},{"location":"admin/guide/managing/#developer-use-commands","title":"Developer: Use Commands","text":"<p> added in 24.06</p>"},{"location":"admin/guide/managing/#ad-hoc-commands","title":"Ad-hoc Commands","text":"<p>If you enable mod_configure and mod_adhoc, you can perform several administrative tasks in ejabberd with an XMPP client. The client must support Ad-Hoc Commands (<code>XEP-0050</code>), and you must login in the XMPP server with an account with proper privileges.</p>"},{"location":"admin/guide/managing/#change-computer-hostname","title":"Change Computer Hostname","text":"<p>ejabberd uses the distributed Mnesia database. Being distributed, Mnesia enforces consistency of its file, so it stores the name of the Erlang node in it (see section Erlang Node Name). The name of an Erlang node includes the hostname of the computer. So, the name of the Erlang node changes if you change the name of the machine in which ejabberd runs, or when you move ejabberd to a different machine.</p> <p>You have two ways to use the old Mnesia database in an ejabberd with new node name: put the old node name in <code>ejabberdctl.cfg</code>, or convert the database to the new node name.</p> <p>Those example steps will backup, convert and load the Mnesia database. You need to have either the old Mnesia spool dir or a backup of Mnesia. If you already have a backup file of the old database, you can go directly to step 5. You also need to know the old node name and the new node name. If you don\u2019t know them, look for them by executing <code>ejabberdctl</code> or in the ejabberd log files.</p> <p>Before starting, setup some variables:</p> <pre><code>OLDNODE=ejabberd@oldmachine\nNEWNODE=ejabberd@newmachine\nOLDFILE=/tmp/old.backup\nNEWFILE=/tmp/new.backup\n</code></pre> <ol> <li> <p>Start ejabberd enforcing the old node name:</p> <pre><code>ejabberdctl --node $OLDNODE start\n</code></pre> </li> <li> <p>Generate a backup file:</p> <pre><code>ejabberdctl --node $OLDNODE backup $OLDFILE\n</code></pre> </li> <li> <p>Stop the old node:</p> <pre><code>ejabberdctl --node $OLDNODE stop\n</code></pre> </li> <li> <p>Make sure there aren't files in the Mnesia spool dir. For example:</p> <pre><code>mkdir /var/lib/ejabberd/oldfiles\nmv /var/lib/ejabberd/*.* /var/lib/ejabberd/oldfiles/\n</code></pre> </li> <li> <p>Start ejabberd. There isn't any need to specify the node name  anymore:</p> <pre><code>ejabberdctl start\n</code></pre> </li> <li> <p>Convert the backup to new node name using     mnesia_change_nodename:</p> <pre><code>ejabberdctl mnesia_change_nodename $OLDNODE $NEWNODE $OLDFILE $NEWFILE\n</code></pre> </li> <li> <p>Install the backup file as a fallback using     install_fallback:</p> <pre><code>ejabberdctl install_fallback $NEWFILE\n</code></pre> </li> <li> <p>Stop ejabberd:</p> <pre><code>ejabberdctl stop\n</code></pre> <p>You may see an error message in the log files, it\u2019s normal, so don\u2019t worry:</p> <pre><code>Mnesia(ejabberd@newmachine):\n** ERROR ** (ignoring core)\n** FATAL ** A fallback is installed and Mnesia must be restarted.\n  Forcing shutdown after mnesia_down from ejabberd@newmachine...\n</code></pre> </li> <li> <p>Now you can finally start ejabberd:</p> <pre><code>ejabberdctl start\n</code></pre> </li> <li> <p>Check that the information of the old database is available:  accounts, rosters... After you finish, remember to delete the  temporary backup files from public directories.</p> </li> </ol>"},{"location":"admin/guide/modules/","title":"Get More Modules","text":""},{"location":"admin/guide/modules/#ejabberd-modules","title":"<code>ejabberd-modules</code>","text":"<p>ejabberd starts automatically modules installed in <code>.ejabberd-modules</code>, in addition to all the modules included with ejabberd. There are API commands to compile, install, upgrade and uninstall those additional modules.</p> <p><code>ejabberd-modules</code> path in your system</p> <p>By default it is <code>$HOME/.ejabberd-modules</code>, being that the home path of the system account running ejabberd. The exact path in your ejabberd installation may be:</p> <ul> <li><code>/home/youraccount/.ejabberd-modules</code> when compiling source code or using binary installers</li> <li><code>/opt/ejabberd/.ejabberd-modules</code> in the <code>ejabberd</code> and the <code>ecs</code> container images</li> <li><code>/home/ejabberd/.ejabberd-modules</code> in the <code>ecs</code> container image</li> <li><code>/var/lib/ejabberd/.ejabberd-modules</code> when installed from Debian package</li> </ul> <p>That path can be modified using the variable CONTRIB_MODULES_PATH in the <code>ejabberdctl.cfg</code> configuration file.</p> <p>To get new modules in <code>ejabberd-modules</code>:</p> <ul> <li> <p>If you develop your own module,   you can add your module to ejabberd-modules   and let ejabberd compile, install and start it.</p> </li> <li> <p>Tell ejabberd to download the ejabberd-contrib git repository,   which contains many additional ejabberd modules written in Erlang/Elixir.</p> </li> </ul>"},{"location":"admin/guide/modules/#ejabberd-contrib","title":"<code>ejabberd-contrib</code>","text":"<p><code>ejabberd-contrib</code> is a git repository that hosts a collection of contributed modules for ejabberd written in Erlang/Elixir. Check the ejabberd-contrib GitHub page.</p> <p>Furthermore, in the <code>extra</code> directory of that repository there are references to other modules hosted in other git repositories.</p> <p>First of all, let's get/update the modules source code:</p> <pre><code>ejabberdctl modules_update_specs\n</code></pre>"},{"location":"admin/guide/modules/#modules-management","title":"Modules Management","text":"<p>Once you have placed the modules source code in <code>ejabberd-modules</code>, you can:</p> <ul> <li>list modules</li> <li>install a module</li> <li>uninstall a module, or upgrade it</li> </ul>"},{"location":"admin/guide/modules/#list-modules","title":"List Modules","text":"<p>Get a list of all the modules available to install:</p> <pre><code>ejabberdctl modules_available\n\n...\nmod_cron        Execute scheduled commands\nmod_default_contacts    Auto-add roster contacts on registration\nmod_default_rooms       Auto-bookmark rooms on registration\nmod_deny_omemo  Prevent OMEMO sessions from being established\nmod_ecaptcha    Generate CAPTCHAs using ecaptcha\n...\n</code></pre> <p>What modules are currently installed:</p> <pre><code>ejabberdctl modules_installed\n</code></pre>"},{"location":"admin/guide/modules/#install-module","title":"Install Module","text":"<p>Let\u2019s install a module:</p> <pre><code>ejabberdctl module_install mod_cron\n\nModule mod_cron has been installed and started.\nIt's configured in the file:\n  /home/ejabberd/.ejabberd-modules/mod_cron/conf/mod_cron.yml\nConfigure the module in that file, or remove it\nand configure in your main ejabberd.yml\n</code></pre> <p>git not found?</p> <p>Installing a module with dependencies requires <code>git</code> or <code>mix</code> installed in the system, otherwise compilation fails with errors like: <pre><code>/bin/sh: mix: not found\n/bin/sh: git: not found\n</code></pre> If you are using an ejabberd container image, see the solution in Install git for dependencies.</p> <p>The command <code>module_install</code> performs several tasks:</p> <ul> <li>downloads any Erlang/Elixir dependencies specified in the modules's <code>rebar.config</code> file</li> <li>compiles the module and its dependencies (if not yet already compiled)</li> <li>installs it (inside <code>ejabberd-modules</code>)</li> <li>copies the default module configuration file (if any)</li> <li>and starts the module (if there was a default configuration file</li> </ul> <p>As a result, now <code>.ejabberd-modules</code> contains a new directory <code>mod_cron/</code> with the binary <code>*.beam</code> files and the default module configuration.</p> <p>The default module configuration file, if it exists, will be read by ejabberd when it starts. If you prefer to keep all the configuration in your main <code>ejabberd.yml</code> file, move the content of that file, but remember that the file will be overwritten if you install or upgrade the module.</p>"},{"location":"admin/guide/modules/#uninstall-module","title":"Uninstall Module","text":"<p>And finally, you can uninstall the module:</p> <pre><code>ejabberdctl module_uninstall mod_cron\n</code></pre> <p>By the way, you can upgrade the module, which essentially uninstalls and installs the same module with one single command call:</p> <pre><code>ejabberdctl module_upgrade mod_cron\n</code></pre>"},{"location":"admin/guide/security/","title":"Securing ejabberd","text":""},{"location":"admin/guide/security/#firewall-settings","title":"Firewall Settings","text":"<p>You need to take the following ports in mind when configuring your firewall. The ports may change depending on your ejabberd configuration. Most of them are TCP ports, except the explicitely mentioned ones:</p> Port Description 5222 Jabber/XMPP client connections, plain or STARTTLS (ejabberd_c2s) 5223 Jabber client connections, using the old SSL method (ejabberd_c2s) 5269 Jabber/XMPP incoming server connections (ejabberd_s2s_in) 5280/5443 HTTP/HTTPS for Web Admin and many more (ejabberd_http) 1883/8883 MQTT/MQTTS service (mod_mqtt) 3478/5349 STUN+TURN/STUNS+TURNS service (ejabberd_stun) 3478 UDP ' ' 49152-65535 range UDP STUN+TURN service (ejabberd_stun), configure with <code>turn_min_port</code> and <code>turn_max_port</code> 5060/5061 SIP service (ejabberd_sip) 7777 SOCKS5 file transfer proxy (mod_proxy65) 4369 epmd listens for Erlang node name requests random port range Used by epmd for connections between Erlang nodes, configure with <code>inet_dist_listen_min</code> and <code>inet_dist_listen_max</code> 5210 Erlang connectivity when <code>ERL_DIST_PORT</code> is set, alternative to epmd"},{"location":"admin/guide/security/#epmd","title":"epmd","text":"<p>epmd</p> <p>Small name server included in Erlang/OTP and used by Erlang   programs when establishing distributed Erlang communications.   See <code>epmd (Erlang Port Mapper Daemon)</code></p> <p>Tip</p> <p>If you setup <code>ERL_DIST_PORT</code> in <code>ejabberdctl.cfg</code> to a port number (for example <code>5210</code>) then Erlang will listen only in that port, instead of starting the <code>epmd</code> program and listen in 4269 + ramdom port.</p> <p>ejabberd needs <code>epmd</code> to use <code>ejabberdctl</code> and also when clustering ejabberd nodes. This small program is automatically started by Erlang, and is never stopped. If ejabberd is stopped, and there aren't any other Erlang programs running in the system, you can safely stop <code>epmd</code> if you want.</p> <p>ejabberd runs inside an Erlang node. To communicate with ejabberd, the script <code>ejabberdctl</code> starts a new Erlang node and connects to the Erlang node that holds ejabberd. In order for this communication to work, <code>epmd</code> must be running and listening for name requests in the port 4369. You should block the port 4369 in the firewall in such a way that only the programs in your machine can access it, or configure the option <code>ERL_EPMD_ADDRESS</code> in the file <code>ejabberdctl.cfg</code>.</p> <p>If you build a cluster of several ejabberd instances, each ejabberd instance is called an ejabberd node. Those ejabberd nodes use a special Erlang communication method to build the cluster, and EPMD is again needed listening in the port 4369. So, if you plan to build a cluster of ejabberd nodes you must open the port 4369 for the machines involved in the cluster. Remember to block the port so Internet doesn't have access to it.</p> <p>Once an Erlang node solved the node name of another Erlang node using EPMD and port 4369, the nodes communicate directly. The ports used in this case by default are random, but can be configured in the file <code>ejabberdctl.cfg</code>. The Erlang command-line parameter used internally is, for example:</p> <pre><code>erl ... -kernel inet_dist_listen_min 4370 inet_dist_listen_max 4375\n</code></pre> <p>It is also possible to configure in <code>ejabberdctl.cfg</code> the network interface where the Erlang node will listen and accept connections. The Erlang command-line parameter used internally is, for example:</p> <pre><code>erl ... -kernel inet_dist_use_interface \"{127,0,0,1}\"\n</code></pre>"},{"location":"admin/guide/security/#erlang-cookie","title":"Erlang Cookie","text":"<p>cookie</p> <p>Random alphanumeric string assigned to each erlang 6251a85a-47d0-11ee-be56-0242ac120002:f6c21f1c61beffa223aa781b60f706a3:&lt;__None__&gt; used to secure connections between erlang nodes.   See Security in distributed erlang.</p> <p>An Erlang node reads the cookie at startup from the command-line parameter <code>-setcookie</code>. If not indicated, the cookie is read from the file <code>$HOME/.erlang.cookie</code>.</p> <p>If this file does not exist, it is created immediately with a random cookie in the user <code>$HOME</code> path. This means the user running ejabberd must have a <code>$HOME</code>, and have write access to that path. So, when you create a new account in your system for running ejabberd, either allow it to have a <code>$HOME</code>, or set as <code>$HOME</code> a path where ejabberd will have write access. Depending on your setup, examples could be:</p> <pre><code>adduser --home /usr/local/var/lib/ejabberd ejabberd\n</code></pre> <p>or</p> <pre><code>adduser --home /var/lib/ejabberd ejabberd\n</code></pre> <p>Two Erlang nodes communicate only if they have the same cookie. Setting a cookie on the Erlang node allows you to structure your Erlang network and define which nodes are allowed to connect to which.</p> <p>Thanks to Erlang cookies, you can prevent access to the Erlang node by mistake, for example when there are several Erlang nodes running different programs in the same machine.</p> <p>Setting a secret cookie is a simple method to difficult unauthorized access to your Erlang node. However, the cookie system is not ultimately effective to prevent unauthorized access or intrusion to an Erlang node. The communication between Erlang nodes are not encrypted, so the 6251a85a-47d0-11ee-be56-0242ac120002:e5dbe6d0e166a48df2f5c0fff65e5e59:&lt;__None__&gt; could be read sniffing the traffic on the network. The recommended way to secure the Erlang node is to block the port 4369.</p>"},{"location":"admin/guide/security/#erlang-node-name","title":"Erlang Node Name","text":"<p>An Erlang node may have a node name. The name can be short (if indicated with the command-line parameter <code>-sname</code>) or long (if indicated with the parameter <code>-name</code>). Starting an Erlang node with -sname limits the communication between Erlang nodes to the LAN.</p> <p>Using the option <code>-sname</code> instead of <code>-name</code> is a simple method to difficult unauthorized access to your Erlang node. However, it is not ultimately effective to prevent access to the Erlang node, because it may be possible to fake the fact that you are on another network using a modified version of Erlang 6251a85a-47d0-11ee-be56-0242ac120002:37785e6458f4675b8eb7a2a2e50e64f2:&lt;__None__&gt;. The recommended way to secure the Erlang node is to block the port 4369.</p>"},{"location":"admin/guide/security/#securing-sensitive-files","title":"Securing Sensitive Files","text":"<p>ejabberd stores sensitive data in the file system either in plain text or binary files. The file system permissions should be set to only allow the proper user to read, write and execute those files and directories.</p> <p>ejabberd configuration file: <code>/etc/ejabberd/ejabberd.yml</code>:   Contains the JID of administrators and passwords of external  components. The backup files probably contain also this information,  so it is preferable to secure the whole <code>/etc/ejabberd/</code> directory.</p> <p>ejabberd service log: <code>/var/log/ejabberd/ejabberd.log</code>:   Contains IP addresses of clients. If the loglevel is set to 5, it  contains whole conversations and passwords. If a logrotate system is  used, there may be several log files with similar information, so it  is preferable to secure the whole <code>/var/log/ejabberd/</code> directory.</p> <p>Mnesia database spool files in <code>/var/lib/ejabberd/</code>:   The files store binary data, but some parts are still readable. The  files are generated by Mnesia and their permissions cannot be set  directly, so it is preferable to secure the whole  <code>/var/lib/ejabberd/</code> directory.</p> <p>Erlang cookie file: <code>/var/lib/ejabberd/.erlang.cookie</code>:   See section Erlang Cookie.</p>"},{"location":"admin/guide/troubleshooting/","title":"Troubleshooting ejabberd","text":""},{"location":"admin/guide/troubleshooting/#log-files","title":"Log Files","text":"<p>An ejabberd node writes three log files:</p> <ul> <li> <p><code>ejabberd.log</code>:   is the ejabberd service log, with the messages reported by ejabberd code</p> </li> <li> <p><code>error.log</code>:   is the file accumulating error messages from <code>ejabberd.log</code></p> </li> <li> <p><code>crash.log</code>:   is the Erlang/OTP log, with the crash messages reported by Erlang/OTP using SASL (System Architecture Support Libraries)</p> </li> </ul> <p>The option <code>loglevel</code> modifies the verbosity of the file ejabberd.log. The syntax:</p> <p><code>loglevel: Level</code>: The standard form to set a global log level.</p> <p>The possible <code>Level</code> are:</p> <ul> <li> <p><code>0</code>:   No ejabberd log at all (not recommended)</p> </li> <li> <p><code>1</code>:   Critical</p> </li> <li> <p><code>2</code>:   Error</p> </li> <li> <p><code>3</code>:   Warning</p> </li> <li> <p><code>4</code>:   Info</p> </li> <li> <p><code>5</code>:   Debug</p> </li> </ul> <p>For example, the default configuration is:</p> <p><code>loglevel: 4</code></p> <p>By default ejabberd rotates the log files when they get grown above a certain size. The exact value is controlled by the log_rotate_size top-level option.</p> <p>However, you can rotate the log files manually. You can either use an external tool for log rotation and the reopen_log API command to reopen the log files, or the rotate_log API command to perform both steps (please refer to section ejabberd Commands).</p> <p>The log_rotate_count toplevel option defines the number of rotated files to keep by the reopen_log API command. Every such file has a numeric suffix.</p>"},{"location":"admin/guide/troubleshooting/#debug-console","title":"Debug Console","text":"<p>The Debug Console is an Erlang shell attached to an already running ejabberd server. With this Erlang shell, an experienced administrator can perform complex tasks.</p> <p>This shell gives complete control over the ejabberd server, so it is important to use it with extremely care. There are some simple and safe examples in the article <code>Interconnecting Erlang Nodes</code></p> <p>To exit the shell, close the window or press the keys: control+c control+c.</p>"},{"location":"admin/guide/troubleshooting/#too-many-db-tables","title":"Too many db tables","text":"<p>When running ejabberd, the log shows this error:</p> <pre><code>** Too many db tables **\n</code></pre> <p>The number of concurrent ETS and Mnesia tables is limited. If this error occurs, it means that you have reached this limit.</p> <p>For a solution, please read the section about ERL_MAX_ETS_TABLES on the Performance Tuning page.</p>"},{"location":"admin/guide/mqtt/","title":"MQTT Support","text":""},{"location":"admin/guide/mqtt/#benefits","title":"Benefits","text":"<p>ejabberd is a multiprotocol server that supports MQTT out of the box since ejabberd Business Edition 4.0 and ejabberd Community Server 19.02</p> <p>There are major benefits in using MQTT service embedded in ejabberd:</p> <ol> <li>MQTT service relies on ejabberd infrastructure code, that has been battle tested since 15+ years, like the clustering engine. ejabberd MQTT service has been tested on large scale and can support millions of concurrent connections highly efficiently. ejabberd MQTT is rock-solid and highly scalable.</li> <li>The ejabberd APIs and modules can be reused in MQTT. Authentication, virtual hosting, database backends, ... They both work with XMPP and MQTT. You can also share your security policy, as defined in the configuration file between the two protocols.</li> <li>You can leverage existing skills and plugins you have written for ejabberd, like for example custom authentication.</li> <li>You can deploy services that take advantage of both protocols and have them interoperate with each other, on a single platform, with a single tool.</li> <li>ejabberd supports MQTT 5: it is a state of the art, modern MQTT server. And it also supports MQTT 3.1.1 in case you want to use previous clients.</li> </ol> <p>In summary:</p> <ul> <li>You can switch between XMPP and MQTT as you wish, even use both protocols on the same infrastructure.</li> <li>You will save on infrastructure, given the high-performance of the platform.</li> <li>You get support on solution design for real-time infrastructure and can get help choosing between XMPP and MQTT, from a vendor that has no interest in selling one protocol more than another.</li> </ul> <p>ejabberd Business Edition offers a different clustering than 6251a85a-47d0-11ee-be56-0242ac120002:d3e24e7c6049cf24d5d9b1c784f18834:&lt;__None__&gt;. Using MQTT with ejabberd Business Edition means you can leverage:</p> <ul> <li>The clustering engine of 6251a85a-47d0-11ee-be56-0242ac120002:efaef6b46b0fe10f312228c00a9a8219:&lt;__None__&gt; will be used for the MQTT service. It means that you have a more scalable cluster, that supports geoclustering. With geoclustering, you can deploy a single MQTT service across different datacenters, spread in different regions. You can deploy a truly global service.</li> <li>The backend integration that are supported in ejabberd Business Edition will be available in MQTT. You have no need to develop support for new API.</li> </ul>"},{"location":"admin/guide/mqtt/#basic-setup","title":"Basic Setup","text":"<p>Maybe you already have MQTT enabled in your ejabberd server, as it comes enabled by default in many distributions.</p> <p>MQTT support in ejabberd is enabled by adding <code>mod_mqtt</code> to the list of <code>listen</code> and the list of <code>modules</code> like this:</p> <pre><code>listen:\n  -\n    port: 1883\n    module: mod_mqtt\n    backlog: 1000\n\nmodules:\n  mod_mqtt: {}\n</code></pre> <p>The listener on port 1883 is MQTT over cleartext TCP/IP connection; you can later setup encryption, WebSocket, and encrypted WebSocket.</p> <p>For available options you can consult the mod_mqtt listener and the mod_mqtt module.</p>"},{"location":"admin/guide/mqtt/#test-setup","title":"Test Setup","text":"<p>Start ejabberd server and you can connect to ejabberd MQTT service with your preferred MQTT client.</p> <p>Let's use the clients included with mosquitto, available in Debian, Brew and many others (see mosquitto downloads).</p> <p>First of all register several accounts and subscribe one to the topic <code>test/1</code> with:</p> <pre><code>ejabberdctl register author localhost Pass\nejabberdctl register user1 localhost Pass\n\nmosquitto_sub -u user1@localhost -P Pass -t \"test/1\" -d -v\n\nClient (null) sending CONNECT\nClient (null) received CONNACK (0)\nClient (null) sending SUBSCRIBE (Mid: 1, Topic: test/1, QoS: 0, Options: 0x00)\nClient (null) received SUBACK\nSubscribed (mid: 1): 0\n</code></pre> <p>Then go to another terminal or window and publish something on that topic:</p> <pre><code>mosquitto_pub -u author@localhost -P Pass -t \"test/1\" -d -m \"ABC\"\n\nClient (null) sending CONNECT\nClient (null) received CONNACK (0)\nClient (null) sending PUBLISH (d0, q0, r0, m1, 'test/1', ... (3 bytes))\nClient (null) sending DISCONNECT\n</code></pre> <p>You will see the message received and displayed in the <code>mosquitto_sub</code> window:</p> <pre><code>Client (null) received PUBLISH (d0, q0, r0, m0, 'test/1', ... (3 bytes))\ntest/1 ABC\n</code></pre>"},{"location":"admin/guide/mqtt/#access-control","title":"Access Control","text":"<p>The mod_mqtt module provides two options for access control:</p> <ul> <li><code>access_subscribe</code> to restrict access for subscribers,</li> <li>and <code>access_publish</code> to restrict access for publishers.</li> </ul> <p>Both options accept mapping <code>filter: rule</code> where <code>filter</code> is an MQTT topic filter and <code>rule</code> is the standard ejabberd Access Rule.</p> <p>As an example, let's say only <code>author@localhost</code> is allowed to publish to topic \"/test/1/\" and its subtopics, while only <code>user1@localhost</code> is allowed to subscribe to this topic and its subtopics, and nobody else can publish or subscribe to anything else. The configuration will look something like this:</p> <pre><code>acl:\n  publisher:\n    user: author@localhost\n  subscriber:\n    user: user1@localhost\n\nmodules:\n  mod_mqtt:\n    access_publish:\n      \"test/1/#\":\n        - allow: publisher\n        - deny\n      \"#\":\n        - deny\n    access_subscribe:\n      \"test/1/#\":\n        - allow: subscriber\n        - deny\n      \"#\":\n        - deny\n</code></pre>"},{"location":"admin/guide/mqtt/#encryption","title":"Encryption","text":""},{"location":"admin/guide/mqtt/#self-signed-certificate","title":"Self-Signed Certificate","text":"<p>If you have already setup encryption in ejabberd, you can bypass this step.</p> <p>If you want to use TLS, you may want to create a self-signed certificate (at least to get started). The following page is a nice guide: Mosquitto SSL Configuration -MQTT TLS Security.</p> <p>Here is a summary of the steps, adapted for ejabberd MQTT:</p> <pre><code>openssl genrsa -des3 -out ca.key 4096\nopenssl req -new -x509 -days 1826 -key ca.key -out ca.crt\nopenssl genrsa -out server.key 4096\nopenssl req -new -out server.csr -key server.key\nopenssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 360\ncat server.crt server.key &gt; mqtt.pem\n</code></pre> <p>Now copy <code>mqtt.pem</code> to the path with ejabberd configuration files, and configure accordingly:</p> <pre><code>certfiles:\n  - \"/etc/ejabberd/mqtt.pem\"\n</code></pre>"},{"location":"admin/guide/mqtt/#configure-encryption","title":"Configure Encryption","text":"<p>Add a new listener with <code>tls</code> option in the port number 8883 (the standard for encrypted MQTT):</p> <pre><code>listen:\n  -\n    port: 1883\n    module: mod_mqtt\n    backlog: 1000\n  -\n    port: 8883\n    module: mod_mqtt\n    backlog: 1000\n    tls: true\n</code></pre> <p>The listener on port 1883 is MQTT over cleartext TCP/IP connection. The listener on port 8883 is MQTT over TLS. You can enable both or only one of them depending on your needs.</p>"},{"location":"admin/guide/mqtt/#test-encryption","title":"Test Encryption","text":"<p>You can repeat the commands from previous test, appending <code>-p 8883</code> to use the encrypted port. If you are using a self-signed certificate as explained previously, you will also have to append <code>--cafile server.crt</code>. For example:</p> <pre><code>mosquitto_sub -u user1@localhost -P Pass -t \"test/1\" -d -v -p 8883 --cafile server.crt\n</code></pre>"},{"location":"admin/guide/mqtt/#websocket","title":"WebSocket","text":""},{"location":"admin/guide/mqtt/#setup-ws","title":"Setup WS","text":"<p>Add <code>mod_mqtt</code> as a request_handler on the ejabberd_http listener:</p> <pre><code>listen:\n  -\n    port: 5280\n    module: ejabberd_http\n    request_handlers:\n      /mqtt: mod_mqtt\n</code></pre> <p>This configuration maps the path <code>/mqtt</code> to the MQTT WebSocket handler on the main ejabberd HTTP listener.</p> <p>You can enable listeners independently, for example enable only the WebSocket listener and not the TCP/IP ones.</p>"},{"location":"admin/guide/mqtt/#test-ws","title":"Test WS","text":"<p>Our beloved mosquitto client does not support MQTT over WebSocket, so you may have to find some capable MQTT client. For example, in MQTTX, setup in the login window:</p> <ul> <li>Host: <code>ws://</code> <code>localhost</code></li> <li>Port: 5280</li> <li>Path:<code>/mqtt</code></li> </ul> <p>If you need an example on how to use MQTTJS library, you can check our small example project: mqttjs-demo</p>"},{"location":"admin/guide/mqtt/#encrypted-ws","title":"Encrypted WS","text":"<p>To enable encryption on WebSocket, enable <code>tls</code> like this:</p> <pre><code>listen:\n  -\n    port: 5281\n    ip: \"::\"\n    module: ejabberd_http\n    tls: true\n    request_handlers:\n      /mqtt: mod_mqtt\n</code></pre> <p>For testing this in the MQTTX client:</p> <ul> <li>Host: <code>wss://</code> <code>localhost</code></li> <li>Port: 5281</li> <li>Path: <code>/mqtt</code></li> <li>SSL/TLS: true</li> <li>Certificate: CA signed server</li> <li>If you used a self-signed certificate, you will have to disable SSL Secure</li> </ul>"},{"location":"admin/install/","title":"Installation","text":"<p>There are several ways to install ejabberd Community Server, depending on your needs and your infrastructure.</p>"},{"location":"admin/install/#self-hosted","title":"Self-hosted","text":""},{"location":"admin/install/#container-images","title":"Container Images","text":"<ul> <li><code>ejabberd</code> and <code>ecs</code> Container Images \u2013 Ideal for Windows, macOS, Linux, ...</li> </ul>"},{"location":"admin/install/#binary-installers","title":"Binary Installers","text":"<ul> <li>Linux RUN Installer \u2013 Suitable for various Linux distributions</li> <li>Linux DEB and RPM Installers \u2013 Specifically for DEB and RPM based Linux</li> </ul>"},{"location":"admin/install/#linux-and-bsd","title":"Linux and *BSD","text":"<ul> <li>Operating System Package \u2013 Tailored for System Operators</li> </ul>"},{"location":"admin/install/#macos","title":"MacOS","text":"<ul> <li>Homebrew \u2013 Optimized for MacOS</li> </ul>"},{"location":"admin/install/#source-code","title":"Source Code","text":"<ul> <li>Source Code \u2013 Geared towards developers and advanced administrators</li> </ul>"},{"location":"admin/install/#on-premise-ebe","title":"On-Premise (eBE)","text":"<ul> <li>ejabberd Business Edition \u2013 Explore professional support and managed services on your infrastructure</li> </ul>"},{"location":"admin/install/#cloud-hosting-fluux","title":"Cloud Hosting (Fluux)","text":"<ul> <li>Fluux.io \u2013 Opt for ejabberd hosting with a user-friendly web dashboard</li> </ul>"},{"location":"admin/install/binary-installer/","title":"Binary Installers","text":""},{"location":"admin/install/binary-installer/#linux-run-installer","title":"Linux RUN Installer","text":"<p>The <code>*.run</code> binary installer will deploy and configure a full featured ejabberd server and does not require any extra dependencies. It includes a stripped down version of Erlang. As such, when using ejabberd installer, you do not need to install Erlang separately.</p> <p>Those instructions assume installation on <code>localhost</code> for development purposes. In this document, when mentioning <code>ejabberd-YY.MM</code>, we assume <code>YY.MM</code> is the release number, for example 18.01.</p> <p>Installation using the <code>*.run</code> binary installer:</p> <ol> <li> <p>Go to ejabberd GitHub Releases.</p> </li> <li> <p>Download the <code>run</code> package for your architecture</p> </li> <li> <p>Right-click on the downloaded file and select \"Properties\", click on the \"Permissions\" tab and tick the box that says \"Allow executing file as program\".    Alternatively, you can set the installer as executable using the command line:</p> <pre><code>chmod +x ejabberd-YY.MM-1-linux-x64.run\n</code></pre> </li> <li> <p>If the installer runs as superuser (by <code>root</code> or using <code>sudo</code>),    it installs ejabberd binaries in <code>/opt/ejabberd-XX.YY/</code>;    installs your configuration, Mnesia database and logs in <code>/opt/ejabberd/</code>,    and setups an ejabberd service unit in <code>systemd</code>:</p> <pre><code>sudo ./ejabberd-YY.MM-1-linux-x64.run\n</code></pre> </li> <li> <p>If the installer runs as a regular user,    it asks the base path where ejabberd should be installed.    In that case, the ejabberd service unit is not set in <code>systemd</code>,    and <code>systemctl</code> cannot be used to start ejabberd; start it manually.</p> </li> <li> <p>After successful installation by root, ejabberd is automatically started.    Check its status with</p> <pre><code>systemctl status ejabberd\n</code></pre> </li> <li> <p>Now that ejabberd is installed and running with the default configuration,    it's time to do some basic setup: edit <code>/opt/ejabberd/conf/ejabberd.yml</code>    and setup in the <code>hosts</code> option the domain that you want ejabberd to serve.    By default it's set to the name of your computer on the local network.</p> </li> <li> <p>Restart ejabberd completely using systemctl, or using ejabberdctl,    or simply tell it to reload the configuration file:</p> <pre><code>sudo systemctl restart ejabberd\nsudo /opt/ejabberd-22.05/bin/ejabberdctl restart\nsudo /opt/ejabberd-22.05/bin/ejabberdctl reload_config\n</code></pre> </li> <li> <p>Quite probably you will want to register an account and grant it admin rights,    please check Next Steps: Administration Account.</p> </li> <li> <p>Now you can go to the web dashboard at <code>http://localhost:5280/admin/</code>    and fill the username field with the full account JID,    for example <code>admin@domain</code> (or <code>admin@localhost</code> as above).    Then fill the password field with that account's <code>password</code>.    The next step is to get to know how to configure ejabberd.</p> </li> <li> <p>If something goes wrong during the installation    and you would like to start from scratch,    you will find the steps to uninstall in the file    <code>/opt/ejabberd-22.05/uninstall.txt</code>.</p> </li> </ol>"},{"location":"admin/install/binary-installer/#linux-deb-and-rpm-installers","title":"Linux DEB and RPM Installers","text":"<p>ProcessOne provides DEB and RPM all-in-one binary installers with the same content that the <code>*.run</code> binary installer mentioned in the previous section.</p> <p>Those are self-sufficient packages that contain a minimal Erlang distribution, this ensures that it does not interfere with your existing Erlang version and is also a good way to make sure ejabberd will run with the latest Erlang version.</p> <p>Those packages install ejabberd in <code>/opt/ejabberd-XX.YY/</code>. Your configuration, Mnesia database and logs are available in <code>/opt/ejabberd/</code>.</p> <p>You can download directly the DEB and RPM packages from ejabberd GitHub Releases.</p> <p>If you prefer, you can also get those packages from our official ejabberd packages repository.</p>"},{"location":"admin/install/homebrew/","title":"Install ejabberd on macOS","text":""},{"location":"admin/install/homebrew/#homebrew","title":"Homebrew","text":"<p>Homebrew is a package manager for macOS that aims to port the many Unix &amp; Linux software that is not easily available or compatible. Homebrew installation is simple and the instruction is available on its website.</p> <p>Check also the guide for Installing ejabberd development environment on OSX</p> <p>The ejabberd configuration included in Homebrew's ejabberd has as default domain <code>localhost</code>, and has already granted administrative privileges to the account <code>admin@localhost</code>.</p> <ol> <li> <p>Once you have Homebrew installed, open Terminal. Run</p> <pre><code>brew install ejabberd\n</code></pre> <p>This should install the latest or at most the one-before-latest version of ejabberd. The installation directory should be reported at the end of this process, but usually the main executable is stored at <code>/usr/local/sbin/ejabberdctl</code>.</p> </li> <li> <p>Start ejabberd in interactive mode, which prints useful messages in the Terminal.</p> <pre><code>/usr/local/sbin/ejabberdctl live\n</code></pre> </li> <li> <p>Create the account <code>admin@localhost</code> with password set as <code>password</code>:</p> <pre><code>/usr/local/sbin/ejabberdctl register admin localhost password\n</code></pre> </li> <li> <p>Now you can go to the web dashboard at <code>http://localhost:5280/admin/</code> and fill the username field with the full account JID, for example <code>admin@localhost</code>, then fill the password field with that account's <code>password</code>.</p> </li> <li> <p>Without configuration there's not much to see here, therefore the next step is to get to know how to configure ejabberd.</p> </li> </ol>"},{"location":"admin/install/next-steps/","title":"Next Steps","text":""},{"location":"admin/install/next-steps/#starting-ejabberd","title":"Starting ejabberd","text":"<p>Depending on how you installed ejabberd, it may be started automatically by the operating system at system boot time.</p> <p>You can use the <code>ejabberdctl</code> command line administration script to start and stop ejabberd, check its status and many other administrative tasks.</p> <p>If you provided the configure option <code>--enable-user=USER</code> (see compilation <code>options</code>, you can execute <code>ejabberdctl</code> with either that system account or root.</p> <p>Usage example:</p> <pre><code>prompt&gt; ejabberdctl start\n\nprompt&gt; ejabberdctl status\nThe node ejabberd@localhost is started with status: started\nejabberd is running in that node\n\nprompt&gt; ejabberdctl stop\n</code></pre> <p>If ejabberd doesn't start correctly and a crash dump file is generated, there was a severe problem. You can try to start ejabberd in interactive mode with the command <code>bin/ejabberdctl live</code> to see the error messages provided by Erlang and identify the exact the problem.</p> <p>The <code>ejabberdctl</code> administration script is included in the <code>bin</code> directory in the Linux Installers and Docker image.</p> <p>Please refer to the section ejabberdctl for details about <code>ejabberdctl</code>, and configurable options to fine tune the Erlang runtime system.</p>"},{"location":"admin/install/next-steps/#autostart-on-linux","title":"Autostart on Linux","text":"<p>If you compiled ejabberd from source code or some other method that doesn't setup autostarting ejabberd, you can try this method.</p> <p>On a *nix system, create a system user called 'ejabberd', give it write access to the directories <code>database/</code> and <code>logs/</code>, and set that as home.</p> <p>If you want ejabberd to be started as daemon at boot time with that user, copy <code>ejabberd.init</code> from the <code>bin</code> directory to something like <code>/etc/init.d/ejabberd</code>. Then you can call <code>/etc/inid.d/ejabberd start</code> to start the server.</p> <p>Or if you have a <code>systemd</code> distribution:</p> <ol> <li>copy <code>ejabberd.service</code> to <code>/etc/systemd/system/</code></li> <li>run <code>systemctl daemon-reload</code></li> <li>run <code>systemctl enable ejabberd.service</code></li> <li>To start the server, you can run <code>systemctl start ejabberd</code></li> </ol> <p>When ejabberd is started, the processes that are started in the system are <code>beam</code> or <code>beam.smp</code>, and also <code>epmd</code>. For more information regarding <code>epmd</code> consult the section relating to epmd.</p>"},{"location":"admin/install/next-steps/#administration-account","title":"Administration Account","text":"<p>admin account</p> <p>Account registered in ejabberd with administrative privileges granted in the ejabberd configuration file.   Features that take into consideration those privileges:   api_permissions,   ejabberd_web_admin,   mod_announce,   mod_configure,   mod_http_api,   mod_muc, ...</p> <p>Some ejabberd installation methods ask you details for the first account, and take care to register that account and grant it administrative rights; in that case you can skip this section.</p> <p>After installing ejabberd from source code or other methods, you may want to register the first XMPP account and grant it administrative rights:</p> <ol> <li> <p>Register an XMPP account on your ejabberd server.     For example, if <code>example.org</code> is configured in the     hosts     section in your ejabberd configuration file,     then you may want to register an account with JID <code>admin1@example.org</code>.</p> <p>There are two ways to register an XMPP account in ejabberd:</p> <ul> <li> <p>Using an XMPP client and In-Band Registration.</p> </li> <li> <p>Using ejabberdctl:</p> <pre><code>ejabberdctl register admin1 example.org password\n</code></pre> </li> </ul> </li> <li> <p>Edit the ejabberd configuration file to give administration     rights to the XMPP account you registered:</p> <pre><code>acl:\n  admin:\n    user: admin1@example.org\n\naccess_rules:\n  configure:\n    allow: admin\n</code></pre> <p>You can grant administrative privileges to many XMPP accounts, and also to accounts in other XMPP servers.</p> </li> <li> <p>Restart ejabberd to load the new configuration, or run the     reload_config command.</p> </li> <li> <p>Open the Web Admin page in your favourite browser.     The exact address depends on your ejabberd configuration,     and may be:</p> <ul> <li>http://localhost:5280/admin/   on binary installers</li> <li>https://localhost:5443/admin/   on binary installers</li> <li>https://localhost:5280/admin/   on Debian package</li> </ul> </li> <li> <p>Your web browser shows a login window. Introduce the full JID,     in this example <code>admin1@example.org</code>, and the account password.     If the web address hostname is the same that the account JID,     you can provide simply the username instead of the full JID: <code>admin1</code>.     See Web Admin for details.</p> </li> </ol>"},{"location":"admin/install/next-steps/#configuring-ejabberd","title":"Configuring ejabberd","text":"<p>Now that you got ejabberd installed and running, it's time to configure it to your needs. You can follow on the Configuration section and take also a look at the Tutorials.</p>"},{"location":"admin/install/os-package/","title":"Operating System Packages","text":"<p>Many operating systems provide specific ejabberd packages adapted to the system architecture and libraries. They usually also check dependencies and perform basic configuration tasks like creating the initial administrator account.</p> <p>List of known ejabberd packages:</p> <ul> <li>Alpine Linux</li> <li>Arch Linux</li> <li>Debian</li> <li>Fedora</li> <li>FreeBSD</li> <li>Gentoo</li> <li>OpenSUSE</li> <li>NetBSD</li> <li>Ubuntu</li> </ul> <p>Consult the resources provided by your Operating System for more information.</p> <p>There's also an ejabberd snap to install ejabberd on several operating systems using <code>Snap</code> package manager.</p>"},{"location":"admin/install/source/","title":"Install ejabberd from Source Code","text":"<p>The canonical distribution form of ejabberd stable releases is the source code package. Compiling ejabberd from source code is quite easy in *nix systems, as long as your system have all the dependencies.</p>"},{"location":"admin/install/source/#requirements","title":"Requirements","text":"<p>To compile ejabberd you need:</p> <ul> <li>GNU Make</li> <li>GCC</li> <li>Libexpat \u2265 1.95</li> <li>Libyaml \u2265 0.1.4</li> <li>Erlang/OTP \u2265 25.0. It is recommended Erlang/OTP 27.3, which is the version used in the binary installers and container images.</li> <li>OpenSSL \u2265 1.0.0</li> <li>Curl. Optional, for ejabberdctl feature CTL_OVER_HTTP</li> </ul> <p>Other optional libraries are:</p> <ul> <li>Zlib \u2265 1.2.3, For Zlib Stream Compression</li> <li>PAM library, for PAM Authentication</li> <li>ImageMagick\u2019s Convert program and Ghostscript fonts, for CAPTCHA challenges.</li> <li>Elixir \u2265 1.10.3, for Elixir Development. It is recommended Elixir 1.14.0 or higher.</li> </ul> <p>If your system splits packages in libraries and development headers, install the development packages too.</p> <p>For example, in Debian:</p> <pre><code>apt-get install libexpat1-dev libgd-dev libpam0g-dev \\\n                libsqlite3-dev libwebp-dev libyaml-dev \\\n                autoconf automake erlang elixir rebar3\n</code></pre>"},{"location":"admin/install/source/#download","title":"Download","text":"<p>There are several ways to obtain the ejabberd source code:</p> <ul> <li> <p>Source code package from ProcessOne Downloads or GitHub Releases</p> </li> <li> <p>Latest development code from ejabberd Git repository using the commands:     <pre><code>git clone https://github.com/processone/ejabberd.git\ncd ejabberd\n</code></pre></p> </li> </ul>"},{"location":"admin/install/source/#compile","title":"Compile","text":"<p>The generic instructions to compile ejabberd are:</p> <pre><code>./autogen.sh\n./configure\nmake\n</code></pre> <p>Let's view them in detail.</p>"},{"location":"admin/install/source/#configure","title":"<code>./configure</code>","text":"<p>The build configuration script supports many options. Get the full list:</p> <pre><code>./configure --help\n</code></pre> <p>In this example, <code>./configure</code> prepares the installed program to run with a user called ejabberd that should exist in the system (it isn't recommended to run ejabberd with <code>root</code> user):</p> <pre><code>./configure --enable-user=ejabberd --enable-mysql\n</code></pre> <p>If you get <code>Error loading module rebar3</code>, please consult how to use rebar with old Erlang.</p> <p>Options details:</p> <ul> <li> <p><code>--bindir=/</code>: Specify the path to the user executables (where <code>epmd</code> and <code>iex</code> are available).</p> </li> <li> <p><code>--prefix=/</code>: Specify the path prefix where the files will be copied when running the <code>make install</code> command.</p> </li> <li> <p><code>--with-erlang=/</code>: Specify the directory where Erlang/OTP is installed.</p> </li> <li> <p><code>--with-min-erlang=9.0.5</code>: Allow to compile ejabberd with Erlang/OTP 20.0,     bypassing the verification of lower supported version.     Use only if you know what you are doing.</p> <p> added in 25.07</p> </li> <li> <p><code>--with-rebar=/</code>: Specify the path to rebar, rebar3 or   mix</p> <p> added in 20.12 and improved in 24.02</p> </li> <li> <p><code>--enable-user[=USER]</code>: Allow this normal system user to execute the ejabberdctl script (see section ejabberdctl), read the configuration files, read and write in the spool directory, read and  write in the log directory. The account user and group must exist in  the machine before running <code>make install</code>. This account needs a HOME directory, because the Erlang cookie file will be created and read there.</p> </li> <li> <p><code>--enable-group[=GROUP]</code>: Use this option additionally to <code>--enable-user</code>   when that account is in a group that doesn't coincide with its username.</p> </li> <li> <p><code>--enable-all</code>: Enable many of the database and dependencies     options described here, this is useful for Dialyzer checks:     --enable-debug --enable-elixir --enable-mysql --enable-odbc     --enable-pam --enable-pgsql --enable-redis --enable-sip     --enable-sqlite --enable-stun --enable-tools --enable-zlib</p> </li> <li> <p><code>--disable-debug</code>: Compile without <code>+debug_info</code>.</p> </li> <li> <p><code>--enable-elixir</code>: Build ejabberd with Elixir extension support.     Works only with rebar3, not rebar2. Requires to have Elixir installed.     If interested in Elixir development, you may prefer to use <code>--with-rebar=mix</code></p> <p> improved in 24.02</p> </li> <li> <p><code>--disable-erlang-version-check</code>: Don't check Erlang/OTP version.</p> </li> <li> <p><code>--enable-full-xml</code>: Use XML features in XMPP stream (ex: CDATA). This requires XML compliant clients).</p> </li> <li> <p><code>--enable-hipe</code>: Compile natively with HiPE. This is an experimental feature, and not recommended.</p> </li> <li> <p><code>--enable-lager</code>: Use lager Erlang logging tool instead of standard error logger.</p> </li> <li> <p><code>--enable-latest-deps</code>: Makes rebar use latest versions of   dependencies developed alongside ejabberd instead of version   specified in rebar.config. Should be only used when developing   ejabberd.</p> </li> <li> <p><code>--enable-lua</code>: Enable Lua support, to import from Prosody.</p> <p> added in 21.04</p> </li> <li> <p><code>--enable-mssql</code>: Enable Microsoft SQL Server support, this     option requires --enable-odbc (see [Supported storages][18]).</p> </li> <li> <p><code>--enable-mysql</code>: Enable MySQL support (see [Supported storages][18]).</p> </li> <li> <p><code>--enable-new-sql-schema</code>: Use new SQL schema.</p> </li> <li> <p><code>--enable-odbc</code>: Enable pure ODBC support.</p> </li> <li> <p><code>--enable-pam</code>: Enable the PAM authentication method (see PAM Authentication section).</p> </li> <li> <p><code>--enable-pgsql</code>: Enable PostgreSQL support (see [Supported storages][18]).</p> </li> <li> <p><code>--enable-redis</code>: Enable Redis support to use for external session storage.</p> </li> <li> <p><code>--enable-roster-gateway-workaround</code>: Turn on workaround for processing gateway subscriptions.</p> </li> <li> <p><code>--enable-sip</code>: Enable SIP support.</p> </li> <li> <p><code>--enable-sqlite</code>: Enable SQLite support (see [Supported storages][18]).</p> </li> <li> <p><code>--disable-stun</code>: Disable STUN/TURN support.</p> </li> <li> <p><code>--enable-system-deps</code>: Makes rebar use locally installed     dependencies instead of downloading them.</p> </li> <li> <p><code>--enable-tools</code>: Enable the use of development tools.</p> <p> changed in 21.04</p> </li> <li> <p><code>--disable-zlib</code>: Disable Stream Compression (XEP-0138) using zlib.</p> </li> </ul>"},{"location":"admin/install/source/#make","title":"<code>make</code>","text":"<p>This manages many tasks:</p> <ul> <li>Download and compile erlang dependencies</li> <li>Compile ejabberd</li> <li>System install, uninstall</li> <li>Build OTP production / development releases</li> <li>Development: edoc, options, translations, tags</li> <li>Testing: dialyzer, hooks, test, xref</li> </ul> <p>Get the full task list:</p> <pre><code>make help\n</code></pre>"},{"location":"admin/install/source/#install","title":"Install","text":"<p>There are several ways to install and run ejabberd after it's compiled from source code:</p> <ul> <li>system install</li> <li>system install a release</li> <li>building a production release</li> <li>building a development release</li> <li>don't install at all, just start with <code>make relive</code></li> </ul>"},{"location":"admin/install/source/#system-install","title":"System Install","text":"<p>To install ejabberd in the destination directories, run:</p> <pre><code>make install\n</code></pre> <p>Note that you probably need administrative privileges in the system to install ejabberd.</p> <p>The created files and directories depend on the options provided to <code>./configure</code>, by default they are:</p> <ul> <li> <p><code>/etc/ejabberd/</code>:  Configuration directory:</p> <ul> <li><code>ejabberd.yml</code>:  ejabberd configuration file (see File Format)</li> <li><code>ejabberdctl.cfg</code>: Configuration file of the administration script (see Erlang Runtime System)</li> <li><code>inetrc</code>: Network DNS configuration file for Erlang</li> </ul> </li> <li> <p><code>/lib/ejabberd/</code>:</p> <ul> <li><code>ebin/</code>: Erlang binary files (*.beam)</li> <li><code>include/</code>: Erlang header files (*.hrl)</li> <li><code>priv/</code>: Additional files required at runtime</li> <li><code>bin/</code>: Executable programs</li> <li><code>lib/</code>: Binary system libraries (*.so)</li> <li><code>msgs/</code>: Translation files (*.msgs) (see Default Language)</li> </ul> </li> <li> <p><code>/sbin/ejabberdctl</code>: Administration script (see ejabberdctl)</p> </li> <li> <p><code>/share/doc/ejabberd/</code>: Documentation of ejabberd</p> </li> <li> <p><code>/var/lib/ejabberd/</code>: Spool directory:</p> <ul> <li><code>.erlang.cookie</code>: The Erlang cookie file</li> <li><code>acl.DCD, ...</code>: Mnesia database spool files (*.DCD, *.DCL, *.DAT)</li> </ul> </li> <li> <p><code>/var/log/ejabberd/</code>: Log directory (see Logging):</p> <ul> <li><code>ejabberd.log</code>:   ejabberd service log</li> <li><code>erlang.log</code>:   Erlang/OTP system log</li> </ul> </li> </ul>"},{"location":"admin/install/source/#system-install-release","title":"System Install Release","text":"<p> added in 24.02</p> <p>This builds a production release, and then performs a system install of that release, obtaining a result similar to the one mentioned in the previous section.</p> <p>Simply run:</p> <pre><code>make install-rel\n</code></pre> <p>The benefits of <code>install-rel</code> over <code>install</code>:</p> <ul> <li>this uses OTP release code from rebar/rebar3/mix, and consequently requires less code in our <code>Makefile.in</code> file</li> <li><code>uninstall-rel</code> correctly deletes all the library files</li> <li>the <code>*.beam</code> files are smaller as debug information is stripped</li> </ul>"},{"location":"admin/install/source/#production-release","title":"Production Release","text":"<p> improved in 21.07</p> <p>You can build an OTP release that includes ejabberd, Erlang/OTP and all the required erlang dependencies in a single tar.gz file. Then you can copy that file to another machine that has the same machine architecture, and run ejabberd without installing anything else.</p> <p>To build that production release, run:</p> <pre><code>make prod\n</code></pre> <p>If you provided to <code>./configure</code> the option  <code>--with-rebar</code> to use rebar3 or mix, this will directly produce a tar.gz that you can copy.</p> <p>This example uses rebar3 to manage the compilation, builds an OTP production release, copies the resulting package to a temporary path, and starts ejabberd there:</p> <pre><code>./autogen.sh\n./configure --with-rebar=rebar3\nmake\nmake prod\nmkdir $HOME/eja-release\ntar -xzvf _build/prod/ejabberd-*.tar.gz -C $HOME/eja-release\n$HOME/eja-release/bin/ejabberdctl live\n</code></pre>"},{"location":"admin/install/source/#development-release","title":"Development Release","text":"<p> new in 21.07</p> <p>If you provided to <code>./configure</code> the option  <code>--with-rebar</code> to use rebar3 or mix, you can build an OTP development release.</p> <p>This is designed to run ejabberd in the local machine for development, manual testing... without installing in the system.</p> <p>This development release has some customizations: uses a dummy certificate file, if you register the account admin@localhost it has admin rights...</p> <p>This example uses Elixir's mix to manage the compilation, builds an OTP development release, and starts ejabberd there:</p> <pre><code>./autogen.sh\n./configure --with-rebar=mix\nmake\nmake dev\n_build/dev/rel/ejabberd/bin/ejabberdctl live\n</code></pre>"},{"location":"admin/install/source/#specific-notes","title":"Specific notes","text":""},{"location":"admin/install/source/#asdf","title":"asdf","text":"<p>When Erlang/OTP (and/or Elixir) is installed using asdf (multiple runtime version manager), it is available only for your account, in <code>$HOME/.asdf/shims/erl</code>. In that case, you cannot install ejabberd globally in the system, and you cannot use the <code>root</code> account to start it, because that account doesn't have access to erlang.</p> <p>In that scenario, there are several ways to run/install ejabberd:</p> <ul> <li> <p>Run a development release locally without installing</p> </li> <li> <p>Copy a production release locally</p> </li> <li> <p>Use system install, but install it locally:</p> </li> </ul> <pre><code>./autogen.sh\n./configure --prefix=$HOME/eja-install --enable-user\nmake\nmake install\n$HOME/eja-install/sbin/ejabberdctl live\n</code></pre>"},{"location":"admin/install/source/#bsd","title":"BSD","text":"<p>The command to compile ejabberd in BSD systems is <code>gmake</code>.</p> <p>You may want to check pkgsrc.se for ejabberd.</p> <p>Up to ejabberd 23.04, some old scripts where included in ejabberd source for NetBSD compilation, and you can take a look to those files for reference in ejabberd <code>23.04/examples/mtr/</code> path.</p>"},{"location":"admin/install/source/#erlang-configuration","title":"Erlang Configuration","text":"<p>Usually ejabberd is started using the <code>ejabberdctl</code> script, which takes care to setup the Erlang runtime system options following your <code>ejabberdctl.cfg</code> configuration file.</p> <p>However, there are other methods to start ejabberd, and they use specific methods to configure those options:</p> <ul> <li> <p>When using rebar3 <code>make relive</code>: system is set in <code>rebar.config</code>, apps in <code>rel/relive.config</code></p> </li> <li> <p>When using mix <code>make relive</code>: system is set in <code>Makefile</code>, apps in <code>config/runtime.exs</code></p> </li> <li> <p>When using rebar3 <code>make dev &amp;&amp; ejabberd</code>: system is set in <code>rel/vm.args</code>, apps in <code>rel/sys.config</code></p> </li> <li> <p>When using mix <code>make dev|prod &amp;&amp; ejabberd</code>: system is set in <code>rel/vm.args.eex</code> and <code>rel/env.sh.eex</code>, apps in <code>config/runtime.exs</code></p> </li> </ul>"},{"location":"admin/install/source/#erlang-local-install","title":"Erlang Local Install","text":"<p>If you compile Erlang/OTP from source code and install in a local folder, for example in <code>$HOME/erl-local</code> like this:</p> <pre><code>cd otp_src\n./configure --prefix=$HOME/erl-local\nmake\nmake install\n</code></pre> <p>then those are the steps to compile ejabberd:</p> <pre><code>cd ejabberd-master\nexport PATH=$HOME/erl-local/bin/:$PATH\n./autogen.sh\n./configure --with-erlang=$HOME/erl-local --with-rebar=./rebar3\nmake\n</code></pre> <p>Also notice that Erlang and ejabberd can be used only from that system account, see section asdf for details.</p>"},{"location":"admin/install/source/#macos","title":"macOS","text":"<p>If compiling from sources on Mac OS X, you must configure ejabberd to use custom OpenSSL, Yaml, iconv. The best approach is to use Homebrew to install your dependencies, then exports your custom path to let configure and make be aware of them.</p> <pre><code>brew install git erlang elixir openssl expat libyaml libiconv libgd sqlite rebar rebar3 automake autoconf\nexport LDFLAGS=\"-L/usr/local/opt/openssl/lib -L/usr/local/lib -L/usr/local/opt/expat/lib\"\nexport CFLAGS=\"-I/usr/local/opt/openssl/include -I/usr/local/include -I/usr/local/opt/expat/include\"\nexport CPPFLAGS=\"-I/usr/local/opt/openssl/include/ -I/usr/local/include -I/usr/local/opt/expat/include\"\n./configure\nmake\n</code></pre> <p>Check also the guide for Installing ejabberd development environment on OSX</p>"},{"location":"admin/install/source/#man","title":"man","text":"<p>ejabberd includes a man page which documents the toplevel and modules options, the same information that is published in the Top-Level Options and Modules Options sections.</p> <p>The man file can be read locally with:</p> <pre><code>man -l man/ejabberd.yml.5\n</code></pre>"},{"location":"admin/install/source/#rebar-with-old-erlang","title":"rebar with old Erlang","text":"<p>The ejabberd source code package includes <code>rebar</code> and <code>rebar3</code> binaries that work with Erlang/OTP 25.0 up to 28.</p> <p>To compile ejabberd using rebar/rebar3 and Erlang 20.0 up to 23.3, you can install it from your operating system, or compile yourself from the rebar source code, or download the old binary from ejabberd 21.12:</p> <pre><code>wget https://github.com/processone/ejabberd/raw/21.12/rebar\nwget https://github.com/processone/ejabberd/raw/21.12/rebar3\n</code></pre> <p>To compile ejabberd using rebar/rebar3 and Erlang 24.0 up to 24.3, you can install it from your operating system, or compile yourself from the rebar source code, or download the old binary from ejabberd 24.12:</p> <pre><code>wget https://github.com/processone/ejabberd/raw/24.12/rebar\nwget https://github.com/processone/ejabberd/raw/24.12/rebar3\n</code></pre>"},{"location":"admin/install/source/#start","title":"Start","text":"<p>You can use the <code>ejabberdctl</code> command line administration script to start and stop ejabberd. Some examples, depending on your installation method:</p> <ul> <li> <p>When installed in the system: <pre><code>ejabberdctl start\n/sbin/ejabberdctl start\n</code></pre></p> </li> <li> <p>When built an OTP production release: <pre><code>_build/prod/rel/ejabberd/bin/ejabberdctl start\n_build/prod/rel/ejabberd/bin/ejabberdctl live\n</code></pre></p> </li> <li> <p>Start interactively without installing or building OTP release: <pre><code>make relive\n</code></pre></p> </li> </ul>"},{"location":"admin/upgrade/","title":"Upgrade Procedure for ejabberd","text":"<p>upgrade</p> <p>Install a version of the program newer than the currently installed one.   Not to be confused with 6251a85a-47d0-11ee-be56-0242ac120002:dcbb8e9c8376903e5347d69131826faa: or 6251a85a-47d0-11ee-be56-0242ac120002:22c3e9c5ec4b3e5cf6983f0297f286e3:. <p>update</p> <p>Modify your program installation to match the requirements of the new program version.   This usually involves updating your configuration, your database schema, your API client, your custom modules...   Not to be confused with 6251a85a-47d0-11ee-be56-0242ac120002:aa139a602c68c398c378b1af1bf73c2e: or 6251a85a-47d0-11ee-be56-0242ac120002:781b4f169050d7cacab467b2f2577d2c:. <p>This document contains administration procedure for each version upgrade. Only upgrade from version N to N+1 is documented and supported. If you upgrade from an older version than previous one, you have to review all upgrade notes and apply each steps one by one for the possible database changes. You also have to stop your old ejabberd server, and start the new one.</p> <p>Until release note explicitly state you must restart the server for upgrade, you should be able to run soft upgrade using a cluster.  If you don't have cluster, upgrade from older release than previous one, or have explicit note soft upgrade does not work, then you have to fallback to standalone upgrade process.</p>"},{"location":"admin/upgrade/#generic-upgrade-process","title":"Generic upgrade process","text":"<p>This is the simplest process, and require service restart.</p> <ul> <li>read the corresponding upgrade notes</li> <li>apply the required changes in database from the upgrade note.</li> <li>stop old node</li> <li>archive content of mnesia database directory (database, i.e. <code>/opt/ejabberd-XX.YY/database</code>, <code>/usr/local/var/lib/ejabberd</code>, ...)</li> <li>install new version</li> <li>extract database archive in new path</li> <li> <p>if systemctl is used to manage ejabberd, copy the new service file and reload systemctl: <pre><code>cp ejabberd-21.12/bin/ejabberd.service /etc/systemd/system/\nsystemctl daemon-reload\n</code></pre></p> </li> <li> <p>start new node</p> </li> </ul>"},{"location":"admin/upgrade/#soft-upgrade-process","title":"Soft upgrade process","text":"<p>This process needs you to run in cluster, with at least two nodes. In this case, we assume you run node A and B with version N, and will upgrade to version N+1.</p> <ul> <li>read the corresponding upgrade notes, make sure it does not explicitly states \"soft upgrade is not supported\".</li> <li>apply the required changes in database from the upgrade note.</li> <li>make sure node A is running</li> <li>run leave_cluster on node B</li> <li>stop old node B</li> <li>install new version on B's host</li> <li>start new node B</li> <li>run join_cluster on node B, passing node A as parameter</li> <li>make sure both nodes are running and working as expected</li> <li>run leave_cluster on node A</li> <li>stop old node A</li> <li>install new version on A's host</li> <li>start new node A</li> <li>run join_cluster on node A, passing node B as parameter</li> </ul>"},{"location":"admin/upgrade/#module-update-process","title":"Module update process","text":"<p>Instead of upgrading all ejabberd to a brand new version, maybe you just want to update a few modules with bugfixes... in that case you can update only specific modules.</p> <p>This process is only recommended for bugfixes that involve functional changes, and do not involve structural or memory changes (those ones are usually detected and applied at server start only).</p> <p>How to do this?</p> <ol> <li>Apply the fixes to your source code, compile and reinstall ejabberd,    so the new <code>*.beam</code> files replace the old ones</li> <li>In the ejabberd Web Admin go to <code>Nodes</code> -&gt; your node -&gt; <code>Update</code></li> <li>This will detect what <code>*.beam</code> files have changed in the installation</li> <li>Select which modules you want to update now, and click <code>Update</code></li> <li>This will load into memory the corresponding <code>*.beam</code> files</li> </ol> <p>If you prefer to use commands, check update_list + update.</p> <p>Notice this does not restart modules or any other tasks. If the fix you plan to apply requires a module restart, you can use this alternative: restart_module.</p>"},{"location":"admin/upgrade/#note-on-database-schema-update","title":"Note on database schema update","text":"<p>ejabberd automatically updates the Mnesia table definitions at startup when needed. If you also use an external database (like MySQL, ...) for storage of some modules, check in the corresponding upgrade notes of the new ejabberd version if you need to update those tables yourself manually.</p>"},{"location":"admin/upgrade/#specific-version-upgrade-notes","title":"Specific version upgrade notes","text":"<p>The corresponsing ugprade notes are available in the release notes of each release, and also available in the Archive section:</p> <ul> <li>Upgrading from ejabberd 25.04 to 25.07</li> <li>Upgrading from ejabberd 25.03 to 25.04</li> <li>Upgrading from ejabberd 24.12 to 25.03</li> <li>Upgrading from ejabberd 24.10 to 24.12</li> <li>Upgrading from ejabberd 24.07 to 24.10</li> <li>Upgrading from ejabberd 24.06 to 24.07</li> <li>Upgrading from ejabberd 24.02 to 24.06</li> <li>Upgrading from ejabberd 23.10 to 24.02</li> <li>Upgrading from ejabberd 23.04 to 23.10</li> <li>Upgrading from ejabberd 23.01 to 23.04</li> <li>Upgrading from ejabberd 22.10 to 23.01</li> <li>Upgrading from ejabberd 22.05 to 22.10</li> <li>Upgrading from ejabberd 21.12 to 22.05</li> <li>Upgrading from ejabberd 21.07 to 21.12</li> <li>Upgrading from ejabberd 21.04 to 21.07</li> <li>Upgrading from ejabberd 21.01 to 21.04</li> <li>Upgrading from ejabberd 19.08 to 20.01</li> <li>Upgrading from ejabberd 19.05 to 19.08</li> <li>Upgrading from ejabberd 19.02 to 19.05</li> <li>Upgrading from ejabberd 18.12 to 19.02</li> <li>Upgrading from ejabberd 18.09 to 18.12</li> <li>Upgrading from ejabberd 18.06 to 18.09</li> <li>Upgrading from ejabberd 18.04 to 18.06</li> <li>Upgrading from ejabberd 18.03 to 18.04</li> <li>Upgrading from ejabberd 18.01 to 18.03</li> <li>Upgrading from ejabberd 17.11 to 18.01</li> <li>Upgrading from ejabberd 17.09 to 17.11</li> <li>Upgrading from ejabberd \u226517.06 and \u226417.08 to 17.09</li> <li>Upgrading from ejabberd 17.03 or 17.04 to 17.06</li> <li>Upgrading from ejabberd \u226516.08 and \u226417.01 to 17.03</li> <li>Upgrading from ejabberd 16.06 to 16.08</li> <li>Upgrading from ejabberd 16.04 to 16.06</li> <li>Upgrading from ejabberd 16.03 to 16.04</li> <li>Upgrading from ejabberd 16.02 to 16.03</li> <li>Upgrading from ejabberd 15.11 to 16.02</li> <li>Upgrading from ejabberd 2.1.1x to 16.02</li> </ul>"},{"location":"archive/","title":"Archived Documentation","text":"<p>This section contains archived documentation of previous ejabberd releases. Please notice that it only contains the pages that most probably change between releases.</p> <ul> <li>25.07</li> <li>25.04</li> <li>25.03</li> <li>24.12</li> <li>24.10</li> <li>24.07</li> <li>24.06</li> <li>24.02</li> <li>23.10</li> <li>23.04</li> <li>23.01</li> <li>22.10</li> <li>22.05</li> <li>21.12</li> <li>21.07</li> <li>21.04</li> <li>21.01</li> <li>20.12</li> <li>20.07</li> <li>20.04</li> <li>20.03</li> <li>20.02</li> <li>20.01</li> </ul>"},{"location":"archive/20.01/","title":"Archived Documentation for 20.01","text":"<p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>ejabberd 20.01 release announcement</li> <li>ejabberd Github Compare from 19.09.1</li> </ul>"},{"location":"archive/20.01/upgrade/","title":"Upgrade to ejabberd 20.01","text":""},{"location":"archive/20.01/upgrade/#database-changes","title":"Database changes","text":"<p>To migrate from 19.08 (or 19.09) to 20.01, you have to use the following commands on your existing database, after you\u2019ve made a backup of it:</p>"},{"location":"archive/20.01/upgrade/#mysql","title":"MySQL","text":"<p>If you are using the legacy <code>mysql.sql</code> schema:</p> <pre><code>ALTER TABLE  oauth_client CHANGE `client` `client_id` text PRIMARY KEY;\nALTER TABLE  oauth_client CHANGE `secret` `client_name` text NOT NULL;\n</code></pre> <p>If you are using the newer <code>mysql.new.sql</code> schema:</p> <pre><code>CREATE TABLE oauth_client (\n   client_id varchar(191) NOT NULL PRIMARY KEY,\n   client_name text NOT NULL,\n   grant_type text NOT NULL,\n   options text NOT NULL\n) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n</code></pre>"},{"location":"archive/20.01/upgrade/#postgresql","title":"PostgreSQL","text":"<pre><code>CREATE TABLE oauth_client (\n    client_id text PRIMARY KEY,\n    client_name text NOT NULL,\n    grant_type text NOT NULL,\n    options text NOT NULL\n);\nALTER TABLE oauth_client RENAME COLUMN client TO client_id;\nALTER TABLE oauth_client RENAME COLUMN secret TO client_name;\n</code></pre>"},{"location":"archive/20.02/","title":"Archived Documentation for 20.02","text":"<p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>ejabberd 20.02 release announcement</li> <li>ejabberd Github Compare from 20.01</li> </ul>"},{"location":"archive/20.03/","title":"Archived Documentation for 20.03","text":"<p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>ejabberd 20.03 release announcement</li> <li>ejabberd Github Compare from 20.02</li> </ul>"},{"location":"archive/20.04/","title":"Archived Documentation for 20.04","text":"<p>This section contains some archived sections for ejabberd 20.04.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 20.04 release announcement</li> <li>Docs Github Compare from 20.03</li> <li>ejabberd Github Compare from 20.03</li> </ul>"},{"location":"archive/20.07/","title":"Archived Documentation for 20.07","text":"<p>This section contains some archived sections for ejabberd 20.07.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 20.07 release announcement</li> <li>Docs Github Compare from 20.04</li> <li>ejabberd Github Compare from 20.04</li> </ul>"},{"location":"archive/20.12/","title":"Archived Documentation for 20.12","text":"<p>This section contains some archived sections for ejabberd 20.12.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 20.12 release announcement</li> <li>Docs Github Compare from 20.07</li> <li>ejabberd Github Compare from 20.07</li> </ul>"},{"location":"archive/21.01/","title":"Archived Documentation for 21.01","text":"<p>This section contains some archived sections for ejabberd 21.01.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 21.01 release announcement</li> <li>Docs Github Compare from 20.12</li> <li>ejabberd Github Compare from 20.12</li> </ul>"},{"location":"archive/21.04/","title":"Archived Documentation for 21.04","text":"<p>This section contains some archived sections for ejabberd 21.04.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 21.04 release announcement</li> <li>Docs Github Compare from 21.01</li> <li>ejabberd Github Compare from 21.01</li> </ul>"},{"location":"archive/21.04/upgrade/","title":"Upgrade to ejabberd 21.04","text":""},{"location":"archive/21.04/upgrade/#database-changes","title":"Database changes","text":""},{"location":"archive/21.04/upgrade/#mysql","title":"MySQL","text":"<p>When migrating from any recent version to 21.04, you may want to apply this MySQL database definition improvement.</p> <p>We updated the database definition to fix the <code>specified key was too long</code> warnings. By default, the new character set and collation (<code>utf8mb4</code> and <code>utf8mb4_unicode_ci</code>) will only be used with newly created databases. The existing installations don\u2019t need to convert anything.</p> <p>However, if you feel like it, after you upgrade to ejabberd 21.04, you can apply the following SQL command to convert your existing MySQL database character set to the latest definition:</p> <pre><code>alter table push_session convert to character set utf8mb4 collate utf8mb4_unicode_ci;\nalter table mqtt_pub convert to character set utf8mb4 collate utf8mb4_unicode_ci;\n</code></pre>"},{"location":"archive/21.07/","title":"Archived Documentation for 21.07","text":"<p>This section contains some archived sections for ejabberd 21.07.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 21.07 release announcement</li> <li>Docs Github Compare from 21.04</li> <li>ejabberd Github Compare from 21.04</li> </ul>"},{"location":"archive/21.12/","title":"Archived Documentation for 21.12","text":"<p>This section contains some archived sections for ejabberd 21.12.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 21.12 release announcement</li> <li>Docs Github Compare from 21.07</li> <li>ejabberd Github Compare from 21.07</li> </ul>"},{"location":"archive/21.12/upgrade/","title":"Upgrade to ejabberd 21.12","text":""},{"location":"archive/21.12/upgrade/#postgresql-new-schema","title":"PostgreSQL new schema","text":"<p>If you migrated your PostgreSQL database from old to new schema using previous ejabberd versions, your database may be missing the migration steps for the <code>push_session</code> table. You can update it now with: <pre><code>ALTER TABLE push_session ADD COLUMN server_host text NOT NULL DEFAULT '&lt;HOST&gt;';\nDROP INDEX i_push_usn;\nDROP INDEX i_push_ut;\nALTER TABLE push_session ADD PRIMARY KEY (server_host, username, timestamp);\nCREATE UNIQUE INDEX i_push_session_susn ON push_session USING btree (server_host, username, service, node);\n</code></pre></p> <p>In the PostgreSQL new schema, the primary key for the <code>vcard_search</code> table was wrong. How to update an existing database:</p> <pre><code>ALTER TABLE vcard_search DROP CONSTRAINT vcard_search_pkey;\nALTER TABLE vcard_search ADD PRIMARY KEY (server_host, lusername);\n</code></pre>"},{"location":"archive/21.12/upgrade/#mod_register_web-restrictions","title":"mod_register_web restrictions","text":"<p>mod_register_web is now affected by the restrictions that you configure in mod_register.</p>"},{"location":"archive/22.05/","title":"Archived Documentation for 22.05","text":"<p>This section contains some archived sections for ejabberd 22.05.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 22.05 release announcement</li> <li>Docs Github Compare from 21.12</li> <li>ejabberd Github Compare from 21.12</li> </ul>"},{"location":"archive/22.05/upgrade/","title":"Upgrade to ejabberd 22.05","text":""},{"location":"archive/22.05/upgrade/#new-indexes-in-sql-for-muc","title":"New Indexes in SQL for MUC","text":"<p>Two new indexes were added to optimize MUC. Those indexes can be added in the database before upgrading to 22.05, that will not affect older versions.</p> <p>To update an existing database, depending on the schema used to create it:</p> <ul> <li> <p>MySQL (<code>mysql.sql</code> or <code>mysql.new.sql</code>): <pre><code>CREATE INDEX i_muc_room_host_created_at ON muc_room(host(75), created_at);\nCREATE INDEX i_muc_room_subscribers_jid USING BTREE ON muc_room_subscribers(jid);\n</code></pre></p> </li> <li> <p>PostgreSQL (<code>pg.sql</code> or <code>pg.new.sql</code>): <pre><code>CREATE INDEX i_muc_room_host_created_at ON muc_room USING btree (host, created_at);\nCREATE INDEX i_muc_room_subscribers_jid ON muc_room_subscribers USING btree (jid);\n</code></pre></p> </li> <li> <p>SQLite (<code>lite.sql</code> or <code>lite.new.sql</code>): <pre><code>CREATE INDEX i_muc_room_host_created_at ON muc_room (host, created_at);\nCREATE INDEX i_muc_room_subscribers_jid ON muc_room_subscribers(jid);\n</code></pre></p> </li> <li> <p>MS SQL (<code>mssql.sql</code>): <pre><code>CREATE INDEX [muc_room_host_created_at] ON [muc_registered] (host, nick)\n    WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\nCREATE INDEX [muc_room_subscribers_jid] ON [muc_room_subscribers] (jid);\n</code></pre></p> </li> </ul>"},{"location":"archive/22.05/upgrade/#fixes-in-postgresql-new-schema","title":"Fixes in PostgreSQL New Schema","text":"<p>If you moved your PostgreSQL database from old to new schema using mod_admin_update_sql or the update_sql API command, be aware that those methods forgot to perform some updates.</p> <p>To fix an existing PostgreSQL database schema, apply those changes manually:</p> <pre><code>ALTER TABLE archive DROP CONSTRAINT i_archive_sh_peer;\nALTER TABLE archive DROP CONSTRAINT i_archive_sh_bare_peer;\nCREATE INDEX i_archive_sh_username_peer ON archive USING btree (server_host, username, peer);\nCREATE INDEX i_archive_sh_username_bare_peer ON archive USING btree (server_host, username, bare_peer);\n\nDROP TABLE carboncopy;\n\nALTER TABLE push_session DROP CONSTRAINT i_push_session_susn;\nCREATE UNIQUE INDEX i_push_session_susn ON push_session USING btree (server_host, username, service, node);\n\nALTER TABLE mix_pam DROP CONSTRAINT i_mix_pam;\nALTER TABLE mix_pam DROP CONSTRAINT i_mix_pam_us;\nCREATE UNIQUE INDEX i_mix_pam ON mix_pam (username, server_host, channel, service);\nCREATE INDEX i_mix_pam_us ON mix_pam (username, server_host);\n\nALTER TABLE route DROP CONSTRAINT i_route;\nCREATE UNIQUE INDEX i_route ON route USING btree (domain, server_host, node, pid);\n\nALTER TABLE mqtt_pub DROP CONSTRAINT i_mqtt_topic;\nCREATE UNIQUE INDEX i_mqtt_topic_server ON mqtt_pub (topic, server_host);\n</code></pre>"},{"location":"archive/22.05/upgrade/#api-changes","title":"API Changes","text":"<p>The <code>oauth_revoke_token</code> API command has changed its returned result. Check oauth_revoke_token documentation.</p>"},{"location":"archive/22.10/","title":"Archived Documentation for 22.10","text":"<p>This section contains some archived sections for ejabberd 22.10.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 22.10 release announcement</li> <li>Docs Github Compare from 22.05</li> <li>ejabberd Github Compare from 22.05</li> </ul>"},{"location":"archive/22.10/upgrade/","title":"Upgrade to ejabberd 22.10","text":"<p>There are no breaking changes in SQL schemas, configuration, or commands API. If you develop an ejabberd module, notice two hooks have changed: <code>muc_subscribed</code> and <code>muc_unsubscribed</code>.</p>"},{"location":"archive/22.10/upgrade/#hook-changes","title":"Hook Changes","text":"<p>Two hooks have changed: <code>muc_subscribed</code> and <code>muc_unsubscribed</code>. Now they get the packet and room state, and can modify the sent packets. If you write source code that adds functions to those hooks, please notice that previously they were ran like:</p> <pre><code>ejabberd_hooks:run(muc_subscribed, ServerHost, [ServerHost, Room, Host, BareJID]);\n</code></pre> <p>and now they are ran like this: <pre><code>{Packet2a, Packet2b} = ejabberd_hooks:run_fold(muc_subscribed, ServerHost, {Packet1a, Packet1b},\n[ServerHost, Room, Host, BareJID, StateData]),\n</code></pre> being Packet1b a copy of Packet1a without the <code>jid</code> attribute in the <code>muc_subscribe</code> element.</p>"},{"location":"archive/23.01/","title":"Archived Documentation for 23.01","text":"<p>This section contains some archived sections for ejabberd 23.01.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 23.01 release announcement</li> <li>Docs Github Compare from 22.10</li> <li>ejabberd Github Compare from 22.10</li> </ul>"},{"location":"archive/23.01/upgrade/","title":"Upgrade to ejabberd 23.01","text":"<p>There is a new module, new hooks, new options, and some option accepts additional values, but there are no breaking changes in SQL schemas, configuration, or commands API.</p> <p>Please check the ejabberd 23.01 release announcement for details about the improvements.</p>"},{"location":"archive/23.01/upgrade/#changes-in-option-outgoing_s2s_families","title":"Changes in option <code>outgoing_s2s_families</code>","text":"<p>The <code>outgoing_s2s_families</code> top-level option specifies which address families to try, in what order.</p> <p>The default value has now been changed to try IPv6 first, as servers are within data centers where IPv6 is more commonly enabled (contrary to clients). And if it\u2019s not present, then it\u2019ll just fall back to IPv4.</p> <p>By the way, this option is obsolete and irrelevant when using ejabberd 23.01 and Erlang/OTP 22, or newer versions of them.</p>"},{"location":"archive/23.04/","title":"Archived Documentation for 23.04","text":"<p>This section contains some archived sections for ejabberd 23.04.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 23.04 release announcement</li> <li>Docs Github Compare from 23.01</li> <li>ejabberd Github Compare from 23.01</li> </ul>"},{"location":"archive/23.04/upgrade/","title":"Upgrade to ejabberd 23.04","text":"<p>There is a new module, new hooks, new options, and some option accepts additional values, and more importantly, there are many improvements in the SQL schemas, and a change in the <code>ecs</code> container image.</p> <p>Please check the ejabberd 23.04 release announcement for details about the improvements.</p>"},{"location":"archive/23.04/upgrade/#many-improvements-in-sql-databases","title":"Many improvements in SQL databases","text":"<p>There are many improvements in the SQL databases field (see #3980 and #3982):</p> <ul> <li>Added support to migrate MySQL and MS SQL to new schema, fixed a long standing bug, and many other improvements.</li> <li>Regarding MS SQL, there are schema fixes, added support to <code>new</code> schema, and the corresponding schema migration, along other minor improvements and bugfixes.</li> <li>The automated ejabberd testing now also runs tests on upgraded schema databases, and supports for running tests on MS SQL</li> <li>And also fixed other minor SQL schema inconsistencies, removed unnecessary indexes and changed PostgreSQL SERIAL to BIGSERIAL columns.</li> </ul> <p>Please upgrade your existing SQL database, check the notes later in this document!</p>"},{"location":"archive/23.04/upgrade/#erlang-node-name-in-ecs-container-image","title":"Erlang node name in <code>ecs</code> container image","text":"<p>The <code>ecs</code> container image is built using the files from docker-ejabberd/ecs, and published in docker.io/ejabberd/ecs. This image in general gets only minimal fixes, no major or breaking changes, but in this release it got a change that will require the administrator intervention.</p> <p>The Erlang node name is now by default fixed to <code>ejabberd@localhost</code>, instead of being variably set by the container host name. If you previously allowed ejabberd to decide its node name (which was random), then it will now create a new mnesia database instead of using the previous one: <pre><code>$ docker exec -it ejabberd ls /home/ejabberd/database/\nejabberd@1ca968a0301a\nejabberd@localhost\n...\n</code></pre></p> <p>A simple solution is to create the container providing <code>ERLANG_NODE_ARG</code> with the old erlang node name, for example: <pre><code>docker run ... -e ERLANG_NODE_ARG=ejabberd@1ca968a0301a\n</code></pre> or in docker-compose.yml <pre><code>version: '3.7'\nservices:\n  main:\n    image: ejabberd/ecs\n    environment:\n      - ERLANG_NODE_ARG=ejabberd@1ca968a0301a\n</code></pre></p> <p>Another solution is to change the mnesia node name in the mnesia spool files.</p>"},{"location":"archive/23.04/upgrade/#sql-databases-update","title":"SQL databases update","text":"<p>Those notes allow to apply the improvements in the SQL database schemas from this ejabberd release to your existing SQL database. Please take into account what database you use, and whether it is the default or the new schema.</p>"},{"location":"archive/23.04/upgrade/#postgresql-new-schema","title":"PostgreSQL new schema","text":"<p>Fix a long standing bug in new schema on PostgreSQL. The fix for any existing impacted installations is the same: <pre><code>ALTER TABLE vcard_search DROP CONSTRAINT vcard_search_pkey;\nALTER TABLE vcard_search ADD PRIMARY KEY (server_host, lusername);\n</code></pre></p>"},{"location":"archive/23.04/upgrade/#postgresql-defaultnew-schema","title":"PostgreSQL default/new schema","text":"<p>To convert columns to allow up to 2 billion rows in these tables. This conversion will require full table rebuilds, and will take a long time if tables already have lots of rows. Optional: this is not necessary if the tables are never likely to grow large.</p> <pre><code>ALTER TABLE archive ALTER COLUMN id TYPE BIGINT;\nALTER TABLE privacy_list ALTER COLUMN id TYPE BIGINT;\nALTER TABLE pubsub_node ALTER COLUMN nodeid TYPE BIGINT;\nALTER TABLE pubsub_state ALTER COLUMN stateid TYPE BIGINT;\nALTER TABLE spool ALTER COLUMN seq TYPE BIGINT;\n</code></pre>"},{"location":"archive/23.04/upgrade/#postgresqlsqlite-default-schema","title":"PostgreSQL/SQLite default schema","text":"<pre><code>DROP INDEX i_rosteru_username;\nDROP INDEX i_sr_user_jid;\nDROP INDEX i_privacy_list_username;\nDROP INDEX i_private_storage_username;\nDROP INDEX i_muc_online_users_us;\nDROP INDEX i_route_domain;\nDROP INDEX i_mix_participant_chan_serv;\nDROP INDEX i_mix_subscription_chan_serv_ud;\nDROP INDEX i_mix_subscription_chan_serv;\nDROP INDEX i_mix_pam_us;\n</code></pre>"},{"location":"archive/23.04/upgrade/#postgresqlsqlite-new-schema","title":"PostgreSQL/SQLite new schema","text":"<pre><code>DROP INDEX i_rosteru_sh_username;\nDROP INDEX i_sr_user_sh_jid;\nDROP INDEX i_privacy_list_sh_username;\nDROP INDEX i_private_storage_sh_username;\nDROP INDEX i_muc_online_users_us;\nDROP INDEX i_route_domain;\nDROP INDEX i_mix_participant_chan_serv;\nDROP INDEX i_mix_subscription_chan_serv_ud;\nDROP INDEX i_mix_subscription_chan_serv;\nDROP INDEX i_mix_pam_us;\n</code></pre> <p>And now add index that might be missing</p> <p>In PostgreSQL: <pre><code>CREATE INDEX i_push_session_sh_username_timestamp ON push_session USING btree (server_host, username, timestamp);\n</code></pre></p> <p>In SQLite: <pre><code>CREATE INDEX i_push_session_sh_username_timestamp ON push_session (server_host, username, timestamp);\n</code></pre></p>"},{"location":"archive/23.04/upgrade/#mysql-default-schema","title":"MySQL default schema","text":"<pre><code>ALTER TABLE rosterusers DROP INDEX i_rosteru_username;\nALTER TABLE sr_user DROP INDEX i_sr_user_jid;\nALTER TABLE privacy_list DROP INDEX i_privacy_list_username;\nALTER TABLE private_storage DROP INDEX i_private_storage_username;\nALTER TABLE muc_online_users DROP INDEX i_muc_online_users_us;\nALTER TABLE route DROP INDEX i_route_domain;\nALTER TABLE mix_participant DROP INDEX i_mix_participant_chan_serv;\nALTER TABLE mix_subscription DROP INDEX i_mix_subscription_chan_serv_ud;\nALTER TABLE mix_subscription DROP INDEX i_mix_subscription_chan_serv;\nALTER TABLE mix_pam DROP INDEX i_mix_pam_u;\n</code></pre>"},{"location":"archive/23.04/upgrade/#mysql-new-schema","title":"MySQL new schema","text":"<p><pre><code>ALTER TABLE rosterusers DROP INDEX i_rosteru_sh_username;\nALTER TABLE sr_user DROP INDEX i_sr_user_sh_jid;\nALTER TABLE privacy_list DROP INDEX i_privacy_list_sh_username;\nALTER TABLE private_storage DROP INDEX i_private_storage_sh_username;\nALTER TABLE muc_online_users DROP INDEX i_muc_online_users_us;\nALTER TABLE route DROP INDEX i_route_domain;\nALTER TABLE mix_participant DROP INDEX i_mix_participant_chan_serv;\nALTER TABLE mix_subscription DROP INDEX i_mix_subscription_chan_serv_ud;\nALTER TABLE mix_subscription DROP INDEX i_mix_subscription_chan_serv;\nALTER TABLE mix_pam DROP INDEX i_mix_pam_us;\n</code></pre> Add index that might be missing: <pre><code>CREATE INDEX i_push_session_sh_username_timestamp ON push_session (server_host, username(191), timestamp);\n</code></pre></p>"},{"location":"archive/23.04/upgrade/#ms-sql","title":"MS SQL","text":"<pre><code>DROP INDEX [rosterusers_username] ON [rosterusers];\nDROP INDEX [sr_user_jid] ON [sr_user];\nDROP INDEX [privacy_list_username] ON [privacy_list];\nDROP INDEX [private_storage_username] ON [private_storage];\nDROP INDEX [muc_online_users_us] ON [muc_online_users];\nDROP INDEX [route_domain] ON [route];\ngo\n</code></pre> <p>MS SQL schema was missing some tables added in earlier versions of ejabberd:</p> <pre><code>CREATE TABLE [dbo].[mix_channel] (\n    [channel] [varchar] (250) NOT NULL,\n    [service] [varchar] (250) NOT NULL,\n    [username] [varchar] (250) NOT NULL,\n    [domain] [varchar] (250) NOT NULL,\n    [jid] [varchar] (250) NOT NULL,\n    [hidden] [smallint] NOT NULL,\n    [hmac_key] [text] NOT NULL,\n    [created_at] [datetime] NOT NULL DEFAULT GETDATE()\n) TEXTIMAGE_ON [PRIMARY];\n\nCREATE UNIQUE CLUSTERED INDEX [mix_channel] ON [mix_channel] (channel, service)\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n\nCREATE INDEX [mix_channel_serv] ON [mix_channel] (service)\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n\nCREATE TABLE [dbo].[mix_participant] (\n    [channel] [varchar] (250) NOT NULL,\n    [service] [varchar] (250) NOT NULL,\n    [username] [varchar] (250) NOT NULL,\n    [domain] [varchar] (250) NOT NULL,\n    [jid] [varchar] (250) NOT NULL,\n    [id] [text] NOT NULL,\n    [nick] [text] NOT NULL,\n    [created_at] [datetime] NOT NULL DEFAULT GETDATE()\n) TEXTIMAGE_ON [PRIMARY];\n\nCREATE UNIQUE INDEX [mix_participant] ON [mix_participant] (channel, service, username, domain)\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n\nCREATE INDEX [mix_participant_chan_serv] ON [mix_participant] (channel, service)\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n\nCREATE TABLE [dbo].[mix_subscription] (\n    [channel] [varchar] (250) NOT NULL,\n    [service] [varchar] (250) NOT NULL,\n    [username] [varchar] (250) NOT NULL,\n    [domain] [varchar] (250) NOT NULL,\n    [node] [varchar] (250) NOT NULL,\n    [jid] [varchar] (250) NOT NULL\n);\n\nCREATE UNIQUE INDEX [mix_subscription] ON [mix_subscription] (channel, service, username, domain, node)\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n\nCREATE INDEX [mix_subscription_chan_serv_ud] ON [mix_subscription] (channel, service, username, domain)\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n\nCREATE INDEX [mix_subscription_chan_serv_node] ON [mix_subscription] (channel, service, node)\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n\nCREATE INDEX [mix_subscription_chan_serv] ON [mix_subscription] (channel, service)\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n\nCREATE TABLE [dbo].[mix_pam] (\n    [username] [varchar] (250) NOT NULL,\n    [channel] [varchar] (250) NOT NULL,\n    [service] [varchar] (250) NOT NULL,\n    [id] [text] NOT NULL,\n    [created_at] [datetime] NOT NULL DEFAULT GETDATE()\n) TEXTIMAGE_ON [PRIMARY];\n\nCREATE UNIQUE CLUSTERED INDEX [mix_pam] ON [mix_pam] (username, channel, service)\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n\ngo\n</code></pre> <p>MS SQL also had some incompatible column types:</p> <pre><code>ALTER TABLE [dbo].[muc_online_room] ALTER COLUMN [node] VARCHAR (250);\nALTER TABLE [dbo].[muc_online_room] ALTER COLUMN [pid] VARCHAR (100);\nALTER TABLE [dbo].[muc_online_users] ALTER COLUMN [node] VARCHAR (250);\nALTER TABLE [dbo].[pubsub_node_option] ALTER COLUMN [name] VARCHAR (250);\nALTER TABLE [dbo].[pubsub_node_option] ALTER COLUMN [val] VARCHAR (250);\nALTER TABLE [dbo].[pubsub_node] ALTER COLUMN [plugin] VARCHAR (32);\ngo\n</code></pre> <p>... and <code>mqtt_pub</code> table was incorrectly defined in old schema:</p> <pre><code>ALTER TABLE [dbo].[mqtt_pub] DROP CONSTRAINT [i_mqtt_topic_server];\nALTER TABLE [dbo].[mqtt_pub] DROP COLUMN [server_host];\nALTER TABLE [dbo].[mqtt_pub] ALTER COLUMN [resource] VARCHAR (250);\nALTER TABLE [dbo].[mqtt_pub] ALTER COLUMN [topic] VARCHAR (250);\nALTER TABLE [dbo].[mqtt_pub] ALTER COLUMN [username] VARCHAR (250);\nCREATE UNIQUE CLUSTERED INDEX [dbo].[mqtt_topic] ON [mqtt_pub] (topic)\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\ngo\n</code></pre> <p>... and <code>sr_group</code> index/PK was inconsistent with other DBs:</p> <pre><code>ALTER TABLE [dbo].[sr_group] DROP CONSTRAINT [sr_group_PRIMARY];\nCREATE UNIQUE CLUSTERED INDEX [sr_group_name] ON [sr_group] ([name])\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\ngo\n</code></pre>"},{"location":"archive/23.10/","title":"Archived Documentation for 23.10","text":"<p>This section contains some archived sections for ejabberd 23.10.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 23.10 release announcement</li> <li>Docs Github Compare from 23.04</li> <li>ejabberd Github Compare from 23.04</li> </ul>"},{"location":"archive/23.10/upgrade/","title":"Upgrade to ejabberd 23.10","text":"<p>There is a new module, several new options, an API command has changed, but there are no breaking changes in the configuration, SQL schema.</p> <p>The <code>get_roster</code> API command has a different output, please check the release announcement for details.</p> <p>The MUC room option <code>allow_private_messages</code> is converted to <code>allowpm</code>. This conversion is automatic, you don't need to perform any task. However, once you update to ejabberd 23.10, the stored rooms options will be converted, and you should not attempt to use that content with ejabberd versions older than 23.10.</p> <p><code>gen_mod</code> API is simplified. If you write your own ejabberd modules, you can optionally use that new API.</p> <p>In summary, you can update from previous ejabberd version to this one without performing any upgrade tasks.</p> <p>Please check the ejabberd 23.10 release announcement for details about the improvements.</p>"},{"location":"archive/24.02/","title":"Archived Documentation for 24.02","text":"<p>This section contains some archived sections for ejabberd 24.02.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 24.02 release announcement</li> <li>Docs Github Compare from 24.02</li> <li>ejabberd Github Compare from 24.02</li> </ul>"},{"location":"archive/24.02/upgrade/","title":"Upgrade to ejabberd 24.02","text":"<p>If you upgrade ejabberd from a previous release to 24.02, please review those changes:</p> <ul> <li>Update the SQL schema</li> <li>Update API commands as explained below, or use API versioning</li> <li>Mix or Rebar3 used by default instead of Rebar to compile ejabberd</li> <li>Authentication workaround for Converse.js and Strophe.js</li> </ul>"},{"location":"archive/24.02/upgrade/#update-the-sql-schema","title":"Update the SQL schema","text":"<p>The table <code>archive</code> has a text column named <code>origin_id</code> (see commit 975681). You have two methods to update the SQL schema of your existing database:</p> <p>If using MySQL or PosgreSQL, you can enable the option <code>update_sql_schema</code> and ejabberd will take care to update the SQL schema when needed: add in your ejabberd configuration file the line <code>update_sql_schema: true</code></p> <p>If you are using other database, or prefer to update manually the SQL schema:</p> <ul> <li> <p>MySQL default schema: <pre><code>ALTER TABLE archive ADD COLUMN origin_id varchar(191) NOT NULL DEFAULT '';\nALTER TABLE archive ALTER COLUMN origin_id DROP DEFAULT;\nCREATE INDEX i_archive_username_origin_id USING BTREE ON archive(username(191), origin_id(191));\n</code></pre></p> </li> <li> <p>MySQL new schema: <pre><code>ALTER TABLE archive ADD COLUMN origin_id varchar(191) NOT NULL DEFAULT '';\nALTER TABLE archive ALTER COLUMN origin_id DROP DEFAULT;\nCREATE INDEX i_archive_sh_username_origin_id USING BTREE ON archive(server_host(191), username(191), origin_id(191));\n</code></pre></p> </li> <li> <p>PostgreSQL default schema: <pre><code>ALTER TABLE archive ADD COLUMN origin_id text NOT NULL DEFAULT '';\nALTER TABLE archive ALTER COLUMN origin_id DROP DEFAULT;\nCREATE INDEX i_archive_username_origin_id ON archive USING btree (username, origin_id);\n</code></pre></p> </li> <li> <p>PostgreSQL new schema: <pre><code>ALTER TABLE archive ADD COLUMN origin_id text NOT NULL DEFAULT '';\nALTER TABLE archive ALTER COLUMN origin_id DROP DEFAULT;\nCREATE INDEX i_archive_sh_username_origin_id ON archive USING btree (server_host, username, origin_id);\n</code></pre></p> </li> <li> <p>MSSQL default schema: <pre><code>ALTER TABLE [dbo].[archive] ADD [origin_id] VARCHAR (250) NOT NULL;\nCREATE INDEX [archive_username_origin_id] ON [archive] (username, origin_id)\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n</code></pre></p> </li> <li> <p>MSSQL new schema: <pre><code>ALTER TABLE [dbo].[archive] ADD [origin_id] VARCHAR (250) NOT NULL;\nCREATE INDEX [archive_sh_username_origin_id] ON [archive] (server_host, username, origin_id)\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n</code></pre></p> </li> <li> <p>SQLite default schema: <pre><code>ALTER TABLE archive ADD COLUMN origin_id text NOT NULL DEFAULT '';\nCREATE INDEX i_archive_username_origin_id ON archive (username, origin_id);\n</code></pre></p> </li> <li> <p>SQLite new schema: <pre><code>ALTER TABLE archive ADD COLUMN origin_id text NOT NULL DEFAULT '';\nCREATE INDEX i_archive_sh_username_origin_id ON archive (server_host, username, origin_id);\n</code></pre></p> </li> </ul>"},{"location":"archive/24.02/upgrade/#support-for-api-versioning","title":"Support for API versioning","text":"<p>Until now, when a new ejabberd release changed some API command (an argument renamed, a result in a different format...), then you had to update your API client to the new API at the same time that you updated ejabberd.</p> <p>Now the ejabberd API commands can have different versions, by default the most recent one is used, and the API client can specify the API version it supports.</p> <p>In fact, this feature was implemented seven years ago, included in ejabberd 16.04, documented in ejabberd Docs: API Versioning... but it was never actually used!</p> <p>This ejabberd release includes many fixes to get API versioning up to date, and it starts being used by several commands.</p> <p>Let's say that ejabberd 23.10 implemented API version 0, and this ejabberd 24.02 adds API version 1. You may want to update your API client to use the new API version 1... or you can continue using API version 0 and delay API update a few weeks or months.</p> <p>To continue using API version 0:</p> <ul> <li>if using ejabberdctl, use the switch <code>--version 0</code>. For example: <code>ejabberdctl --version 0 get_roster admin localhost</code></li> <li>if using mod_http_api, in ejabberd configuration file add <code>v0</code> to the <code>request_handlers</code> path. For example: <code>/api/v0: mod_http_api</code></li> </ul> <p>Check the ejabberd 24.02 full release notes for more details about the changed commands.</p> <p>Check the full documentation in ejabberd Docs: API Versioning.</p>"},{"location":"archive/24.02/upgrade/#use-mix-or-rebar3-by-default-instead-of-rebar-to-compile-ejabberd","title":"Use Mix or Rebar3 by default instead of Rebar to compile ejabberd","text":"<p>ejabberd uses Rebar to manage dependencies and compilation since ejabberd 13.10 4d8f770. However, that tool is obsolete and unmaintained since years ago, because there is a complete replacement:</p> <p>Rebar3 is supported by ejabberd since 20.12 0fc1aea. Among other benefits, this allows to download dependencies from hex.pm and cache them in your system instead of downloading them from git every time, and allows to compile Elixir files and Elixir dependencies.</p> <p>In fact, ejabberd can be compiled using <code>mix</code> (a tool included with the Elixir programming language) since ejabberd 15.04 ea8db99 (with improvements in ejabberd 21.07 4c5641a)</p> <p>For those reasons, the tool selection performed by <code>./configure</code> will now be:</p> <ul> <li>If <code>--with-rebar=rebar3</code> but Rebar3 not found installed in the system, use the <code>rebar3</code> binary included with ejabberd</li> <li>Use the program specified in option: <code>--with-rebar=/path/to/bin</code></li> <li>If none is specified, use the system <code>mix</code></li> <li>If Elixir not found, use the system <code>rebar3</code></li> <li>If Rebar3 not found, use the <code>rebar3</code> binary included with ejabberd</li> </ul>"},{"location":"archive/24.02/upgrade/#authentication-workaround-for-conversejs-and-strophejs","title":"Authentication workaround for Converse.js and Strophe.js","text":"<p>This ejabberd release includes support for XEP-0474: SASL SCRAM Downgrade Protection, and some clients may not support it correctly yet.</p> <p>If you are using Converse.js 10.1.6 or older, Movim 0.23 Kojima or older, or any other client based in Strophe.js v1.6.2 or older, you may notice that they cannot authenticate correctly to ejabberd.</p> <p>To solve that problem, either update to newer versions of those programs (if they exist), or you can enable temporarily the option <code>disable_sasl_scram_downgrade_protection</code> in the ejabberd configuration file <code>ejabberd.yml</code> like this: <pre><code>disable_sasl_scram_downgrade_protection: true\n</code></pre></p>"},{"location":"archive/24.06/","title":"Archived Documentation for 24.06","text":"<p>This section contains some archived sections for ejabberd 24.06.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 24.06 release announcement</li> <li>Docs Github Compare from 24.02</li> <li>ejabberd Github Compare from 24.02</li> </ul>"},{"location":"archive/24.06/upgrade/","title":"Upgrade to ejabberd 24.06","text":"<p>If you upgrade ejabberd from a previous release to 24.06, please review those changes:</p> <ul> <li>Update commands to API v2</li> <li>Or continue using previous API version</li> <li>WebAdmin hooks changes</li> </ul>"},{"location":"archive/24.06/upgrade/#update-commands-to-api-v2","title":"Update commands to API v2","text":"<p>ejabberd 24.06 has changed some commands, which are tagged as API v2.</p> <p>Check what commands have changed as announced in the ejabberd 24.06 release notes, and update them in your API client if you use any of them.</p>"},{"location":"archive/24.06/upgrade/#continue-using-previous-api-version","title":"Continue using previous API version","text":"<p>You can update your API client to use the new API version 2... or you can continue using API version 0 or version 1 and delay API update a few weeks or months.</p> <p>To continue using API version 0:</p> <ul> <li>if using ejabberdctl, use the switch <code>--version 0</code>. For example: <code>ejabberdctl --version 0 get_roster admin localhost</code></li> <li>if using mod_http_api, in ejabberd configuration file add <code>v0</code> to the <code>request_handlers</code> path. For example: <code>/api/v0: mod_http_api</code></li> </ul> <p>Check the full documentation in ejabberd Docs: API Versioning.</p>"},{"location":"archive/24.06/upgrade/#webadmin-hook-changes","title":"WebAdmin hook changes","text":"<p>There are several changes in WebAdmin hooks that now provide the whole HTTP request instead of only some of its elements.</p> <p>Check what hooks have changed as announced in the ejabberd 24.06 release notes, and update them in your custom ejabberd modules if you use any of them.</p>"},{"location":"archive/24.07/","title":"Archived Documentation for 24.07","text":"<p>This section contains some archived sections for ejabberd 24.07.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 24.07 release announcement</li> <li>Docs Github Compare from 24.06</li> <li>ejabberd Github Compare from 24.06</li> </ul>"},{"location":"archive/24.07/upgrade/","title":"Upgrade to ejabberd 24.07","text":"<p>If you upgrade ejabberd from a previous release to 24.07, please update the ejabberd configuration file:</p>"},{"location":"archive/24.07/upgrade/#webadmin-api-permissions-configuration","title":"WebAdmin API permissions configuration","text":"<p>The ejabberd 24.06 release notes announced the Improved WebAdmin with commands usage, and mentioned some <code>api_permissions</code> configuration details, but it was not explicit enough about this fact: with the default ejabberd configuration, an admin was allowed to login in WebAdmin from any machine, but only was allowed to execute commands from the loopback IP address! The WebAdmin showed the page sections, but all them were empty. Additionally, there was a bug that showed similar symptoms when entering the WebAdmin using a host and then logging in as an account in another host. Both problems and their solutions are described in #4249.</p> <p>Please update your configuration accordingly, adding permission from web admin to execute all commands to accounts logged in with admin privilege:</p> <pre><code>api_permissions:\n  \"webadmin commands\":\n    from: ejabberd_web_admin\n    who: admin\n    what: \"*\"\n</code></pre> <p>Of course you can customize that access as much as you want: only from specific IP addresses, only to certain accounts, only for specific commands...</p>"},{"location":"archive/24.10/","title":"Archived Documentation for 24.10","text":"<p>This section contains some archived sections for ejabberd 24.10.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 24.10 release announcement</li> <li>Docs Github Compare from 24.07</li> <li>ejabberd Github Compare from 24.07</li> </ul>"},{"location":"archive/24.10/upgrade/","title":"Upgrade to ejabberd 24.10","text":"<p>If you upgrade ejabberd from a previous release to 24.10, be aware there are some changes in commands and hooks. There are no changes in configuration and SQL schema.</p>"},{"location":"archive/24.10/upgrade/#fixes-in-commands","title":"Fixes in commands","text":"<ul> <li> <p><code>set_presence</code>: Return error when session not found</p> </li> <li> <p><code>send_direct_invitation</code>: Better handling of malformed jids</p> </li> <li> <p><code>update</code>: Fix command output</p> <p>So far, <code>ejabberd_update:update/0</code> returned the return value of <code>release_handler_1:eval_script/1</code>.  That function returns the list of updated but unpurged modules, i.e., modules where one or more processes are still running an old version of the code.  Since commit <code>5a34020d23f455f80a144bcb0d8ee94770c0dbb1</code>, the ejabberd <code>update</code> command assumes that value to be the list of updated modules instead.  As that seems more useful, modify <code>ejabberd_update:update/0</code> accordingly. This fixes the <code>update</code> command output.</p> </li> <li> <p><code>get_mam_count</code>: New command to get number of archived messages for an account</p> </li> </ul>"},{"location":"archive/24.10/upgrade/#changes-in-hooks","title":"Changes in hooks","text":"<ul> <li> <p>New <code>check_register_user</code> hook in <code>ejabberd_auth.erl</code> to allow blocking account registration when a tombstone exists.</p> </li> <li> <p>Modified <code>room_destroyed</code> hook in <code>mod_muc_room.erl</code>     Until now the hook passed as arguments: <code>LServer, Room, Host</code>.     Now it passes: <code>LServer, Room, Host, Persistent</code>     That new <code>Persistent</code> argument passes the room <code>persistent</code> option,     required by mod_tombstones because only persistent rooms should generate     a tombstone, temporary ones should not.     And the <code>persistent</code> option should not be completely overwritten, as we must     still known its real value even when room is being destroyed.</p> </li> </ul>"},{"location":"archive/24.12/","title":"Archived Documentation for 24.12","text":"<p>This section contains some archived sections for ejabberd 24.12.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 24.12 release announcement</li> <li>Docs Github Compare from 24.10</li> <li>ejabberd Github Compare from 24.10</li> </ul>"},{"location":"archive/24.12/upgrade/","title":"Upgrade to ejabberd 24.12","text":"<p>If you upgrade ejabberd from a previous release to 24.12, be aware there are some changes in commands. There are no changes in configuration, SQL schema or hooks.</p>"},{"location":"archive/24.12/upgrade/#commands-api-v3","title":"Commands API v3","text":"<p>This ejabberd 24.12 release introduces ejabberd Commands API v3 because some commands have changed arguments and result formatting. You can continue using API v2; or you can update your API client to use API v3. Check the API Versions History.</p> <p>Some commands that accepted accounts or rooms as arguments, or returned JIDs, have changed their arguments and results names and format to be consistent with the other commands:</p> <ul> <li>Arguments that refer to a user account are now named <code>user</code> and <code>host</code></li> <li>Arguments that refer to a MUC room are now named <code>room</code> and <code>service</code></li> <li>As seen, each argument is now only the local or server part, not the JID</li> <li>On the other hand, results that refer to user account or MUC room are now the JID</li> </ul> <p>In practice, the commands that change in API v3 are:</p> <ul> <li>get_room_affiliations</li> <li>muc_register_nick</li> <li>muc_unregister_nick</li> <li>set_room_affiliation</li> <li>status_list</li> <li>status_list_host</li> <li>subscribe_room</li> <li>subscribe_room_many</li> <li>unsubscribe_room</li> </ul> <p>If you want to update ejabberd to 24.12, but prefer to continue using an old API version with <code>mod_http_api</code>, you can set this new option: <pre><code>modules:\n  mod_http_api:\n    default_version: 2\n</code></pre></p>"},{"location":"archive/25.03/","title":"Archived Documentation for 25.03","text":"<p>This section contains some archived sections for ejabberd 25.03.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 25.03 release announcement</li> <li>Docs Github Compare from 24.12</li> <li>ejabberd Github Compare from 24.12</li> </ul>"},{"location":"archive/25.03/upgrade/","title":"Upgrade to ejabberd 25.03","text":"<p>If you upgrade ejabberd from a previous release to 25.03, please review those changes:</p> <ul> <li>Update the SQL schema</li> </ul>"},{"location":"archive/25.03/upgrade/#update-the-sql-schema","title":"Update the SQL schema","text":"<p>This release requires SQL database schema update to allow storage of multiple passwords per user. This task can be performed automatically by ejabberd, if your config has enabled <code>update_sql_schema</code> toplevel option.</p> <p>If you prefer to perform the SQL schema update manually yourself, check the corresponding instructions, depending if your config has enabled <code>new_sql_schema</code>:</p> <ul> <li> <p>MySQL default schema: <pre><code>ALTER TABLE users ADD COLUMN type smallint NOT NULL DEFAULT 0;\nALTER TABLE users ALTER COLUMN type DROP DEFAULT;\nALTER TABLE users DROP PRIMARY KEY, ADD PRIMARY KEY (username(191), type);\n</code></pre></p> </li> <li> <p>MySQL new schema: <pre><code>ALTER TABLE users ADD COLUMN type smallint NOT NULL DEFAULT 0;\nALTER TABLE users ALTER COLUMN type DROP DEFAULT;\nALTER TABLE users DROP PRIMARY KEY, ADD PRIMARY KEY (server_host(191), username(191), type);\n</code></pre></p> </li> <li> <p>PostgreSQL default schema: <pre><code>ALTER TABLE users ADD COLUMN \"type\" smallint NOT NULL DEFAULT 0;\nALTER TABLE users ALTER COLUMN type DROP DEFAULT;\nALTER TABLE users DROP CONSTRAINT users_pkey, ADD PRIMARY KEY (username, type);\n</code></pre></p> </li> <li> <p>PostgreSQL new schema: <pre><code>ALTER TABLE users ADD COLUMN \"type\" smallint NOT NULL DEFAULT 0;\nALTER TABLE users ALTER COLUMN type DROP DEFAULT;\nALTER TABLE users DROP CONSTRAINT users_pkey, ADD PRIMARY KEY (server_host, username, type);\n</code></pre></p> </li> <li> <p>SQLite default schema: <pre><code>ALTER TABLE users ADD COLUMN type smallint NOT NULL DEFAULT 0;\nCREATE TABLE new_users (\n    username text NOT NULL,\n    type smallint NOT NULL,\n    password text NOT NULL,\n    serverkey text NOT NULL DEFAULT '',\n    salt text NOT NULL DEFAULT '',\n    iterationcount integer NOT NULL DEFAULT 0,\n    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (username, type)\n);\nINSERT INTO new_users SELECT username, type, password, serverkey, salt, iterationcount, created_at FROM users;\nDROP TABLE users;\nALTER TABLE new_users RENAME TO users;\n</code></pre></p> </li> <li> <p>SQLite new schema: <pre><code>ALTER TABLE users ADD COLUMN type smallint NOT NULL DEFAULT 0;\nCREATE TABLE new_users (\n    username text NOT NULL,\n    server_host text NOT NULL,\n    type smallint NOT NULL,\n    password text NOT NULL,\n    serverkey text NOT NULL DEFAULT '',\n    salt text NOT NULL DEFAULT '',\n    iterationcount integer NOT NULL DEFAULT 0,\n    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (server_host, username, type)\n);\nINSERT INTO new_users SELECT username, server_host, type, password, serverkey, salt, iterationcount, created_at FROM users;\nDROP TABLE users;\nALTER TABLE new_users RENAME TO users;\n</code></pre></p> </li> </ul>"},{"location":"archive/25.04/","title":"Archived Documentation for 25.04","text":"<p>This section contains some archived sections for ejabberd 25.04.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 25.04 release announcement</li> <li>Docs Github Compare from 25.03</li> <li>ejabberd Github Compare from 25.03</li> </ul>"},{"location":"archive/25.04/upgrade/","title":"Upgrade to ejabberd 25.04","text":"<p>If you are upgrading ejabberd from 25.03 to 25.04, then there is no change required on your part.</p> <p>If you are upgrading from previous ejabberd versions, please review their corresponding upgrade notes.</p>"},{"location":"archive/25.07/","title":"Archived Documentation for 25.07","text":"<p>This section contains some archived sections for ejabberd 25.07.</p> <p>If you are upgrading ejabberd from a previous release, you can check:</p> <ul> <li>Specific version upgrade notes</li> <li>ejabberd 25.07 release announcement</li> <li>Docs Github Compare from 25.04</li> <li>ejabberd Github Compare from 25.04</li> </ul>"},{"location":"archive/25.07/upgrade/","title":"Upgrade to ejabberd 25.07","text":"<p>If you upgrade ejabberd from a previous release to 25.07, then there is no change required on your part.</p> <p>If you are upgrading from previous ejabberd versions, please review their corresponding upgrade notes.</p>"},{"location":"archive/older-releases/from_15.11_to_16.02/","title":"Upgrade to ejabberd 16.02","text":"<p>The MySQL schema changed to UTF-8 encoding. If you are using MySQL backend you must upgrade the schema before starting ejabberd 16.02.</p>"},{"location":"archive/older-releases/from_15.11_to_16.02/#sql-database-upgrade","title":"SQL database upgrade","text":"<p>Example for MySQL: <pre><code>mysql -h host -u user database -p &lt;&lt; EOF\nALTER DATABASE ejabberd CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nALTER TABLE users CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE users MODIFY username varchar(191);\n\nALTER TABLE last CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE last MODIFY username varchar(191);\n\nALTER TABLE rosterusers CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE rosterusers MODIFY username varchar(191);\nALTER TABLE rosterusers MODIFY jid varchar(191);\n\nALTER TABLE rostergroups CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE rostergroups MODIFY username varchar(191);\nALTER TABLE rostergroups MODIFY jid varchar(191);\n\nALTER TABLE sr_group CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE sr_group MODIFY username varchar(191);\n\nALTER TABLE spool CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE spool MODIFY username varchar(191);\nALTER TABLE spool MODIFY xml BLOB NOT NULL;\n\nALTER TABLE archive CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE archive MODIFY username varchar(191);\nALTER TABLE archive MODIFY peer varchar(191);\nALTER TABLE archive MODIFY bare_peer varchar(191);\nALTER TABLE archive MODIFY nick varchar(191);\n\nALTER TABLE archive_prefs CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE archive_prefs MODIFY username varchar(191);\n\nALTER TABLE vcard CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE vcard MODIFY username varchar(191);\n\nALTER TABLE vcard_xupdate CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE vcard_xupdate MODIFY username varchar(191);\n\nALTER TABLE vcard_search CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE vcard_search MODIFY username varchar(191);\nALTER TABLE vcard_search MODIFY lusername varchar(191);\nALTER TABLE vcard_search MODIFY lfn varchar(191);\nALTER TABLE vcard_search MODIFY lfamily varchar(191);\nALTER TABLE vcard_search MODIFY lgiven varchar(191);\nALTER TABLE vcard_search MODIFY lmiddle varchar(191);\nALTER TABLE vcard_search MODIFY lnickname varchar(191);\nALTER TABLE vcard_search MODIFY lbday varchar(191);\nALTER TABLE vcard_search MODIFY lctry varchar(191);\nALTER TABLE vcard_search MODIFY llocality varchar(191);\nALTER TABLE vcard_search MODIFY lemail varchar(191);\nALTER TABLE vcard_search MODIFY lorgname varchar(191);\nALTER TABLE vcard_search MODIFY lorgunit varchar(191);\n\nALTER TABLE privacy_default_list CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE privacy_default_list MODIFY username varchar(191);\nALTER TABLE privacy_default_list MODIFY name varchar(191);\n\nALTER TABLE privacy_list CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE privacy_list MODIFY username varchar(191);\nALTER TABLE privacy_list MODIFY name varchar(191);\n\nALTER TABLE privacy_list_data CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nALTER TABLE private_storage CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE private_storage MODIFY username varchar(191);\nALTER TABLE private_storage MODIFY namespace varchar(191);\n\nALTER TABLE roster_version CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE roster_version MODIFY username varchar(191);\n\nALTER TABLE pubsub_node CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE pubsub_node_option CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE pubsub_node_state CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE pubsub_node_item CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE pubsub_subscription_opt CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nALTER TABLE muc_room CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE muc_registered CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nALTER TABLE irc_custom CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nALTER TABLE motd CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE motd MODIFY username varchar(191);\n\nALTER TABLE caps_features CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE caps_features MODIFY node varchar(191);\nALTER TABLE caps_features MODIFY subnode varchar(191);\n\nALTER TABLE sm CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE sm MODIFY username varchar(191);\nALTER TABLE sm MODIFY resource varchar(191);\n\nALTER TABLE  CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nALTER TABLE  MODIFY username varchar(191);\nEOF\n</code></pre></p>"},{"location":"archive/older-releases/from_16.02_to_16.03/","title":"Upgrade to ejabberd 16.03","text":"<p>If you are using an sql backend for authentication, you must upgrade your schema before starting ejabberd 16.03. This can be safely done while a previous version of ejabberd is actually running.</p>"},{"location":"archive/older-releases/from_16.02_to_16.03/#sql-database-upgrade","title":"SQL database upgrade","text":"<p>Example for MySQL: <pre><code>mysql -h host -u user database -p &lt;&lt; EOF\nALTER TABLE users ADD COLUMN serverkey text NOT NULL DEFAULT '';\nALTER TABLE users ADD COLUMN salt text NOT NULL DEFAULT '';\nALTER TABLE users ADD COLUMN iterationcount integer NOT NULL DEFAULT 0;\nEOF\n</code></pre></p>"},{"location":"archive/older-releases/from_16.03_to_16.04/","title":"Upgrade to ejabberd 16.04","text":"<p>Two data type must be changed on the users table. This can be done at any time while ejabberd 16.03 is running. If you run an older version of ejabberd you must follow database upgrade process for 16.03 first.</p> <p>Note: this applies only to MySQL. Other backend does not need upgrade.</p>"},{"location":"archive/older-releases/from_16.03_to_16.04/#mysql-database-upgrade","title":"MySQL database upgrade","text":"<pre><code>mysql -h host -u user database -p &lt;&lt; EOF\nALTER TABLE users MODIFY serverkey varchar(64) NOT NULL DEFAULT '';\nALTER TABLE users MODIFY salt varchar(64) NOT NULL DEFAULT '';\nEOF\n</code></pre>"},{"location":"archive/older-releases/from_16.04_to_16.06/","title":"Upgrade to ejabberd 16.06","text":"<p>One data type must be changed on the users table. This can be done at any time while ejabberd 16.04 is running. If you run an older version of ejabberd you must follow database upgrade process for 16.03 and 16.04 first.</p> <p>Note: this applies only to MySQL. Other backend does not need upgrade.</p>"},{"location":"archive/older-releases/from_16.04_to_16.06/#mysql-database-upgrade","title":"MySQL database upgrade","text":"<pre><code>mysql -h host -u user database -p &lt;&lt; EOF\nALTER TABLE muc_room MODIFY opts mediumtext NOT NULL;\nEOF\n</code></pre>"},{"location":"archive/older-releases/from_16.06_to_16.08/","title":"Upgrade to ejabberd 16.08","text":"<p>You need to create a new table to support the new OAuth feature before starting ejabberd 16.08.</p>"},{"location":"archive/older-releases/from_16.06_to_16.08/#sql-database-upgrade","title":"SQL database upgrade","text":"<p>Example for MySQL: <pre><code>mysql -h host -u user database -p &lt;&lt; EOF\nCREATE TABLE oauth_token (\n  token varchar(191) NOT NULL PRIMARY KEY,\n  jid text NOT NULL,\n  scope text NOT NULL,\n  expire bigint NOT NULL\n) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nEOF\n</code></pre></p>"},{"location":"archive/older-releases/from_16.08_to_17.03/","title":"Upgrade to ejabberd 17.03","text":"<p>If you are upgrading from ejabberd 16.08, 16.09, 16.12 or 17.01, and are using an SQL backend, you need to alter tables for better PubSub support before starting ejabberd 17.03.</p>"},{"location":"archive/older-releases/from_16.08_to_17.03/#mysql-database-upgrade","title":"MySQL database upgrade","text":"<p>If you're running MySQL, this change in not mandatory but highly recommended</p> <pre><code>mysql -h host -u user database -p &lt;&lt; EOF\nALTER TABLE rosterusers MODIFY subscribe text NOT NULL;\n\nUPDATE pubsub_node SET parent='' WHERE parent=NULL;\n\nALTER TABLE pubsub_node\n MODIFY host TEXT NOT NULL,\n MODIFY node TEXT NOT NULL,\n MODIFY parent VARCHAR(191) NOT NULL DEFAULT '',\n MODIFY type TEXT NOT NULL;\n\nALTER TABLE pubsub_node_option \n MODIFY name text NOT NULL,\n MODIFY val text NOT NULL;\n\nALTER TABLE pubsub_node_owner\n MODIFY owner text NOT NULL;\n\nUPDATE pubsub_state SET subscriptions='' WHERE subscriptions=NULL;\n\nALTER TABLE pubsub_state\n MODIFY jid text NOT NULL,\n MODIFY subscriptions VARCHAR(191) NOT NULL DEFAULT '';\n\nALTER TABLE pubsub_item\n MODIFY itemid text NOT NULL,\n MODIFY publisher text NOT NULL,\n MODIFY creation text NOT NULL,\n MODIFY modification text NOT NULL,\n MODIFY payload text NOT NULL;\n\nALTER TABLE pubsub_subscription_opt\n MODIFY subid text NOT NULL,\n MODIFY opt_value text NOT NULL;\nEOF\n</code></pre>"},{"location":"archive/older-releases/from_16.08_to_17.03/#postgresql-database-upgrade","title":"PostgreSQL database upgrade","text":"<p>If you're running PostgreSQL, this change is mandatory.</p> <pre><code>psql -W -h host database user &lt;&lt; EOF\nALTER TABLE rosterusers ALTER COLUMN subscribe SET NOT NULL;\n\nUPDATE pubsub_node SET parent='' WHERE parent=NULL;\n\nALTER TABLE pubsub_node\nALTER COLUMN host SET NOT NULL,\nALTER COLUMN node SET NOT NULL,\nALTER COLUMN parent SET NOT NULL,\nALTER COLUMN parent SET DEFAULT '',\nALTER COLUMN type SET NOT NULL;\n\nALTER TABLE pubsub_node_option \nALTER COLUMN name SET NOT NULL,\nALTER COLUMN val SET NOT NULL;\n\nALTER TABLE pubsub_node_owner\nALTER COLUMN  owner SET NOT NULL;\n\nUPDATE pubsub_state SET subscriptions='' WHERE subscriptions=NULL;\n\nALTER TABLE pubsub_state\nALTER COLUMN jid SET NOT NULL,\nALTER COLUMN subscriptions SET NOT NULL,\nALTER COLUMN subscriptions SET DEFAULT '';\n\nALTER TABLE pubsub_item\nALTER COLUMN itemid SET NOT NULL,\nALTER COLUMN publisher SET NOT NULL,\nALTER COLUMN creation SET NOT NULL,\nALTER COLUMN modification SET NOT NULL,\nALTER COLUMN payload SET NOT NULL;\n\nALTER TABLE pubsub_subscription_opt\nALTER COLUMN subid SET NOT NULL,\nALTER COLUMN opt_value SET NOT NULL;\nEOF\n</code></pre>"},{"location":"archive/older-releases/from_16.08_to_17.03/#sqlite-database-upgrade","title":"SQLite database upgrade","text":"<p>If you're running SQLite, you have to create a new database with schema file provided in ejabberd 17.03 sources. Then you have to export all data from your current database and import into the newly created database.</p>"},{"location":"archive/older-releases/from_16.08_to_17.03/#mssql-database-upgrade","title":"MsSQL database upgrade","text":"<p>We do not provide tested upgrade procedure on MsSQL Server. The upgrade may not be mandatory (this was not tested) but highly recommended. You have to create a new database with schema file provided in ejabberd 17.03 sources. Then you have to export all data from your current database and import into the newly created database.</p>"},{"location":"archive/older-releases/from_17.03_to_17.06/","title":"Upgrade to ejabberd 17.06","text":"<p>You may have to apply few changes if you are upgrading from ejabberd 17.03 or 17.04. While this is not mandatory, it's recommended to follow this procedure.</p>"},{"location":"archive/older-releases/from_17.03_to_17.06/#ejabberdctl-script","title":"ejabberdctl script","text":"<p>Due to a major refactor of the ejabberdctl script, which also remove all bashisms, you should check your packaging and your system's version of ejabberdctl script. While old script still works, you are encouraged to use the new one. This may depends on media you install ejabberd from.</p>"},{"location":"archive/older-releases/from_17.03_to_17.06/#database","title":"Database","text":"<p>There are no changes on database schema since 17.03 which requires migration procedure. However, we removed the <code>vcard_xupdate</code> table. If you want to cleanup your database, you can remove that table, as it is no longer used by the module.</p>"},{"location":"archive/older-releases/from_17.06_to_17.09/","title":"Upgrade to ejabberd 17.09","text":"<p>You should follow this procedure if you are upgrading from ejabberd 17.06, 17.07 or 17.08.</p>"},{"location":"archive/older-releases/from_17.06_to_17.09/#ejabberdctl-script","title":"ejabberdctl script","text":"<p>Due to a major refactor of the ejabberdctl script, you should check your packaging and your system's version of ejabberdctl script. While old script still works, you are encouraged to use the new one. This may depends on media you install ejabberd from.</p>"},{"location":"archive/older-releases/from_17.09_to_17.11/","title":"Upgrade to ejabberd 17.11","text":"<p>You should follow this procedure if you are upgrading from ejabberd 17.09 and running an SQL backend for archives (mod_mam) and/or PubSub (mod_pubsub) and/or MucSub (mod_muc) and/or push (mod_push).</p>"},{"location":"archive/older-releases/from_17.09_to_17.11/#system","title":"System","text":"<p>For best experience with new ACME features, it's recommended to install inotify-tools package on Linux. This allows automatic certificates reload. Other systems should be fine without adding extra dependency.</p>"},{"location":"archive/older-releases/from_17.09_to_17.11/#database","title":"Database","text":"<p>There is a minor change on indexes of archive table on SQL backend. This change gives speed improvements on archive requests. You have to open a client connected to your ejabberd database, and run the following commands. Note: if your archive table is big, this action may take a while to complete.</p> <p>There is a column rename in pubsub_node table, to avoid using reserved words and need extra quoting which may not be supported on all backends. You MUST apply this upgrade procedure if you're using PubSub with an SQL backend.</p> <p>There are two new tables, one which allows optimization on mucsub subscriptions, and another one needed by mod_push.</p>"},{"location":"archive/older-releases/from_17.09_to_17.11/#mysql","title":"MySQL","text":"<pre><code>DROP INDEX i_username ON archive;\nCREATE INDEX i_username_timestamp USING BTREE ON archive(username,timestamp);\n\nALTER TABLE pubsub_node CHANGE type plugin text NOT NULL;\n\nCREATE TABLE muc_room_subscribers (\n   room varchar(191) NOT NULL,\n   host varchar(191) NOT NULL,\n   jid varchar(191) NOT NULL,\n   nick text NOT NULL,\n   nodes text NOT NULL,\n   created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  UNIQUE KEY i_muc_room_subscribers_host_room_jid (host, room, jid)\n) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nCREATE INDEX i_muc_room_subscribers_host_jid USING BTREE ON muc_room_subscribers(host, jid);\n\nCREATE TABLE push_session (\n    username text NOT NULL,\n    timestamp bigint NOT NULL,\n    service text NOT NULL,\n    node text NOT NULL,\n    xml text NOT NULL\n);\n\nCREATE UNIQUE INDEX i_push_usn ON push_session (username(191), service(191), node(191));\nCREATE UNIQUE INDEX i_push_ut ON push_session (username(191), timestamp);\n</code></pre>"},{"location":"archive/older-releases/from_17.09_to_17.11/#postgresql","title":"PostgreSQL","text":"<pre><code>DROP INDEX i_username;\nCREATE INDEX i_username_timestamp ON archive USING btree (username, timestamp);\n\nALTER TABLE pubsub_node RENAME COLUMN type TO plugin;\n\nCREATE TABLE muc_room_subscribers (\n   room text NOT NULL,\n   host text NOT NULL,\n   jid text NOT NULL,\n   nick text NOT NULL,\n   nodes text NOT NULL,\n   created_at TIMESTAMP NOT NULL DEFAULT now()\n);\n\nCREATE INDEX i_muc_room_subscribers_host_jid ON muc_room_subscribers USING btree (host, jid);\nCREATE UNIQUE INDEX i_muc_room_subscribers_host_room_jid ON muc_room_subscribers USING btree (host, room, jid);\n\nCREATE TABLE push_session (\n    username text NOT NULL,\n    timestamp bigint NOT NULL,\n    service text NOT NULL,\n    node text NOT NULL,\n    xml text NOT NULL\n);\n\nCREATE UNIQUE INDEX i_push_usn ON push_session USING btree (username, service, node);\nCREATE UNIQUE INDEX i_push_ut ON push_session USING btree (username, timestamp);\n</code></pre>"},{"location":"archive/older-releases/from_17.09_to_17.11/#sqlite","title":"SQLite","text":"<pre><code>DROP INDEX i_username ON archive;\nCREATE INDEX i_username_timestamp ON archive(username, timestamp);\n\nALTER TABLE pubsub_node ADD plugin text NOT NULL;\nUPDATE pubsub_node SET plugin = type;\nALTER TABLE pubsub_node DROP COLUMN type;\n\nCREATE TABLE muc_room_subscribers (\n   room text NOT NULL,\n   host text NOT NULL,\n   jid text NOT NULL,\n   nick text NOT NULL,\n   nodes text NOT NULL,\n   created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE INDEX i_muc_room_subscribers_host_jid ON muc_room_subscribers(host, jid);\nCREATE UNIQUE INDEX i_muc_room_subscribers_host_room_jid ON muc_room_subscribers(host, room, jid);\n\nCREATE TABLE push_session (\n    username text NOT NULL,\n    timestamp bigint NOT NULL,\n    service text NOT NULL,\n    node text NOT NULL,\n    xml text NOT NULL\n);\n\nCREATE UNIQUE INDEX i_push_usn ON push_session (username, service, node);\nCREATE UNIQUE INDEX i_push_ut ON push_session (username, timestamp);\n</code></pre>"},{"location":"archive/older-releases/from_17.09_to_17.11/#mssql","title":"MsSQL","text":"<pre><code>DROP INDEX [archive_username] ON [archive];\nCREATE INDEX [archive_username_timestamp] ON [archive] (username, timestamp)\n WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n\nEXEC sp_rename '[dbo].[pubsub_node].[type]', 'plugin';\n\nCREATE TABLE [dbo].[muc_room_subscribers] (\n        [room] [varchar] (191) NOT NULL,\n        [host] [varchar] (191) NOT NULL,\n        [jid] [varchar] (191) NOT NULL,\n        [nick] [text] NOT NULL,\n        [nodes] [text] NOT NULL,\n        [created_at] [datetime] NOT NULL DEFAULT GETDATE()\n);\n\nCREATE UNIQUE CLUSTERED INDEX [muc_room_subscribers_host_room_jid] ON [muc_room_subscribers] (host, room, jid);\nCREATE INDEX [muc_room_subscribers_host_jid] ON [muc_room_subscribers] (host, jid);\n\nCREATE TABLE [dbo].[push_session] (\n    [username] [varchar] (255) NOT NULL,\n    [timestamp] [bigint] NOT NULL,\n    [service] [varchar] (255) NOT NULL,\n    [node] [varchar] (255) NOT NULL,\n    [xml] [varchar] (255) NOT NULL\n);\n\nCREATE UNIQUE CLUSTERED INDEX [i_push_usn] ON [push_session] (username, service, node)\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n\nCREATE UNIQUE CLUSTERED INDEX [i_push_ut] ON [push_session] (username, timestamp)\nWITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n</code></pre>"},{"location":"archive/older-releases/from_17.11_to_18.01/","title":"Upgrade to ejabberd 18.01","text":"<p>There is no significant change in code and database since 17.11. There is no specific upgrade procedure. Anyway, due to TLS improvements and ACME support, you need to check your configuration to keep it up-to-date with latest patterns.</p>"},{"location":"archive/older-releases/from_17.11_to_18.01/#ejabberd-configuration","title":"ejabberd configuration","text":"<p>While your old ejabberd.yml is still supported, you may prefer to simplify it thanks to latest TLS driver which enables good defaults by itself. You may also need to use the new ACME feature, which requires minor changes in ejabberd configuration file. See ejabberd.yml.example in ejabberd sources for reference.</p>"},{"location":"archive/older-releases/from_18.01_to_18.03/","title":"Upgrade to ejabberd 18.03","text":"<p>You should follow this procedure if you are upgrading from ejabberd 18.01 and running an SQL backend for archives (mod_mam). You should also have a look at all new configuration options.</p>"},{"location":"archive/older-releases/from_18.01_to_18.03/#database","title":"Database","text":"<p>There is a change on indexes of archive table on SQL backend. Peer is now indexed and old indexes must be updated to reflect this change. You must open an sql client connected to your ejabberd database, and run the following commands. Note: if your archive table is big, this action may take a while to complete.</p>"},{"location":"archive/older-releases/from_18.01_to_18.03/#mysql","title":"MySQL","text":"<pre><code>DROP INDEX i_username_timestamp ON archive;\nDROP INDEX i_peer ON archive;\nDROP INDEX i_bare_peer ON archive;\nCREATE INDEX i_username_timestamp USING BTREE ON archive(username(191), timestamp);\nCREATE INDEX i_username_peer USING BTREE ON archive(username(191), peer(191));\nCREATE INDEX i_username_bare_peer USING BTREE ON archive(username(191), bare_peer(191));\n</code></pre>"},{"location":"archive/older-releases/from_18.01_to_18.03/#postgresql","title":"PostgreSQL","text":"<pre><code>DROP INDEX i_peer ON archive;\nDROP INDEX i_bare_peer ON archive;\nCREATE INDEX i_username_peer ON archive USING btree (username, peer);\nCREATE INDEX i_username_bare_peer ON archive USING btree (username, bare_peer);\n</code></pre>"},{"location":"archive/older-releases/from_18.01_to_18.03/#sqlite","title":"Sqlite","text":"<pre><code>DROP INDEX i_peer ON archive;\nDROP INDEX i_bare_peer ON archive;\nCREATE INDEX i_archive_username_peer ON archive (username, peer);\nCREATE INDEX i_archive_username_bare_peer ON archive (username, bare_peer);\n</code></pre>"},{"location":"archive/older-releases/from_18.01_to_18.03/#mssql","title":"MsSql","text":"<pre><code>DROP INDEX [archive_username_timestamp] ON [archive];\nDROP INDEX [archive_peer] ON [archive];\nDROP INDEX [archive_bare_peer] ON [archive];\nCREATE INDEX [archive_username_peer] ON [archive] (username, peer)\n WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\nCREATE INDEX [archive_username_bare_peer] ON [archive] (username, bare_peer)\n WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\nCREATE INDEX [archive_timestamp] ON [archive] (timestamp)\n WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON);\n</code></pre>"},{"location":"archive/older-releases/from_18.01_to_18.03/#ejabberd-configuration","title":"ejabberd configuration","text":"<p>There are many new configuration option. We highly recommend to read details on release blogpost for good understanding of changes that may impact your configuration.</p>"},{"location":"archive/older-releases/from_18.03_to_18.04/","title":"Upgrade to ejabberd 18.04","text":"<p>You may follow this procedure if you are upgrading from ejabberd 18.03 or older, and running an SQL backend for PubSub.</p>"},{"location":"archive/older-releases/from_18.03_to_18.04/#database","title":"Database","text":"<p>There is a change on pubsub_item table on SQL backend. The type of creation and modification changed from 'text' to 'varchar(32)'. This change will speedup requests reading and sorting items. Note: if you're happy with performances, you don't need to apply this change.</p>"},{"location":"archive/older-releases/from_18.03_to_18.04/#mysql","title":"MySQL","text":"<pre><code>ALTER TABLE pubsub_item\n MODIFY creation varchar(32) NOT NULL,\n MODIFY modification varchar(32) NOT NULL;\n</code></pre>"},{"location":"archive/older-releases/from_18.03_to_18.04/#postgresql","title":"PostgreSQL","text":"<pre><code>ALTER TABLE pubsub_item\n ALTER COLUMN creation TYPE varchar(32),\n ALTER COLUMN creation SET NOT NULL,\n ALTER COLUMN modification TYPE varchar(32),\n ALTER COLUMN modification SET NOT NULL;\n</code></pre>"},{"location":"archive/older-releases/from_18.03_to_18.04/#sqlite","title":"Sqlite","text":"<pre><code>ALTER TABLE pubsub_item\n MODIFY creation varchar(32) NOT NULL,\n MODIFY modification varchar(32) NOT NULL;\n</code></pre>"},{"location":"archive/older-releases/from_18.03_to_18.04/#mssql","title":"MsSql","text":"<p>Note: We do not provide tested upgrade procedure on MsSQL Server. Following query should to the conversion. If you have problems with it please create an issue on ejabberd's github page. <pre><code>ALTER TABLE [pubsub_item]\n ALTER COLUMN creation varchar(32) NOT NULL,\n ALTER COLUMN modification varchar(32) NOT NULL;\n</code></pre></p>"},{"location":"archive/older-releases/from_18.04_to_18.06/","title":"Upgrade to ejabberd 18.06","text":"<p>There are few option changes in this version. Please check the blogpost: https://www.process-one.net/blog/ejabberd-18-06/</p> <p>Note: Starting with ejabberd 18.06, ejabberd will not ignore unknown options and doesn't allow to have options with malformed values. The rationale for this is to avoid unexpected behaviour during runtime, i.e. to conform to \u201cfail early\u201d approach. FOR PACKAGE BUILDERS: You must ensure your configuration is valid.</p> <p>You may cleanup SQL database if you are upgrading from ejabberd 18.04 or older, and running an SQL backend for mod_irc.</p>"},{"location":"archive/older-releases/from_18.04_to_18.06/#database","title":"Database","text":"<p>mod_irc had been obsoleted, the module is still available in ejabberd-contrib and can be installed as external module anyway. If you're not using that module or stop using it, you can safely remove the irc_custom SQL table.</p>"},{"location":"archive/older-releases/from_18.06_to_18.09/","title":"Upgrade to ejabberd 18.09","text":"<p>You need to update your database schema if you're using MySQL. Else there is no special upgrade process for this version.</p>"},{"location":"archive/older-releases/from_18.06_to_18.09/#database","title":"Database","text":""},{"location":"archive/older-releases/from_18.06_to_18.09/#mysql","title":"MySQL","text":"<p>When using stanza larger than 64 KiB, payload were silently trunced by MySQL. This raised errors when ejabberd was trying to read the content of the database.</p> <p>You need to alter your MySQL schema if you're using big stanzas and archive on offline table. Else you can simply dismiss this change. Note: this operation can take a long time with large archives.</p> <pre><code>mysql -h host -u user database -p &lt;&lt; EOF\nALTER TABLE spool MODIFY xml mediumtext NOT NULL;\nALTER TABLE archive MODIFY xml mediumtext NOT NULL;\nALTER TABLE archive MODIFY txt mediumtext;\nALTER TABLE pubsub_item MODIFY payload mediumtext NOT NULL;\nEOF\n</code></pre>"},{"location":"archive/older-releases/from_18.09_to_18.12/","title":"Upgrade to ejabberd 18.12","text":"<p>You may need to update your database schema if you're using MySQL. A minor change on pubsub_item table was added right after 18.09 release and your schema may not have been updated already.</p> <p>If your users are using bookmarks, you also must migrate them to PEP before starting the service.</p> <p>If you're using ProcessOne installers, you must be aware API and all web ports can use TLS, and served on port 5443 instead of 5280 in this case. Using TLS requires you to generate a valid certificate. If you're a packager, we recommend to apply this change when possible.</p>"},{"location":"archive/older-releases/from_18.09_to_18.12/#bookmarks-and-xep-0411","title":"Bookmarks and XEP-0411","text":"<p>As ejabberd now supports XEP-0411, you must perform some actions before starting the service. If your users are NOT USING bookmarks, you can dismiss this. <pre><code>$ for host in $(ejabberdctl registered-vhosts); do\n      ejabberdctl registered-users \"$host\" | while read user; do\n          ejabberdctl bookmarks-to-pep \"$user\" \"$host\"\n      done\n  done\n</code></pre> This might take a while if the number of users is large. Also note that this will overwrite any preexisting PEP bookmarks. However, if this is not performed, users might end up with empty bookmark lists after upgrading to the new ejabberd version, as clients might rely on PEP bookmarks once they detect that ejabberd's XEP-0411 support.  </p>"},{"location":"archive/older-releases/from_18.09_to_18.12/#database","title":"Database","text":""},{"location":"archive/older-releases/from_18.09_to_18.12/#mysql","title":"MySQL","text":"<p>When using stanza larger than 64 KiB, payload were silently trunced by MySQL. This raised errors when ejabberd was trying to read the content of the database.</p> <p>You not done yet, you need to alter your MySQL schema if you're using big stanzas on for pubsub items. Else you can simply dismiss this change.</p> <pre><code>mysql -h host -u user database -p &lt;&lt; EOF\nALTER TABLE pubsub_item MODIFY payload mediumtext NOT NULL;\nEOF\n</code></pre>"},{"location":"archive/older-releases/from_18.12_to_19.02/","title":"Upgrade to ejabberd 19.02","text":"<p>19.02 adds support of latest MIX specification and MQTT protocol. You may improve your current configuration or SQL schema depending on your needs.</p>"},{"location":"archive/older-releases/from_18.12_to_19.02/#configuration","title":"Configuration","text":"<p>To enable MQTT, you need to add a new listener and enable mod_mqtt. Here is example of configuration:</p> <pre><code>listen:\n  -\n    port: 1883\n    ip: \"::\"\n    module: mod_mqtt\n    backlog: 1000\n\nmodules:\n  mod_mqtt: {}\n</code></pre>"},{"location":"archive/older-releases/from_18.12_to_19.02/#database","title":"Database","text":"<p>If you want to use latest MIX (XEP-0369) with an SQL backend then you have to create new tables.</p> <p>If you have issues using PEP and MySQL, you should update your schema.</p>"},{"location":"archive/older-releases/from_18.12_to_19.02/#mysql","title":"MySQL","text":"<p>When using PEP with MySQL, due to limitation in size of indexes, some long JIDs could have broken support. Index size on pubsub_node was modified to fix use of PEP. This change is optional and required only if you have issues when using PEP.</p> <pre><code>mysql -h host -u user database -p &lt;&lt; EOF\nDROP INDEX i_pubsub_node_tuple ON pubsub_node;\nCREATE UNIQUE INDEX i_pubsub_node_tuple ON pubsub_node(host(71), node(120));\nEOF\n</code></pre> <p>If you want to use new MIX implementation, you must create some tables.</p> <pre><code>CREATE TABLE mix_channel (\n    channel text NOT NULL,\n    service text NOT NULL,\n    username text NOT NULL,\n    domain text NOT NULL,\n    jid text NOT NULL,\n    hidden boolean NOT NULL,\n    hmac_key text NOT NULL,\n    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nCREATE UNIQUE INDEX i_mix_channel ON mix_channel (channel(191), service(191));\nCREATE INDEX i_mix_channel_serv ON mix_channel (service(191));\n\nCREATE TABLE mix_participant (\n    channel text NOT NULL,\n    service text NOT NULL,\n    username text NOT NULL,\n    domain text NOT NULL,\n    jid text NOT NULL,\n    id text NOT NULL,\n    nick text NOT NULL,\n    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nCREATE UNIQUE INDEX i_mix_participant ON mix_participant (channel(191), service(191), username(191), domain(191));\nCREATE INDEX i_mix_participant_chan_serv ON mix_participant (channel(191), service(191));\n\nCREATE TABLE mix_subscription (\n    channel text NOT NULL,\n    service text NOT NULL,\n    username text NOT NULL,\n    domain text NOT NULL,\n    node text NOT NULL,\n    jid text NOT NULL\n) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nCREATE UNIQUE INDEX i_mix_subscription ON mix_subscription (channel(153), service(153), username(153), domain(153), node(153));\nCREATE INDEX i_mix_subscription_chan_serv_ud ON mix_subscription (channel(191), service(191), username(191), domain(191));\nCREATE INDEX i_mix_subscription_chan_serv_node ON mix_subscription (channel(191), service(191), node(191));\nCREATE INDEX i_mix_subscription_chan_serv ON mix_subscription (channel(191), service(191));\n\nCREATE TABLE mix_pam (\n    username text NOT NULL,\n    channel text NOT NULL,\n    service text NOT NULL,\n    id text NOT NULL,\n    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nCREATE UNIQUE INDEX i_mix_pam ON mix_pam (username(191), channel(191), service(191));\nCREATE INDEX i_mix_pam_u ON mix_pam (username(191));\n</code></pre> <p>If you want to use new MQTT feature, you need to create a table.</p> <p>If you're using the new schema (<code>new_sql_schema</code>):</p> <pre><code>CREATE TABLE mqtt_pub (\n    username varchar(191) NOT NULL,\n    server_host varchar(191) NOT NULL,\n    resource varchar(191) NOT NULL,\n    topic text NOT NULL,\n    qos tinyint NOT NULL,\n    payload blob NOT NULL,\n    payload_format tinyint NOT NULL,\n    content_type text NOT NULL,\n    response_topic text NOT NULL,\n    correlation_data blob NOT NULL,\n    user_properties blob NOT NULL,\n    expiry int unsigned NOT NULL,\n    UNIQUE KEY i_mqtt_topic_server (topic(191))\n);\n</code></pre> <p>If you're using the old schema:</p> <pre><code>CREATE TABLE mqtt_pub (\n    username varchar(191) NOT NULL,\n    resource varchar(191) NOT NULL,\n    topic text NOT NULL,\n    qos tinyint NOT NULL,\n    payload blob NOT NULL,\n    payload_format tinyint NOT NULL,\n    content_type text NOT NULL,\n    response_topic text NOT NULL,\n    correlation_data blob NOT NULL,\n    user_properties blob NOT NULL,\n    expiry int unsigned NOT NULL,\n    UNIQUE KEY i_mqtt_topic (topic(191))\n);\n</code></pre>"},{"location":"archive/older-releases/from_18.12_to_19.02/#postgresql","title":"PostgreSQL","text":"<p>If you want to use new MIX implementation, you must create some tables.</p> <pre><code>CREATE TABLE mix_channel (\n    channel text NOT NULL,\n    service text NOT NULL,\n    username text NOT NULL,\n    domain text NOT NULL,\n    jid text NOT NULL,\n    hidden boolean NOT NULL,\n    hmac_key text NOT NULL,\n    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE UNIQUE INDEX i_mix_channel ON mix_channel (channel, service);\nCREATE INDEX i_mix_channel_serv ON mix_channel (service);\n\nCREATE TABLE mix_participant (\n    channel text NOT NULL,\n    service text NOT NULL,\n    username text NOT NULL,\n    domain text NOT NULL,\n    jid text NOT NULL,\n    id text NOT NULL,\n    nick text NOT NULL,\n    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE UNIQUE INDEX i_mix_participant ON mix_participant (channel, service, username, domain);\nCREATE INDEX i_mix_participant_chan_serv ON mix_participant (channel, service);\n\nCREATE TABLE mix_subscription (\n    channel text NOT NULL,\n    service text NOT NULL,\n    username text NOT NULL,\n    domain text NOT NULL,\n    node text NOT NULL,\n    jid text NOT NULL\n);\n\nCREATE UNIQUE INDEX i_mix_subscription ON mix_subscription (channel, service, username, domain, node);\nCREATE INDEX i_mix_subscription_chan_serv_ud ON mix_subscription (channel, service, username, domain);\nCREATE INDEX i_mix_subscription_chan_serv_node ON mix_subscription (channel, service, node);\nCREATE INDEX i_mix_subscription_chan_serv ON mix_subscription (channel, service);\n\nCREATE TABLE mix_pam (\n    username text NOT NULL,\n    channel text NOT NULL,\n    service text NOT NULL,\n    id text NOT NULL,\n    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE UNIQUE INDEX i_mix_pam ON mix_pam (username, channel, service);\nCREATE INDEX i_mix_pam_us ON mix_pam (username);\n</code></pre> <p>If you want to use new MQTT feature, you need to create a table.</p> <p>If you're using the new schema (<code>new_sql_schema</code>):</p> <pre><code>CREATE TABLE mqtt_pub (\n    username text NOT NULL,\n    server_host text NOT NULL,\n    resource text NOT NULL,\n    topic text NOT NULL,\n    qos smallint NOT NULL,\n    payload bytea NOT NULL,\n    payload_format smallint NOT NULL,\n    content_type text NOT NULL,\n    response_topic text NOT NULL,\n    correlation_data bytea NOT NULL,\n    user_properties bytea NOT NULL,\n    expiry bigint NOT NULL\n);\n\nCREATE UNIQUE INDEX i_mqtt_topic_server ON mqtt_pub (topic, server_host);\n</code></pre> <p>If you're using the old schema:</p> <pre><code>CREATE TABLE mqtt_pub (\n    username text NOT NULL,\n    resource text NOT NULL,\n    topic text NOT NULL,\n    qos smallint NOT NULL,\n    payload bytea NOT NULL,\n    payload_format smallint NOT NULL,\n    content_type text NOT NULL,\n    response_topic text NOT NULL,\n    correlation_data bytea NOT NULL,\n    user_properties bytea NOT NULL,\n    expiry bigint NOT NULL\n);\n\nCREATE UNIQUE INDEX i_mqtt_topic ON mqtt_pub (topic, server_host);\n</code></pre>"},{"location":"archive/older-releases/from_18.12_to_19.02/#sqlite","title":"SQLite","text":"<p>If you want to use new MIX implementation, you must create some tables.</p> <pre><code>CREATE TABLE mix_channel (\n    channel text NOT NULL,\n    service text NOT NULL,\n    username text NOT NULL,\n    domain text NOT NULL,\n    jid text NOT NULL,\n    hidden boolean NOT NULL,\n    hmac_key text NOT NULL,\n    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE UNIQUE INDEX i_mix_channel ON mix_channel (channel, service);\nCREATE INDEX i_mix_channel_serv ON mix_channel (service);\n\nCREATE TABLE mix_participant (\n    channel text NOT NULL,\n    service text NOT NULL,\n    username text NOT NULL,\n    domain text NOT NULL,\n    jid text NOT NULL,\n    id text NOT NULL,\n    nick text NOT NULL,\n    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE UNIQUE INDEX i_mix_participant ON mix_participant (channel, service, username, domain);\nCREATE INDEX i_mix_participant_chan_serv ON mix_participant (channel, service);\n\nCREATE TABLE mix_subscription (\n    channel text NOT NULL,\n    service text NOT NULL,\n    username text NOT NULL,\n    domain text NOT NULL,\n    node text NOT NULL,\n    jid text NOT NULL\n);\n\nCREATE UNIQUE INDEX i_mix_subscription ON mix_subscription (channel, service, username, domain, node);\nCREATE INDEX i_mix_subscription_chan_serv_ud ON mix_subscription (channel, service, username, domain);\nCREATE INDEX i_mix_subscription_chan_serv_node ON mix_subscription (channel, service, node);\nCREATE INDEX i_mix_subscription_chan_serv ON mix_subscription (channel, service);\n\nCREATE TABLE mix_pam (\n    username text NOT NULL,\n    channel text NOT NULL,\n    service text NOT NULL,\n    id text NOT NULL,\n    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE UNIQUE INDEX i_mix_pam ON mix_pam (username, channel, service);\nCREATE INDEX i_mix_pam_us ON mix_pam (username);\n</code></pre> <p>If you want to use new MQTT feature, you need to create a table.</p> <p>If you're using the new schema (<code>new_sql_schema</code>):</p> <pre><code>CREATE TABLE mqtt_pub (\n    username text NOT NULL,\n    server_host text NOT NULL,\n    resource text NOT NULL,\n    topic text NOT NULL,\n    qos smallint NOT NULL,\n    payload blob NOT NULL,\n    payload_format smallint NOT NULL,\n    content_type text NOT NULL,\n    response_topic text NOT NULL,\n    correlation_data blob NOT NULL,\n    user_properties blob NOT NULL,\n    expiry bigint NOT NULL\n);\n\nCREATE UNIQUE INDEX i_mqtt_topic_server ON mqtt_pub (topic);\n</code></pre> <p>If you're using the old schema:</p> <pre><code>CREATE TABLE mqtt_pub (\n    username text NOT NULL,\n    resource text NOT NULL,\n    topic text NOT NULL,\n    qos smallint NOT NULL,\n    payload blob NOT NULL,\n    payload_format smallint NOT NULL,\n    content_type text NOT NULL,\n    response_topic text NOT NULL,\n    correlation_data blob NOT NULL,\n    user_properties blob NOT NULL,\n    expiry bigint NOT NULL\n);\n\nCREATE UNIQUE INDEX i_mqtt_topic ON mqtt_pub (topic);\n</code></pre>"},{"location":"archive/older-releases/from_19.02_to_19.05/","title":"Upgrade to ejabberd 19.05","text":"<p>19.05 don't add changes on data or configuration. You may alter your configuration if you want to use new feature to store offline messages in archives anyway. See more details on blogpost.</p>"},{"location":"archive/older-releases/from_19.02_to_19.05/#database","title":"Database","text":"<p>Schema for MQTT tables was added after 19.02 release despite full support was already available. If you're using MQTT and need SQL backend, in case you dismissed the change, please report to ejabberd 19.02 upgrade note</p>"},{"location":"archive/older-releases/from_19.05_to_19.08/","title":"Upgrade to ejabberd 19.08","text":""},{"location":"archive/older-releases/from_19.05_to_19.08/#database","title":"Database","text":"<p>Riak support has been removed in this version, so don't upgrade to 19.08 if you store data in Riak.</p> <p>The only SQL schema that changed since 19.05 is mysql.new.sql.</p>"},{"location":"archive/older-releases/from_19.05_to_19.08/#mysql","title":"MySQL","text":"<p>mysql.new.sql from 19.05 schema can work 19.08, so the migration to 19.08 schema is optional, as it's just a type change from TEXT to VARCHAR for performances reason, but it will improve index utilization.</p> <pre><code>ALTER TABLE users MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE last MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE rosterusers MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE rostergroups MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE sr_group MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE sr_user MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE spool MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE archive MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE archive_prefs MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE vcard MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE vcard_search MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE privacy_default_list MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE privacy_list MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE private_storage MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE roster_version MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE muc_room MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE muc_registered MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE muc_online_room MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE muc_online_users MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE motd MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE sm MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE route MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE push_session MODIFY server_host varchar(191) NOT NULL;\nALTER TABLE mix_pam MODIFY server_host varchar(191) NOT NULL;\n</code></pre>"},{"location":"archive/older-releases/from_19.05_to_19.08/#api-changes","title":"API changes","text":""},{"location":"archive/older-releases/from_19.05_to_19.08/#renamed-arguments-from-server-to-host","title":"Renamed arguments from <code>Server</code> to <code>Host</code>","text":"<p>Several ejabberd commands still used as argument name <code>Server</code>, instead of the more common <code>Host</code>. Such arguments have been renamed, and backward support allows old calls to work correctly.</p> <p>The eight commands affected are: \u2013 add_rosteritem \u2013 bookmarks_to_pep \u2013 delete_rosteritem \u2013 get_offline_count \u2013 get_presence \u2013 get_roster \u2013 remove_mam_for_user \u2013 remove_mam_for_user_with_peer</p> <p>If you are using this calls, please start updating your parameter names to Host when moving to ejabberd 19.08. You will thus use a more consistent API and be future proof.</p>"},{"location":"archive/older-releases/from_2.1.1x_to_16.02/","title":"Upgrade from 2.1.1x to 16.02","text":""},{"location":"archive/older-releases/from_2.1.1x_to_16.02/#compilation","title":"Compilation","text":"<p>Compilation requires Erlang/OTP R17 or higher. Requires OpenSSL 1.0.0 or higher. exmpp is not required anymore. The mysql and pgsql erlang libraries are now included in ejabberd source code.</p> <p>The source code structure has improved: - The compilation scripts are moved from src/ to /, including configure and Makefile. - Source code of complex modules is moved from <code>src/*/*.erl</code> to <code>src/*.erl</code> - The SQL example files are moved from <code>src/odbc/*.sql</code> to <code>sql/*.sql</code></p> <p>The configuration file now uses YAML syntax, not the Erlang syntax. For that reason, the file is now named ejabberd.yml, not ejabberd.cfg You have three options: - You can use and adapt the new file ejabberd.yml.example - You can still use your old ejabberd.cfg - You can convert your old config file to YAML with the command: <code>ejabberdctl convert_to_yaml</code></p>"},{"location":"archive/older-releases/from_2.1.1x_to_16.02/#ejabberd-upgrade-process","title":"Ejabberd upgrade process","text":"<p>If you are using an sql backend for authentication, you need to upgrade your schema before starting ejabberd 16.02. This can be safely done while a previous version of ejabberd is actually running.</p>"},{"location":"archive/older-releases/from_2.1.1x_to_16.02/#mysql-database-upgrade","title":"MySQL database upgrade","text":"<pre><code>mysql -h host -u user database -p &lt;&lt; EOF\n\n-- Table for mod_caps: Entity Capabilities (XEP-0115)\nCREATE TABLE caps_features (\n    node varchar(250) NOT NULL,\n    subnode varchar(250) NOT NULL,\n    feature text,\n    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n) CHARACTER SET utf8;\nCREATE INDEX i_caps_features_node_subnode ON caps_features(node(75), subnode(75));\n\n-- Make it possible to use SQL as an SM backend:\nCREATE TABLE sm (\n    usec bigint NOT NULL,\n    pid text NOT NULL,\n    node text NOT NULL,\n    username varchar(250) NOT NULL,\n    resource varchar(250) NOT NULL,\n    priority text NOT NULL,\n    info text NOT NULL\n) ENGINE=InnoDB CHARACTER SET utf8;\nCREATE UNIQUE INDEX i_sid ON sm(usec, pid(75));\nCREATE INDEX i_node ON sm(node(75));\nCREATE INDEX i_username ON sm(username);\n\n-- Support delete_old_messages (offline) command:\nCREATE INDEX i_spool_created_at USING BTREE ON spool(created_at);\n\n-- Add a missed SQL index on privacy_list_data table\nCREATE INDEX i_privacy_list_data_id ON privacy_list_data(id);\n\n-- Add SCRAM support to ejabberd_auth_odbc\nALTER TABLE users ADD COLUMN serverkey text NOT NULL;\nALTER TABLE users ADD COLUMN salt text NOT NULL;\nALTER TABLE users ADD COLUMN iterationcount integer NOT NULL DEFAULT 0;\n\n-- mod_mam (XEP-0313) support\nCREATE TABLE archive (\n    username varchar(250) NOT NULL,\n    timestamp BIGINT UNSIGNED NOT NULL,\n    peer varchar(250) NOT NULL,\n    bare_peer varchar(250) NOT NULL,\n    xml text NOT NULL,\n    txt text,\n    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,\n    kind varchar(10),\n    nick varchar(250),\n    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB CHARACTER SET utf8;\nCREATE FULLTEXT INDEX i_text ON archive(txt);\nCREATE INDEX i_username USING BTREE ON archive(username);\nCREATE INDEX i_timestamp USING BTREE ON archive(timestamp);\nCREATE INDEX i_peer USING BTREE ON archive(peer);\nCREATE INDEX i_bare_peer USING BTREE ON archive(bare_peer);\nCREATE TABLE archive_prefs (\n    username varchar(250) NOT NULL PRIMARY KEY,\n    def text NOT NULL,\n    always text NOT NULL,\n    never text NOT NULL,\n    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB CHARACTER SET utf8;\n\n-- In Offline storage use BLOB instead of TEXT\nALTER TABLE spool MODIFY xml BLOB NOT NULL;\n\n-- Use UTF8MB4 character set in MySQL tables\n--\n-- TODO\n-- Commit: Use UTF8MB4 character set in MySQL tables\n--         7d1c75d0e817db0e04fe1133e06ba35cd367d76e\n--\nEOF\n</code></pre>"},{"location":"archive/older-releases/from_2.1.1x_to_16.02/#pgsql-database-upgrade","title":"PgSQL database upgrade","text":"<pre><code>psql -W -h host database user &lt;&lt; EOF\n\n-- Table for mod_caps: Entity Capabilities (XEP-0115)\nCREATE TABLE caps_features (\n    node text NOT NULL,\n    subnode text NOT NULL,\n    feature text,\n    created_at TIMESTAMP NOT NULL DEFAULT now()\n);\nCREATE INDEX i_caps_features_node_subnode ON caps_features USING btree (node, subnode);\n\n-- Make it possible to use SQL as an SM backend:\nCREATE TABLE sm (\n    usec bigint NOT NULL,\n    pid text NOT NULL,\n    node text NOT NULL,\n    username text NOT NULL,\n    resource text NOT NULL,\n    priority text NOT NULL,\n    info text NOT NULL\n);\nCREATE UNIQUE INDEX i_sm_sid ON sm USING btree (usec, pid);\nCREATE INDEX i_sm_node ON sm USING btree (node);\nCREATE INDEX i_sm_username ON sm USING btree (username);\n\n-- Add a missed SQL index on privacy_list_data table\nCREATE INDEX i_privacy_list_data_id ON privacy_list_data USING btree (id);\n\n-- Add SCRAM support to ejabberd_auth_odbc\nALTER TABLE users ADD COLUMN serverkey text NOT NULL DEFAULT '';\nALTER TABLE users ADD COLUMN salt text NOT NULL DEFAULT '';\nALTER TABLE users ADD COLUMN iterationcount integer NOT NULL DEFAULT 0;\n\n-- mod_mam (XEP-0313) support\nCREATE TABLE archive (\n    username text NOT NULL,\n    timestamp BIGINT NOT NULL,\n    peer text NOT NULL,\n    bare_peer text NOT NULL,\n    xml text NOT NULL,\n    txt text,\n    id SERIAL,\n    kind text,\n    nick text,\n    created_at TIMESTAMP NOT NULL DEFAULT now()\n);\nCREATE INDEX i_username ON archive USING btree (username);\nCREATE INDEX i_timestamp ON archive USING btree (timestamp);\nCREATE INDEX i_peer ON archive USING btree (peer);\nCREATE INDEX i_bare_peer ON archive USING btree (bare_peer);\nCREATE TABLE archive_prefs (\n    username text NOT NULL PRIMARY KEY,\n    def text NOT NULL,\n    always text NOT NULL,\n    never text NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT now()\n);\nEOF\n</code></pre>"},{"location":"archive/older-releases/from_2.1.1x_to_16.02/#pubsub-database-upgrade","title":"PubSub database upgrade","text":"<p>If you were using PubSub with sql backend and need to keep your pubsub data, you must alter the content of pubsub_node tables, changing type 'pep' instead of 'pep_odbc', 'flat' instead of 'flat_odbc', and 'hometree' instead of 'hometree_odbc'.</p> <pre><code>UPDATE pubsub_node SET type='pep' WHERE type='pep_odbc';\nUPDATE pubsub_node SET type='flat' WHERE type='flat_odbc';\nUPDATE pubsub_node SET type='hometree' WHERE type='hometree_odbc';\n</code></pre>"},{"location":"contributing/","title":"Contributing to ejabberd","text":"<p>We'd love for you to contribute to our source code and to make ejabberd even better than it is today! Here are the guidelines we'd like you to follow:</p> <ul> <li>Code of Conduct</li> <li>Questions and Problems</li> <li>Issues and Bugs</li> <li>Feature Requests</li> <li>Issue Submission Guidelines</li> <li>Pull Request Submission Guidelines</li> <li>Signing the CLA</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Help us keep ejabberd community open-minded and inclusive. Please read and follow our Code of Conduct.</p>"},{"location":"contributing/#questions-bugs-features","title":"Questions, Bugs, Features","text":""},{"location":"contributing/#got-a-question-or-problem","title":"Got a Question or Problem?","text":"<p>Do not open issues for general support questions as we want to keep GitHub issues for bug reports and feature requests. You've got much better chances of getting your question answered on dedicated support platforms, the best being Stack Overflow.</p> <p>Stack Overflow is a much better place to ask questions since:</p> <ul> <li>there are thousands of people willing to help on Stack Overflow</li> <li>questions and answers stay available for public viewing so your question / answer might help   someone else</li> <li>Stack Overflow's voting system assures that the best answers are prominently visible.</li> </ul> <p>To save your and our time, we will systematically close all issues that are requests for general support and redirect people to the section you are reading right now.</p> <p>Other channels for support are:</p> <ul> <li>ejabberd XMPP room: ejabberd@conference.process-one.net</li> <li>ejabberd Mailing List</li> </ul>"},{"location":"contributing/#found-an-issue-or-bug","title":"Found an Issue or Bug?","text":"<p>If you find a bug in the source code, you can help us by submitting an issue to our GitHub Repository. Even better, you can submit a Pull Request with a fix.</p>"},{"location":"contributing/#missing-a-feature","title":"Missing a Feature?","text":"<p>You can request a new feature by submitting an issue to our GitHub Repository.</p> <p>If you would like to implement a new feature then consider what kind of change it is:</p> <ul> <li>Major Changes that you wish to contribute to the project should be discussed first in an   GitHub issue that clearly outlines the changes and benefits of the feature.</li> <li>Small Changes can directly be crafted and submitted to the GitHub Repository   as a Pull Request. See the section about Pull Request Submission Guidelines.</li> </ul>"},{"location":"contributing/#issue-submission-guidelines","title":"Issue Submission Guidelines","text":"<p>Before you submit your issue search the archive, maybe your question was already answered.</p> <p>If your issue appears to be a bug, and hasn't been reported, open a new issue. Help us to maximize the effort we can spend fixing issues and adding new features, by not reporting duplicate issues.</p> <p>The \"new issue\" form contains a number of prompts that you should fill out to make it easier to understand and categorize the issue.</p>"},{"location":"contributing/#pull-request-submission-guidelines","title":"Pull Request Submission Guidelines","text":"<p>By submitting a pull request for a code or doc contribution, you need to have the right to grant your contribution's copyright license to ProcessOne. Please check ProcessOne CLA for details.</p> <p>Before you submit your pull request consider the following guidelines:</p> <ul> <li>Search GitHub for an open or closed Pull Request   that relates to your submission. You don't want to duplicate effort.</li> <li>Create the development environment</li> <li> <p>Make your changes in a new git branch:</p> <pre><code>git checkout -b my-fix-branch master\n</code></pre> </li> <li> <p>Test your changes and, if relevant, expand the automated test suite.</p> </li> <li>Create your patch commit, including appropriate test cases.</li> <li>If the changes affect public APIs, change or add relevant documentation.</li> <li> <p>Commit your changes using a descriptive commit message.</p> <pre><code>git commit -a\n</code></pre> </li> </ul> <p>Note: the optional commit <code>-a</code> command line option will automatically \"add\" and \"rm\" edited files.</p> <ul> <li> <p>Push your branch to GitHub:</p> <pre><code>git push origin my-fix-branch\n</code></pre> </li> <li> <p>In GitHub, send a pull request to <code>ejabberd:master</code>. This will trigger the automated testing. We will also notify you if you have not yet signed the contribution agreement.</p> </li> <li> <p>If you find that the tests have failed, look into the logs to find out if your changes caused test failures, the commit message was malformed etc. If you find that the tests failed or times out for unrelated reasons, you can ping a team member so that the build can be restarted.</p> </li> <li> <p>If we suggest changes, then:</p> </li> <li> <p>Make the required updates.</p> </li> <li>Test your changes and test cases.</li> <li>Commit your changes to your branch (e.g. <code>my-fix-branch</code>).</li> <li> <p>Push the changes to your GitHub repository (this will update your Pull Request).</p> <p>You can also amend the initial commits and force push them to the branch.</p> <pre><code>git rebase master -i\ngit push origin my-fix-branch -f\n</code></pre> <p>This is generally easier to follow, but separate commits are useful if the Pull Request contains iterations that might be interesting to see side-by-side.</p> </li> </ul> <p>That's it! Thank you for your contribution!</p>"},{"location":"contributing/#signing-the-contributor-license-agreement-cla","title":"Signing the Contributor License Agreement (CLA)","text":"<p>Upon submitting a Pull Request, we will ask you to sign our CLA if you haven't done so before. It's a quick process, we promise, and you will be able to do it all online</p> <p>Here's a link to the  ProcessOne Contribution License Agreement.</p> <p>This is part of the legal framework of the open-source ecosystem that adds some red tape, but protects both the contributor and the company / foundation behind the project. It also gives us the option to relicense the code with a more permissive license in the future.</p>"},{"location":"contributing/CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"contributing/CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"contributing/CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"contributing/CODE_OF_CONDUCT/#guidelines-for-respectful-and-efficient-communication-on-issues-discussions-and-prs","title":"Guidelines for Respectful and Efficient Communication on Issues, Discussions, and PRs","text":"<p>To ensure that our maintainers can efficiently manage issues and provide timely updates, we kindly ask that all comments on GitHub tickets remain relevant to the topic of the issue. Please avoid posting comments solely to ping maintainers or ask for updates. If you need information on the status of an issue, consider the following:</p> <ul> <li>Check the Issue Timeline: Review the existing comments and updates on the issue before posting.</li> <li>Use Reactions: If you want to show that you are interested in an issue, use GitHub's reaction feature (e.g., thumbs up) instead of commenting.</li> <li>Be Patient: Understand that maintainers may be working on multiple tasks and will provide updates as soon as possible.</li> </ul> <p>Additionally, please be aware that:</p> <ul> <li>User Responses: Users who report issues may no longer be using the software, may have switched to other projects, or may simply be busy. It is their right not to respond to follow-up questions or comments.</li> <li>Maintainer Priorities: Maintainers have the right to define their own priorities and schedule. They will address issues based on their availability and the project's needs.</li> </ul> <p>By following these guidelines, you help us maintain a productive and respectful environment for everyone involved.</p>"},{"location":"contributing/CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"contributing/CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"contributing/CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at the email address: conduct AT process-one.net. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"contributing/CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://contributor-covenant.org/version/1/4</p>"},{"location":"contributing/CONTRIBUTORS/","title":"Contributors","text":"<p>We would like to thanks official ejabberd source code contributors:</p> <ul> <li>Sergey Abramyan</li> <li>Badlop</li> <li>Ludovic Bocquet</li> <li>Emilio Bustos</li> <li>Thiago Camargo</li> <li>Juan Pablo Carlino</li> <li>Pawe\u0142 Chmielowski</li> <li>Gabriel Gatu</li> <li>Tsukasa Hamano</li> <li>Konstantinos Kallas</li> <li>Evgeny Khramtsov</li> <li>Ben Langfeld</li> <li>Peter Lemenkov</li> <li>Anna Mukharram</li> <li>Johan Oudinet</li> <li>Pablo Polvorin</li> <li>Micka\u00ebl R\u00e9mond</li> <li>Matthias Rieber</li> <li>Rafael Roemhild</li> <li>Christophe Romain</li> <li>J\u00e9r\u00f4me Sautret</li> <li>Sonny Scroggin</li> <li>Alexey Shchepin</li> <li>Shelley Shyan</li> <li>Radoslaw Szymczyszyn</li> <li>Stu Tomlinson</li> <li>Christian Ulrich</li> <li>Holger Wei\u00df</li> </ul> <p>Please, if you think we are missing your contribution, do not hesitate to contact us at ProcessOne. In case you do not want to appear in this list, please, let us know as well.</p> <p>Thanks !</p>"},{"location":"developer/","title":"ejabberd for Developers","text":"<p>As a developer, you can customize ejabberd to design almost every type of XMPP related type of solutions.</p> <p>As a starting point, we recommend that you get extremely familiar with both the core XMPP protocol itself and its extensions.</p> <p>From that, once you understand well XMPP, you can tame ejabberd to build your dream messaging system.</p>"},{"location":"developer/#getting-started","title":"Getting started","text":""},{"location":"developer/#source-code","title":"Source code","text":"<p>ejabberd source is available on Github: ejabberd</p> <p>You will need to get familiar with it to start learning about ejabberd module writing. The first place to start? You should read the time module. This is one of the simplest possible module for ejabberd.</p> <p>Another great source of inspiration and knowledge is to read the source code of the many contributed ejabberd modules. Many of them are available from ejabberd-contribs repository.</p> <p>For a complete overview of ejabberd source code and its dependencies, please refer to ejabberd and related repositories</p>"},{"location":"developer/#development-environment","title":"Development Environment","text":"<p>The first step to develop for ejabberd is to install and configure your development environment:</p> <ul> <li>Check the Source Code Installation section</li> <li>If using Emacs, install erlang-mode in your operating system</li> <li>If using OSX, check the OSX development environment section</li> <li>For Visual Studio Code and alternatives, check the Developing ejabberd with VSCode section</li> </ul>"},{"location":"developer/#customizing-ejabberd","title":"Customizing ejabberd","text":"<ul> <li>ejabberd development guide</li> <li>ejabberd modules development</li> </ul>"},{"location":"developer/guide/","title":"ejabberd Developer Guide","text":""},{"location":"developer/guide/#introduction","title":"Introduction","text":"<p>This guide is a brief explanation of ejabberd internals. It is not intended to be a comprehensive ejabberd's internal API documentation. You still need to read and understand ejabberd's source code.</p> <p>This guide should help you to understand ejabberd's code faster: it provides entry points from where to start reading relevant parts of the code and ignore irrelevant ones.</p> <p>Note that there is absolutely no need to know every line of code of ejabberd, but some parts are crucial to understand.</p> <p>In order to read and understand the guide you must be pretty fluent with Erlang programming language and understand basics of the XMPP protocol: there is no detailed explanation of Erlang syntax and/or features and it's assumed that you're familiar with such terms as <code>xml stream</code>, <code>stanza</code>, <code>c2s</code>, <code>s2s</code> and so on. If you see these words for the first time in your life you're unlikely to understand the guide.</p>"},{"location":"developer/guide/#coding-style-convention","title":"Coding style convention","text":"<p>NOTE: this section is only relevant for ejabberd contributors. If you're hacking ejabberd for internal needs, you are free to choose whatever coding style you like.</p> <p>ejabberd follows Erlang Coding Standards &amp; Guidelines or at least tries to do so: there is still a lot of poorly written legacy code (which is being leisurely rewritten), but the new code should be written with keeping these rules in mind. In some cases the rules can be bypassed, but the reason doing so should be really weighty. The rules shouldn't be ignored just because a contributor doesn't like them.</p> <p>The typical coding style rules found violated in contributors' code are:</p> <ul> <li>100 column per line: in fact we have defined 80 columns as a soft and 100 columns as a hard limit, which means most of your lines should be no longer than 80 characters and the rest must never be longer than 100 characters.</li> <li>no deep nesting</li> <li>no boolean parameters in case control</li> <li>only CamelCase variables name</li> <li>no macros</li> <li>no case-catch</li> </ul> <p>It's worth noting that the code itself should be indented using Emacs indentation style (that is the standard indentation style for Erlang programs). If you're not using Emacs for ejabberd development, indent the code using it first before making a PR/commit.</p>"},{"location":"developer/guide/#format","title":"Format","text":"<p> added in 24.06</p> <p>You can completely reformat your source code to the standard by surrounding the desired code with directives <code>@format-begin</code> and <code>@format-end</code>, for example: <pre><code>%% @format-begin\nfoo(xx   ,yy)  -&gt;\n        xxyy;\n\nfoo(A,B)-&gt;\nA\n           +B\n   .\n%% @format-end\n</code></pre></p> <p>then run <code>make format</code> and it will format and indent all the instructed lines and files. The resulting source code will be: <pre><code>%% @format-begin\nfoo(xx, yy) -&gt;\n    xxyy;\nfoo(A, B) -&gt;\n    A + B.\n%% @format-end\n</code></pre></p> <p>This can be applied to any desired part of your module, or all of it, see for example mod_adhoc_api.erl. In that file, the <code>@format-begin</code> directive is provided early in the file, and the <code>@format-end</code> directive is not even needed.</p> <p>You can integrate that step in your development cycle, for example configuring your git to automatically run that procedure before pushing your changes to the upstream repository. For that, add a file in your local ejabberd git repository named <code>.git/hooks/pre-push</code> with the following content:</p> <pre><code>#!/bin/sh\n\necho \"---&gt; Formatting source code...\"\n./tools/rebar3-format.sh ./rebar3\nif git diff --quiet --exit-code; then\n    exit 0\nelse\n    echo \"---&gt; After formatting ejabberd source code, some files have changed:\"\n    echo \"\"\n    git status --short\n    echo \"\"\n    echo \"---&gt; Please review those changes and include them in your commit before pushing upstream.\"\n    exit 1\nfi\n</code></pre> <p>Furthermore, you can add an alias in git: <pre><code>git config --global alias.format '!$(pwd)/.git/hooks/pre-push'\n</code></pre> and now you can run the hook easily anytime: <pre><code>git format\n</code></pre></p>"},{"location":"developer/guide/#indent-with-emacs","title":"Indent with Emacs","text":"<p>If you are only interested in lines indentation, not in full code formatting, install Emacs and surround the desired code or the whole file with lines: <pre><code>%% @indent-begin\nfoo(A,B) -&gt;\nA+B.\n%% @indent-end\n</code></pre> then run <code>make indent</code> and it will call Emacs to indent all the instructed files.</p>"},{"location":"developer/guide/#start-up-procedure","title":"Start-up procedure","text":"<p>ejabberd is written as a standard OTP application, so the startup module can be found in <code>src/ejabberd.app.src</code> or, if ejabberd is compiled, in <code>ebin/ejabberd.app</code> file: that is, <code>ejabberd_app.erl</code> module from where <code>start/2</code> function is called by Erlang application controller. This function makes some initialization (such as logger, mnesia, configuration file, etc.) and ends up by starting the main ejabberd supervisor - <code>ejabberd_sup</code>. Thus, for further startup order refer to <code>ejabberd_sup.erl</code> module (this is a simple list-like module with supervisor childspecs).</p> <p>WARNING: only \"core stuff\" should be attached to <code>ejabberd_sup</code>. For attaching modules use gen_mod's supervisor (via <code>gen_mod:start_child/3,4</code> functions), for attaching database backend modules use <code>ejabberd_backend_sup</code> supervisor, etc.</p> <p>Once <code>ejabberd_sup</code> is started, ejabberd application is considered to be started.</p>"},{"location":"developer/guide/#core","title":"Core","text":"<p>The ejabberd core is not well-defined. Moreover, the described core layers are pure abstraction grouping several modules together by some criteria for better understanding of ejabberd internal processing rules.</p>"},{"location":"developer/guide/#network-layer","title":"Network Layer","text":"<p>Once ejabberd is started, some external events should obviously make it doing something. Besides explicit administrative commands, the most relevant such events are incoming connections. Incoming connections are handled inside <code>Network Layer</code>. The layer implemented by <code>ejabberd_listener.erl</code>, <code>ejabberd_receiver.erl</code> and <code>ejabberd_socket.erl</code> modules.</p> <p>NOTE: <code>ejabberd_listner.erl</code> is able to handle raw TCP and UDP connections, however only XMPP connections are described here.</p> <p>Once a connection is accepted by <code>ejabberd_listener.erl</code>, an instance (a process) of <code>ejabberd_receiver.erl</code> is started and it becomes the socket owner, where it performs the following operations:</p> <ul> <li>Throttles a connection using shapers from <code>shaper.erl</code> module</li> <li>Performs TLS decoding using fast_tls library</li> <li>Performs stream decompression using ezlib library</li> <li>Parses incoming raw XML data into <code>#xmlel{}</code> packets using fast_xml library</li> </ul> <p><code>ejabberd_socket.erl</code> does the same but in a reverse order, i.e. it performs stream compression and/or TLS encoding, serializes <code>#xmlel{}</code> packets into raw XML data and puts them into a socket (note that shapers do not apply for outgoing data).</p> <p>Once <code>xmlel{}</code> packet is constructed by <code>ejabberd_receiver.erl</code> it's passed to <code>XMPP Stream Layer</code>.</p>"},{"location":"developer/guide/#xmpp-stream-layer","title":"XMPP Stream Layer","text":"<p><code>XMPP Stream Layer</code> is represented by <code>xmpp_stream_in.erl</code> and <code>xmpp_stream_out.erl</code> modules. An instance (i.e. a process) of <code>xmpp_stream_in.erl</code> is started along with an instance of <code>ejabberd_receiver.erl</code> and all incoming <code>#xmlel{}</code> packets are passed from the latter to the former. <code>xmpp_stream_in.erl</code> module does the following:</p> <ul> <li>Encodes/decodes <code>#xmlel{}</code> packets using xmpp library from/to internal structures (records) defined in xmpp_codec.hrl.</li> <li>Performs negotiation of inbound XMPP streams</li> <li>Performs STARTTLS negotiation (if needed)</li> <li>Performs compression negotiation (if needed)</li> <li>Performs SASL authentication</li> </ul> <p>NOTE: <code>XMPP Stream Layer</code> was only introduced in ejabberd 17.03. Prior to this XMPP stream negotiation was handled inside <code>ejabberd_c2s.erl</code>, <code>ejabberd_s2s_in.erl</code>, <code>ejabberd_service.erl</code> and <code>ejabberd_s2s_out.erl</code>. This has lead to unmaintainable monolithic spaghetti code with a lot of code duplication between these modules. It's believed introducing <code>xmpp_stream_in.erl</code> and <code>xmpp_stream_out.erl</code> modules now solves this problem.</p> <p>During these procedures <code>xmpp_stream_in.erl</code> calls functions from its callback modules, i.e. the modules of <code>xmpp_stream_in</code> behaviour: <code>ejabberd_c2s.erl</code>, <code>ejabberd_s2s_in.erl</code> or <code>ejabberd_service.erl</code>, depending on the stream namespace.</p> <p><code>xmpp_stream_out.erl</code> does the same but for outbound XMPP streams. The only its callback module is <code>ejabberd_s2s_out.erl</code>.</p> <p>NOTE: <code>xmpp_stream_in.erl</code> shares the same process and state with its callback modules, i.e. functions from <code>xmpp_stream_in.erl</code> and functions from <code>ejabberd_c2s/s2s_in/service.erl</code> modules are evaluated inside the same process. This is also true for <code>xmpp_stream_out.erl</code> and <code>ejabberd_s2s_out.erl</code>. The state is represented by a <code>map()</code> in both cases.</p>"},{"location":"developer/guide/#ejabberd_c2s-ejabberd_s2s_in-and-ejabberd_service","title":"ejabberd_c2s, ejabberd_s2s_in and ejabberd_service","text":"<p>These are modules of <code>xmpp_stream_in</code> behaviour. The only purpose of these modules is to provide callback functions for <code>xmpp_stream_in.erl</code> module. Examples of such callback functions are:</p> <ul> <li><code>tls_enabled/1</code>: tells whether or not TLS is enabled in the configuration</li> <li><code>check_password_fun/1</code>: provides a function for SASL authentication</li> <li><code>handle_authenticated_packet/2</code>: what to do with packets after authentication is completed</li> </ul> <p>Roughly, they represent an intermediate (or \"glue\") code between <code>XMPP Stream Layer</code> and <code>Routing Layer</code> for inbound XMPP streams.</p> <p><code>ejabberd_s2s_out.erl</code> is described elsewhere</p>"},{"location":"developer/guide/#routing-layer","title":"Routing Layer","text":""},{"location":"developer/guide/#ejabberd_router","title":"ejabberd_router","text":"<p><code>ejabberd_router.erl</code> module is the main dispatcher of XMPP stanzas.</p> <p>It's pretty small and straightforward module whose the only task is to find the \"route\" for a stanza. <code>ejabberd_router.erl</code> only operates with <code>#message{}</code>, <code>#presence{}</code> and <code>#iq{}</code> packets (defined in xmpp_codec.hrl), so please note, that it is not possible to route arbitrary <code>#xmlel{}</code> packets or any other Erlang terms through <code>ejabberd_router</code>.</p> <p>The only valid routes are:</p> <ul> <li>local route: stanzas of this route type are destined to the local server itself, i.e. stanzas with <code>to</code> attribute in the form of <code>domain.com</code> or <code>domain.com/resource</code>, where <code>domain.com</code> is a virtual host serviced by ejabberd. <code>ejabberd_router</code> passes such stanzas to <code>ejabberd_local.erl</code> module via <code>ejabberd_local:route/1</code> function call.</li> <li>session manager route: stanzas of this route type are destined to local users, i.e. stanzas with <code>to</code> attribute in the form of <code>user@domain.com</code> or <code>user@domain.com/resource</code> where <code>domain.com</code> is a virtual host serviced by ejabberd. <code>ejabberd_router</code> passes such stanzas to <code>ejabberd_sm.erl</code> module via <code>ejabberd_sm:route/1</code> function call.</li> <li>registered route: if a stanza is not destined to local virtual host, ejabberd first checks if there is a \"registered\" route for the stanza, i.e. a domain registered via <code>ejabberd_router:register_route/2</code> function. For doing this it looks up the routing table and if there is a process <code>Pid</code> registered on this domain, ejabberd routes the stanza as <code>Pid ! {route, Stanza}</code>. The routing table is backend-dependent and is implemented in the corresponding backend module such as <code>ejabberd_router_mnesia.erl</code>.</li> <li>s2s route: if a stanza is neither destined to local virtual host nor to registered route, <code>ejabberd_router</code> passes it to <code>ejabberd_s2s.erl</code> module via <code>ejabberd_s2s:route/1</code> function call.</li> </ul> <p>Mentioned modules are explained in more details in the following sections. You're encouraged to inspect exported functions of <code>ejabberd_router.erl</code>, because most likely you will use some of them.</p>"},{"location":"developer/guide/#ejabberd_local","title":"ejabberd_local","text":"<p><code>ejabberd_local.erl</code> handles stanzas destined to the local server itself. For <code>#message{}</code> and <code>#presence{}</code> it only calls hooks, while for <code>#iq{}</code> it finds the corresponding \"IQ handler\" by looking up its internal table to find a correspondence between a namespace of IQ's child element and the handler. Once the handler (an erlang function) is found, it passes further IQ processing to <code>gen_iq_handler.erl</code> via <code>gen_iq_handler:handle/5</code> call.</p> <p><code>ejabberd_local.erl</code> is also able to send IQ requests and to process responses for them. This is implemented in <code>ejabberd_local:route_iq/2,3</code> functions. This is also the most notable function of the module. Calling to other functions is not recommended.</p>"},{"location":"developer/guide/#ejabberd_sm","title":"ejabberd_sm","text":"<p><code>ejabberd_sm.erl</code> handles stanzas destined to local users. For <code>#message{}</code>, <code>#presence{}</code> and full-JID <code>#iq{}</code> it looks up its internal table (aka <code>session</code> table) for the corresponding <code>ejabberd_c2s</code> process and, if the process is found, it routes the stanza to this process via <code>ejabberd_c2s:route/2</code> call.</p> <p>Bare-JID <code>#iq{}</code> stanzas are processed in a similar way as in <code>ejabberd_local.erl</code>. The internal <code>session</code> table is backend-dependent and is implemented in the corresponding backend module: <code>ejabberd_sm_mnesia.erl</code>, <code>ejabberd_sm_redis.erl</code> and so on.</p> <p>The most notable functions of the module are:</p> <ul> <li><code>get_user_resources/2</code></li> <li><code>dirty_get_sessions_list/0</code></li> <li><code>dirty_get_my_sessions_list/0</code></li> <li><code>get_vh_session_list/1</code></li> <li><code>get_vh_session_number/1</code></li> <li><code>get_vh_by_backend/1</code></li> <li><code>get_session_pid/3</code></li> <li><code>get_user_info/2</code></li> <li><code>get_user_info/3</code></li> <li><code>get_user_ip/3</code></li> <li><code>is_existing_resource/3</code></li> </ul>"},{"location":"developer/guide/#route-registered-processes","title":"route-registered processes","text":"<p>Any process can register a route to itself. It's done by calling to <code>ejabberd_router:route/2</code> function. Note that a route should be unregistered via <code>ejabberd_router:unregister_route/1</code> function if the registering process terminates or the route is no longer needed. Once a route is registered to a process, this process will receive Erlang messages in the form of <code>{route, Stanza}</code>.</p> <p>NOTE: <code>from</code> and <code>to</code> fields are always set in the <code>Stanza</code>, so it's safe to assume that <code>xmpp:get_from(Stanza)</code> and <code>xmpp:get_to(Stanza)</code> always return <code>#jid{}</code> and never <code>undefined</code>.</p> <p>Refer to the code of <code>mod_muc.erl</code> or <code>ejabberd_service.erl</code> for an example of a route-registered process.</p>"},{"location":"developer/guide/#ejabberd_s2s-and-ejabberd_s2s_out","title":"ejabberd_s2s and ejabberd_s2s_out","text":"<p>If a stanza is destined neither to local virtual host not to a route-registered process, it's passed to <code>ejabberd_s2s.erl</code> module via <code>ejabberd_s2s:route/1</code> function call. <code>ejabberd_s2s</code> in its turn will look up the internal table (currently it's <code>s2s</code> Mnesia table) for the <code>ejabberd_s2s_out</code> process and, if found, passes the stanza to this process or, otherwise, will start new <code>ejabberd_s2s_out</code> process.</p> <p><code>ejabberd_s2s_out.erl</code> handles outbound XMPP S2S streams. This is the only callback module of <code>xmpp_stream_out</code> behaviour.</p>"},{"location":"developer/guide/#adding-new-functionality","title":"Adding new functionality","text":"<p>There are two common ways to add new functionality to ejabberd:</p> <ul> <li>using IQ Handlers</li> <li>using hooks</li> </ul> <p>Here is a rule of thumb on which way to choose:</p> <ul> <li>if you want to handle newly introduced IQs (that is, to generate replies for them), use IQ handlers</li> <li>if you want to modify ejabberd behaviour along the way of a stanza passing through all layers or want to \"listen\" for some internal events (like ejabberd configuration change), use hooks.</li> </ul>"},{"location":"developer/guide/#iq-handlers","title":"IQ Handlers","text":"<p>An <code>IQ Handler</code> is a function processing an IQ stanza (internally represented as <code>#iq{}</code> record). There are two types of IQ handlers: <code>local</code> and <code>sm</code>.</p> <ul> <li><code>local</code> IQ handler is a function processing IQs coming from <code>ejabberd_local</code>, that is, an IQ destined to the local server itself as described in ejabberd_local.</li> <li><code>sm</code> IQ handler is a function processing IQs coming from <code>ejabberd_sm</code>, that is, a bare-JID IQ destined to a local user as described in ejabberd_sm.</li> </ul> <p>An IQ handler is registered as:</p> <pre><code>gen_iq_handler:add_iq_handler(Type :: ejabberd_local | ejabberd_sm,\n                              Host :: binary(),\n                              Namespace :: binary(),\n                              Module :: module(),\n                              Function :: atom()) -&gt; ok\n</code></pre> <p>where:</p> <ul> <li><code>Type</code> is <code>ejabberd_local</code> for <code>local</code> handlers or <code>ejabberd_sm</code> for <code>sm</code> handlers</li> <li><code>Host</code> is a virtual host for which the IQ is to be processed</li> <li><code>Namespace</code> is an XML namespace of IQ's child element</li> </ul> <p>Once registered, matching <code>IQ</code> stanzas are handled by calling <code>Module:Function(IQ)</code>. The result should be in the form of <code>#iq{}</code> or <code>ignore</code>. When <code>#iq{}</code> is returned, it's treated as a reply and routed back to the IQ originator, otherwise, if <code>ignore</code> is returned, the further processing stops.</p> <p>NOTE: <code>from</code> and <code>to</code> fields are always set in the <code>IQ</code>, so it's safe to assume that <code>xmpp:get_from(IQ)</code> and <code>xmpp:get_to(IQ)</code> always return <code>#jid{}</code> and never <code>undefined</code>.</p> <p>If a handler is no longer needed it should be unregistered as:</p> <pre><code>gen_iq_handler:remove_iq_handler(Type :: ejabberd_local | ejabberd_sm,\n                                 Host :: binary(),\n                                 Namespace :: binary()) -&gt; ok\n</code></pre> <p>with the same meaning of the arguments.</p>"},{"location":"developer/guide/#hooks","title":"Hooks","text":"<p>When ejabberd is processing an arbitrary event (incoming IQ, outgoing presence, configuration change, etc), it is convenient to consider some of them notable. In order for someone to be notified of such events, ejabberd executes \"hooks\". A hook is represented by a unique name. All functions associated with the hook's name will be called in some specified order.</p> <p>NOTE: The conception of hooking is not ejabberd specific, see Hooking Wikipedia page for a general description.</p> <p>For example, when a packet is received on a client connection, ejabberd runs <code>user_send_packet</code> hook. Several modules need to listen for an event represented by this hook (that is, a packet and a C2S state), so they associate their internal functions with it: <code>mod_ping.erl</code> associates <code>user_send/1</code> function, <code>mod_privacy.erl</code> associates <code>user_send_packet/1</code> function and so on. The event is passed as an argument to the \"hooked\" functions, thus, the function from <code>mod_ping.erl</code> will be called as <code>mod_ping:user_send({Stanza, C2SState})</code>, the function from <code>mod_privacy.erl</code> will be called as <code>mod_privacy:user_send_packet({Stanza, C2SState})</code> and so on.</p> <p>There are two types of hooks: with an accumulator and without an accumulator.</p> <ul> <li>a hook with an accumulator, as its name suggests, accumulates some state during execution of a list of associated functions: the first argument of the hooked function will always be an accumulator and the function must return the new value for the accumulator (whether it's modified or not) in the form of <code>NewAcc</code> or <code>{stop, NewAcc}</code>. If <code>{stop, NewAcc}</code> is returned, a hook is considered evaluated and next functions in its associated list are not called. Otherwise, the new value <code>NewAcc</code> is passed to the next function in the associated list. An example of hooks with accumulator are: <code>disco_info</code>, <code>filter_packet</code>, <code>muc_process_iq</code> and so on.</li> <li>a hook without accumulator doesn't accumulate anything during execution of a list of associated functions: the returning values of such functions are simply ignored unless <code>stop</code> is returned. In the latter case, evaluation of next functions in the associated list is not performed. An example of hooks without accumulator are: <code>config_reloaded</code>, <code>component_init</code> and so on.</li> </ul> <p>Both types of hooks have local or global scope.</p> <ul> <li>a hook with local scope is associated with particular virtual host and is run only when an event is matching this host. Most of the hooks have local scope.</li> <li>a hook with global scope is not associated with any virtual host and is run for an event matching any hosts. A very few hooks have global scope.</li> </ul> <p>A function gets associated with a local hook as follows (the type of a hook doesn't matter):</p> <pre><code>ejabberd_hooks:add(Hook :: atom(),\n                   Host :: binary(),\n                   Module :: module(),\n                   Function :: atom(),\n                   Seq :: integer() -&gt; ok\n</code></pre> <p>where:</p> <ul> <li><code>Hook</code> is a hook name</li> <li><code>Host</code> is a virtual host</li> <li><code>Seq</code> is a sequence number. This number defines position of the function in the list to maintain execution order. Functions with lower sequence number are executed before those with bigger sequence number. For functions with the same sequence number the order is unspecified. A function associated with an accumulating hook is called as <code>Module:Function(Acc, Arg1, Arg2, ...)</code> where <code>Acc</code> is an accumulator value, <code>Arg1</code>, <code>Arg2</code>, ... - arguments of the hook. Recall that such function must return a new accumulator value (whether it's modified or not) in the form of <code>NewAcc</code> or <code>{stop, NewAcc}</code> where <code>NewAcc</code> is the new accumulator value. A function associated with a hook without an accumulator is called as <code>Module:Function(Arg1, Arg2, ...)</code>. All returning values except <code>stop</code> are ignored.</li> </ul> <p>WARNING: a <code>Function</code> with the corresponding arity should be exported by a <code>Module</code></p> <p>A function for a global hook gets associated as follows (the type of a hook doesn't matter):</p> <pre><code>ejabberd_hooks:add(Hook :: atom(),\n                   Module :: module(),\n                   Function :: atom(),\n                   Seq :: integer()) -&gt; ok\n</code></pre> <p>with the same meaning of the arguments. Note that <code>Host</code> argument is omitted in this case.</p> <p>For any types of hooks, if an association is no longer needed, it can be deleted by calling <code>ejabberd_hooks:delete/5,6</code> functions with exactly the same arguments used to create an association.</p> <p>In some cases a new hook should be introduced. There is no need to explicitly register the new hook, one only needs to run a hook in the required place. The following functions can be used for this:</p> <ul> <li>for local hooks with accumulator: <code>ejabberd_hooks:run_fold(Hook, Host, Acc, Args)</code>. The function returns a new accumulator value.</li> <li>for local hooks without accumulator: <code>ejabberd_hooks:run(Hook, Host, Args)</code>. The function always returns <code>ok</code>.</li> <li>for global hooks with accumulator: <code>ejabberd_hooks:run_fold(Hook, Acc, Args)</code>. The function returns a new accumulator value.</li> <li>for global hooks without accumulator: <code>ejabbed_hooks:run(Hook, Args)</code>. The function always returns <code>ok</code>.</li> </ul> <p>where <code>Args</code> is a list of arguments (other variables have the same meaning as above).</p> <p>There is a helper script that you can use to check hook correctness and find mishooked functions. The script also generates a module <code>src/hooks_type_test.erl</code> from where you can learn about existing hooks and check execution order. You can place your code inside <code>src</code> directory (if any), and run:</p> <pre><code>make hooks\n</code></pre>"},{"location":"developer/guide/#modules","title":"Modules","text":""},{"location":"developer/guide/#gen_mod-behaviour","title":"gen_mod behaviour","text":"<p>As you might know, ejabberd is a modular software. The best method to add new functionality to it is to write a new module. For doing this one should create an Erlang module of <code>gen_mod</code> behaviour:</p> <pre><code>%% file mod_foo.erl\n-module(mod_foo).\n...\n-behaviour(gen_mod).\n...\n</code></pre> <p>Several callbacks should be defined in the module:</p> <ul> <li><code>Module:start(Host, Opts)</code> where <code>Host</code> is a virtual host where the module is about to start and <code>Opts</code> is an option list (typically defined in the <code>modules</code> section of <code>ejabberd.yml</code>). The function is executed when a module is being started. It is intended to initialize a module. This is a good place to register hooks and IQ handlers, as well as to create an initial state of a module (if needed). The function should return either <code>ok</code> or <code>{ok, pid()}</code>.</li> <li><code>Module:stop(Host)</code> where <code>Host</code> is a virtual host. The function is executed when a module is being stopped. It is intended to make some module cleanup: most likely unregistering hooks and IQ handlers. The returning value is ignored</li> <li><code>Module:reload(Host, NewOpts, OldOpts)</code> where <code>NewOpts</code> and <code>OldOpts</code> is the new and old options list respectively. The function is called every time a module is being reloaded. This is the only optional callback, thus, if undefined, the module will be reloaded by calling sequentially <code>Module:stop/1</code> and <code>Module:start/2</code>.</li> <li><code>Module:depends(Host, Opts)</code> where the meaning of the arguments is the same. The function is called to build modules dependencies on startup. The function must return a list of type <code>[{module(), DependencyType}]</code>, where <code>DependencyType</code> is one of <code>hard</code> or <code>soft</code>. The <code>hard</code> dependency means the module is non-functional if the other module is not loaded. The <code>soft</code> dependency means the module has suboptimal functionality if the other module is not loaded.</li> <li><code>Module:mod_opt_type(Option)</code>. The function is used to process configuration options of <code>Module</code>. The function has the same meaning as <code>Module:opt_type/1</code> callback described in Configuration validation section.</li> </ul>"},{"location":"developer/guide/#stateful-modules","title":"Stateful modules","text":"<p>While some modules don't need to maintain an internal state (\"stateless\" modules), others are required to do this (\"stateful\" modules). The common practice is to implement a stateful module as a <code>gen_server</code> process. There is a couple of helpers to deal with such modules:</p> <ul> <li><code>gen_mod:start_child(Module, Host, Opts)</code> where <code>Module</code> is a name of a stateful module. This function should be called as the last function inside of <code>Module:start/2</code>. It will create a <code>gen_server</code> process with a registered name and will attach it to <code>ejabberd_gen_mod_sup</code> supervisor.</li> <li><code>gen_mod:stop_child(Module, Host)</code> should be used inside of <code>Module:stop/1</code> function and will terminate the corresponding registered <code>gen_server</code> process.</li> <li><code>gen_mod:get_module_proc(Host, Module)</code> can be used to obtain a registered name of a stateful module (i.e. its <code>gen_server</code>'s name).</li> </ul> <p>WARNING: don't forget to set <code>process_flag(trap_exit, true)</code> inside <code>Module:init/1</code> callback function, otherwise, <code>Module:terminate/2</code> callback will never be called when a module is being stopped.</p> <p>WARNING: keeping module's configuration options in an internal state is not recommended. Use <code>gen_mod:get_module_opt/4,5</code> functions to retrieve the options: in this case you don't need to re-initialize options in the state inside <code>Module:reload/3</code> callback.</p> <p>If a stateful module is intended to maintain a state in the form of a table, <code>ETS</code> can be used for this. In this case there is no need to implement it as a <code>gen_server</code> process. But make sure you're not calling <code>ets:new/2</code> several times for several virtual hosts (<code>badarg</code> will be raised in this case). E.g., the following code is incorrect:</p> <pre><code>start(Host, Opts) -&gt;\n    ...\n    ets:new(some_table, named_table, ...]),\n    ...\n</code></pre> <p>The correct code will look something like that:</p> <pre><code>start(Host, Opts) -&gt;\n    ...\n    try ets:new(some_table, [named_table, ...])\n    catch _:badarg -&gt; ok end,\n    ...\n</code></pre> <p>There is a plenty of examples of modules: pick up any file starting with <code>mod_</code> inside <code>src</code> directory.</p>"},{"location":"developer/guide/#gen_mod-module","title":"gen_mod module","text":"<p>Module <code>gen_mod.erl</code> has various useful functions to work with modules, the most notable are:</p> <ul> <li><code>is_loaded/2</code>: whether or not the module in question is loaded at a given virtual host</li> <li><code>get_opt/3,4</code>: gets a value of an option from module's options list (see description of <code>ejabberd_config:get_option/3</code> function from Fetching configuration options for details)</li> <li><code>get_module_opt/4,5</code>: the same as above, but an option is referenced by a virtual host and a module.</li> </ul>"},{"location":"developer/guide/#configuration","title":"Configuration","text":"<p>ejabberd has quite powerful configuration processor - <code>ejabberd_config.erl</code>. It performs configuration file parsing and validation.</p>"},{"location":"developer/guide/#validation","title":"Validation","text":"<p>In order to validate options <code>ejabberd_config</code> has to install feedback with the rest of the code. For doing this, it provides <code>ejabberd_config</code> behaviour with a single callback function: <code>Module:opt_type/1</code>. The callback accepts an option name as an <code>atom()</code> and must return either validating function if an option is known for the <code>Module</code> or a list of available options (as a list of atoms). A validating function is a <code>fun()</code> of a single argument - the value of the option. The validating function must return any new value for the option (whether it's modified or not) or should crash if the value doesn't match expected format. Here is an example:</p> <pre><code>%% file: some.erl\n-module(some).\n-behaviour(ejabberd_config).\n-export([opt_type/1]).\n...\nopt_type(max_connections_number) -&gt;\n    %% max_connections_number should be non-negative integer\n    %% if the condition is satisfied, return this integer\n    %% fail with function_clause otherwise\n    fun(I) when is_integer(I), I&gt;=0 -&gt; I end;\nopt_type(_) -&gt;\n    %% only max_connections_number is known\n    [max_connections_number].\n</code></pre> <p>NOTE: <code>gen_mod</code> behaviour defines a very similar callback - <code>Module:mod_opt_type/1</code> with the same meaning of arguments and returning values, except the callback is called to validate the <code>Module</code>'s specific options (i.e. options defined in the corresponding subsection of the <code>modules</code> section of a configuration file).</p>"},{"location":"developer/guide/#fetching-options","title":"Fetching options","text":"<p>The most notable function of the module is:</p> <pre><code>get_option(Option :: atom() | {atom(), binary() | global},\n           ValidatingFun :: fun(),\n           Default :: term()) -&gt; Value :: term().\n</code></pre> <p>The function is used to get a value <code>Value</code> of a configuration option <code>Option</code>. The <code>ValidatingFun</code> is a validating function described in the previous section and <code>Default</code> is the default value if the option is not defined in the config.</p>"},{"location":"developer/guide/#using-xmpp-library","title":"Using XMPP library","text":""},{"location":"developer/guide/#xmpp-module","title":"xmpp module","text":"<p>Prior to version 16.12, ejabberd used to operate with <code>#xmlel{}</code> packets directly: fast_xml API functions have been used for manipulating with <code>#xmlel{}</code> packets (such as <code>fast_xml:get_subtag/2</code>, <code>fast_xml:get_attr_s/2</code>, <code>fast_xml:get_path_s/2</code> and so on) as well as some functions from <code>jlib.erl</code> module.</p> <p>This is now deprecated and actually not possible. Instead, the new API functions are used from brand new xmpp library.</p> <p>NOTE: although direct calling of <code>fast_xml</code> API is deprecated, there are still two useful functions: <code>fxml_stream:parse_element/1</code> and <code>fxml:element_to_binary/1</code>. You can use these functions for (de)serialization of data stored on disc or in a database.</p> <p>The library is built on top of <code>XMPP Codec</code>: a number of decoding/encoding modules automatically generated by Fast XML generator from the specification file xmpp_codec.spec. The goal is to avoid manual processing of XML trees and, instead, using well-typed auto-generated structures defined in xmpp_codec.hrl. Every particular XML packet within some namespace has to have a specification defined in <code>xmpp_codec.spec</code>. The advantage of such approach is that you tell the generator what to parse instead of taming <code>fast_xml</code> library how to parse.</p> <p>NOTE: describing how to write XMPP codec specification is out of scope of this guide</p> <p>WARNING: you should never use functions from <code>xmpp_codec.erl</code> module directly: use functions from <code>xmpp.erl</code> module. The same is true for header files: do NOT include <code>xmpp_codec.hrl</code> -- include <code>xmpp.hrl</code> instead</p>"},{"location":"developer/guide/#xmpp-codec","title":"XMPP codec","text":"<p>Once a raw XML packet is parsed by <code>ejabberd_receiver.erl</code> into <code>#xmlel{}</code> record, it's passed to <code>xmpp_stream_in.erl</code> module, where decoding of <code>#xmlel{}</code> into <code>xmpp_element()</code> format (i.e. into well-known record type defined in <code>xmpp_codec.hrl</code>) is performed (refer to XMPP Stream Layer section for details). At that level \"lazy\" decoding is applied: only top-level element is decoded. For example, an <code>xmlel()</code> packet</p> <pre><code>#xmlel{name = &lt;&lt;\"message\"&gt;&gt;,\n       attrs = [{&lt;&lt;\"type\"&gt;&gt;,&lt;&lt;\"chat\"&gt;&gt;}],\n       children = [#xmlel{name = &lt;&lt;\"composing\"&gt;&gt;,\n                          attrs = [{&lt;&lt;\"xmlns\"&gt;&gt;,\n                                    &lt;&lt;\"http://jabber.org/protocol/chatstates\"&gt;&gt;}],\n                          children = []}]}\n</code></pre> <p>is decoded into the following <code>xmpp_element()</code>:</p> <pre><code>#message{id = &lt;&lt;&gt;&gt;,type = chat,lang = &lt;&lt;&gt;&gt;,from = undefined,\n         to = undefined,subject = [],body = [],thread = undefined,\n         sub_els = [#xmlel{name = &lt;&lt;\"composing\"&gt;&gt;,\n                           attrs = [{&lt;&lt;\"xmlns\"&gt;&gt;,\n                                     &lt;&lt;\"http://jabber.org/protocol/chatstates\"&gt;&gt;}],\n                           children = []}],\n         meta =\n</code></pre> <p>Note that the sub-element is still in <code>xmlel()</code> format. This \"semi-decoded\" packet is then passed upstream (at the Routing Layer). Thus, a programmer should explicitly decode sub-elements if needed. To accomplish this one can use the following function:</p> <pre><code>xmpp:decode(El :: xmlel(), Namespace :: binary(), [Option]) -&gt; xmpp_element()`\n</code></pre> <p>where the only supported <code>Option</code> is <code>ignore_els</code>: with this option lazy decoding is performed. By default, full decoding is applied, i.e. all known sub-elements get decoded. <code>Namespace</code> is a \"top-level\" namespace: it should be provided only if <code>&lt;&lt;\"xmlns\"&gt;&gt;</code> attribute is omitted in <code>El</code>, otherwise decoding would fail (see below).</p> <p>There is also <code>xmpp:decode(El :: xmlel()) -&gt; xmpp_element()</code> function, which is a short-hand for <code>xmpp:decode(El, ?NS_CLIENT, [])</code> (where <code>?NS_CLIENT</code> is a predefined namespace for <code>&lt;&lt;\"jabber:client\"&gt;&gt;</code>, see Namespaces section).</p> <p>Both functions might fail with <code>{xmpp_codec, Why}</code> exception. The value of <code>Why</code> can be used to format the failure reason into human readable description using <code>xmpp:format_error/1</code> function, e.g., using sub-element from example <code>#message{}</code> above, we can write:</p> <pre><code>try xmpp:decode(El) of\n    #chatstate{} = ChatState -&gt; process_chatstate(ChatState)\ncatch _:{xmpp_codec, Why} -&gt;\n    Text = xmpp:format_error(Why),\n    ?ERROR_MSG(\"failed to decode element: ~s\", [Txt])\nend\n</code></pre> <p>To apply reverse operation use <code>xmpp:encode/2</code> functions:</p> <pre><code>xmpp:encode(Pkt :: xmpp_element(), Namespace :: binary()) -&gt; El :: xmlel()\n</code></pre> <p>There is also <code>xmpp:encode(Pkt :: xmpp_element()) -&gt; El :: xmlel()</code> function which is a short-hand for <code>xmpp:encode(Pkt, &lt;&lt;&gt;&gt;)</code>.</p> <p><code>Namespace</code> is a \"top-level\" namespace: it is used to tell the codec whether to include <code>&lt;&lt;\"xmlns\"&gt;&gt;</code> attribute into resulting <code>#xmlel{}</code> element or not -- if the <code>Pkt</code> is within the same <code>Namespace</code>, <code>&lt;&lt;\"xmlns\"&gt;&gt;</code> attribute will be omitted in the result. For example:</p> <pre><code>&gt; rr(xmpp).\n...\n&gt; Msg.\n#message{id = &lt;&lt;&gt;&gt;,type = chat,lang = &lt;&lt;&gt;&gt;,from = undefined,\n         to = undefined,subject = [],body = [],thread = undefined,\n         sub_els = [#chatstate{type = composing}],\n         meta =\n&gt; xmpp:encode(Msg).\n#xmlel{name = &lt;&lt;\"message\"&gt;&gt;,\n       attrs = [{&lt;&lt;\"type\"&gt;&gt;,&lt;&lt;\"chat\"&gt;&gt;},\n                {&lt;&lt;\"xmlns\"&gt;&gt;,&lt;&lt;\"jabber:client\"&gt;&gt;}],\n       children = [#xmlel{name = &lt;&lt;\"composing\"&gt;&gt;,\n                          attrs = [{&lt;&lt;\"xmlns\"&gt;&gt;,\n                                    &lt;&lt;\"http://jabber.org/protocol/chatstates\"&gt;&gt;}],\n                          children = []}]}\n&gt; xmpp:encode(Msg, &lt;&lt;\"jabber:client\"&gt;&gt;).\n#xmlel{name = &lt;&lt;\"message\"&gt;&gt;,\n       attrs = [{&lt;&lt;\"type\"&gt;&gt;,&lt;&lt;\"chat\"&gt;&gt;}],\n       children = [#xmlel{name = &lt;&lt;\"composing\"&gt;&gt;,\n                          attrs = [{&lt;&lt;\"xmlns\"&gt;&gt;,\n                                    &lt;&lt;\"http://jabber.org/protocol/chatstates\"&gt;&gt;}],\n                          children = []}]}\n</code></pre> <p>NOTE: <code>xmpp:encode/1,2</code> functions would never fail as long as the provided input is a valid <code>xmpp_element()</code> with valid values of its record fields. Use dialyzer checks of your code for validation.</p> <p>NOTE: there is no need to explicitly decode a sub-element of an IQ passed into an IQ handler because decoding is performed inside <code>gen_iq_handler.erl</code> module and a handler actually will never receive malformed sub-elements.</p> <p>Luckily, there is a helper function for sub-elements decoding, described in the next section and in a lot of cases it's more convenient to use it.</p>"},{"location":"developer/guide/#getting-sub-elements","title":"Getting sub-elements","text":"<p>Once a programmer gets a stanza in <code>xmpp_element()</code> format, (s)he might want to get its subelement. To accomplish this the following function can be used:</p> <pre><code>xmpp:get_subtag(Stanza :: stanza(), Tag :: xmpp_element()) -&gt; Pkt :: xmpp_element() | false\n</code></pre> <p>This function finds a <code>Tag</code> by its well-known record inside sub-elements of the <code>Stanza</code>. It automatically performs decoding (if needed) and returns either found <code>xmpp_element()</code> or <code>false</code> if no elements have matched. Note that the function doesn't fail if some of sub-elements are invalid.</p> <p>Example:</p> <pre><code>&gt; rr(xmpp).\n...\n&gt; Msg.\n#message{id = &lt;&lt;&gt;&gt;,type = chat,lang = &lt;&lt;&gt;&gt;,from = undefined,\n         to = undefined,subject = [],body = [],thread = undefined,\n         sub_els = [#xmlel{name = &lt;&lt;\"composing\"&gt;&gt;,\n                           attrs = [{&lt;&lt;\"xmlns\"&gt;&gt;,\n                                     &lt;&lt;\"http://jabber.org/protocol/chatstates\"&gt;&gt;}],\n                           children = []}],\n         meta =\n&gt; xmpp:get_subtag(Msg, #chatstate{type = composing}).\n#chatstate{type = composing}\n&gt; xmpp:get_subtag(Msg, #chatstate{type = inactive}).\nfalse\n&gt; xmpp:get_subtag(Msg, #disco_info{}).\nfalse\n</code></pre>"},{"location":"developer/guide/#setting-and-removing-sub-elements","title":"Setting and removing sub-elements","text":"<p>In order to inject a sub-element into or delete one from arbitrary <code>stanza()</code> one can use <code>xmpp:set_subtag/2</code> and <code>xmpp:remove_subtag/2</code> respectively.</p>"},{"location":"developer/guide/#from-and-to","title":"from and to","text":"<p>Every <code>stanza()</code> element has <code>from</code> and <code>to</code> record fields. In order to get/set them one can manipulate with these record fields directly, e.g. via <code>Msg#message.from</code> or <code>Pres#presence.to</code> expressions, or, use <code>xmpp:get_from/1</code>, <code>xmpp:get_to/1</code>, <code>xmpp:set_from/2</code>, <code>xmpp:set_to/2</code> and <code>xmpp:set_from_to/3</code> functions, depending on which approach is more convenient in the current situation.</p> <p>NOTE: although in general <code>from</code> and <code>to</code> fields may have <code>undefined</code> values, these fields are always filled with correct <code>#jid{}</code> records at XMPP Stream Layer, thus, it is safe to assume that the fields always possess valid <code>#jid{}</code> values.</p>"},{"location":"developer/guide/#metadata","title":"Metadata","text":"<p>Every <code>stanza()</code> element has <code>meta</code> field represented as a <code>map()</code>. It's useful when there is a need to attach some metadata to the stanza before routing it further. A programmer can manipulate with this field directly using maps module, or use <code>xmpp:get_meta/1,2,3</code>, <code>xmpp:set_meta/2</code>, <code>xmpp:put_meta/3</code>, <code>xmpp:update_meta/3</code> and <code>xmpp:del_meta/2</code> functions, which is almost always more convenient (except pattern matching).</p>"},{"location":"developer/guide/#text-elements","title":"Text elements","text":"<p>Some <code>xmpp_element()</code>s has fields defined in <code>[#text{}]</code> format. The example is <code>#message.body</code> and <code>#presence.status</code> fields. To avoid writing a lot of extracting code the following functions can be used: <code>xmpp:mk_text/1,2</code> to convert some binary text written in some language into <code>[#text{}]</code> term, or <code>xmpp:get_text/1,2</code> to extract binary text from the <code>[#text{}]</code> element by a language.</p>"},{"location":"developer/guide/#generating-errors","title":"Generating errors","text":"<p>In order to generate stanza errors or stream errors <code>xmpp:err_/0,2</code> or <code>xmpp:serr_*/0,2</code> can be used respectively, such as <code>xmpp:err_service_unavailable()</code> or <code>xmpp:serr_not_authorized()</code>. If a stanza should be bounced back with an error, <code>xmpp:make_error/2</code> function can be used</p>"},{"location":"developer/guide/#namespaces","title":"Namespaces","text":"<p>There are many predefined macros for XML namespaces in ns.hrl. However, this file must NOT be included, as it's already included in <code>xmpp.hrl</code>.</p> <p>A function <code>xmpp:get_ns/1</code> can be used to retrieve a namespace from <code>xmpp_element()</code> or from <code>xmlel()</code> directly:</p> <pre><code>&gt; rr(xmpp).\n...\n&gt; xmpp:get_ns(#message{}).\n&lt;&lt;\"jabber:client\"&gt;&gt;.\n&gt; xmpp:get_ns(xmpp:encode(#presence{})).\n&lt;&lt;\"jabber:client\"&gt;&gt;.\n</code></pre>"},{"location":"developer/guide/#jid-module","title":"jid module","text":"<p><code>jid.erl</code> module provides functions to work with XMPP addresses (aka \"JIDs\"). There are two common types of internal representation of JIDs:</p> <ul> <li><code>jid()</code>: a JID is represented by a record <code>#jid{}</code> defined in   jid.hrl</li> <li><code>ljid()</code>: a JID is represented by a tuple <code>{User, Server, Resource}</code> where   <code>User</code>, <code>Server</code> and <code>Resource</code> are stringprepped version of a nodepart,   namepart and resourcepart of a JID respectively. This representation is useful to   use for JIDs comparison and when a JID should be used as a key (in a Mnesia   database, ETS table, etc.)</li> </ul> <p>The most notable functions in this module are:</p> <ul> <li><code>decode(Input :: binary()) -&gt; jid()</code>:   decodes binary data into <code>jid()</code>. Fails with <code>{bad_jid, Input}</code> otherwise.</li> <li><code>encode(JID :: jid() | ljid()) -&gt; binary()</code>:   encodes <code>JID</code> into binary data</li> <li><code>remove_resource(JID :: jid() | ljid()) -&gt; jid() | ljid()</code>:   removes resource part of a <code>JID</code></li> <li><code>replace_resource(JID :: jid() | ljid(), Resource :: binary()) -&gt; jid() | ljid()</code>:   replaces resource part of a <code>JID</code></li> <li><code>tolower(JID :: jid() | ljid()) -&gt; ljid()</code>:   transforms <code>JID</code> into <code>ljid()</code> representation</li> <li><code>make(LJID :: ljid() | jid()) -&gt; jid()</code>:   transforms <code>LJID</code> into <code>jid()</code> representation</li> </ul> <p>Inspect exported functions of jid.erl for more details.</p>"},{"location":"developer/guide/#external-authentication","title":"External Authentication","text":"<p>You can configure ejabberd to use as authentication method an external script, as described in the Administrator section: External Script.</p> <p>Let's see the interface between ejabberd and your script, and several example scripts. There are also several old example scripts.</p>"},{"location":"developer/guide/#extauth-interface","title":"Extauth Interface","text":"<p>The external authentication script follows the Erlang port driver API.</p> <p>That script is supposed to do these actions, in an infinite loop:</p> <ul> <li> <p>read from stdin: <code>AABBBBBBBBB.....</code></p> </li> <li> <p><code>A</code>: 2 bytes of length data (a short in network byte order)</p> </li> <li> <p><code>B</code>: a string of length found in A that contains operation in         plain text operation are as follows:</p> <ul> <li> <p><code>auth:User:Server:Password</code> (check if a username/password pair         is correct)</p> </li> <li> <p><code>isuser:User:Server</code> (check if it\u2019s a valid user)</p> </li> <li> <p><code>setpass:User:Server:Password</code> (set user\u2019s password)</p> </li> <li> <p><code>tryregister:User:Server:Password</code> (try to register an         account)</p> </li> <li> <p><code>removeuser:User:Server</code> (remove this account)</p> </li> <li> <p><code>removeuser3:User:Server:Password</code> (remove this account if the         password is correct)</p> </li> </ul> </li> <li> <p>write to stdout: <code>AABB</code></p> </li> <li> <p><code>A</code>: the number <code>2</code> (coded as a short, which is bytes length of         following result)</p> </li> <li> <p><code>B</code>: the result code (coded as a short), should be <code>1</code> for         success/valid, or <code>0</code> for failure/invalid</p> </li> </ul> <p>As you noticed, the <code>:</code> character is used to separate the fields. This is possible because the User and Server fields can't contain the <code>:</code> character; and Password can have that character, but is always the last field. So it is always possible to parse the input characters unambiguously.</p>"},{"location":"developer/guide/#perl-example-script","title":"Perl Example Script","text":"<p>This is a simple example Perl script; for example if the file is copied to the path <code>/etc/ejabberd/check_pass_null.pl</code> then configure ejabberd like this:</p> <pre><code>auth_method: [external]\nextauth_program: /etc/ejabberd/check_pass_null.pl\n</code></pre> <p>Content of <code>check_pass_null.pl</code>:</p> <pre><code>#!/usr/bin/perl\n\nuse Unix::Syslog qw(:macros :subs);\n\nmy $domain = $ARGV[0] || \"example.com\";\n\nwhile(1)\n  {\n   # my $rin = '',$rout;\n   # vec($rin,fileno(STDIN),1) = 1;\n   # $ein = $rin;\n   # my $nfound = select($rout=$rin,undef,undef,undef);\n\n    my $buf = \"\";\n    syslog LOG_INFO,\"waiting for packet\";\n    my $nread = sysread STDIN,$buf,2;\n    do { syslog LOG_INFO,\"port closed\"; exit; } unless $nread == 2;\n    my $len = unpack \"n\",$buf;\n    my $nread = sysread STDIN,$buf,$len;\n\n    my ($op,$user,$host,$password) = split /:/,$buf;\n    #$user =~ s/\\./\\//og;\n    my $jid = \"$user\\@$domain\";\n    my $result;\n\n    syslog(LOG_INFO,\"request (%s)\", $op);\n\n  SWITCH:\n      {\n $op eq 'auth' and do\n   {\n             $result = 1;\n   },last SWITCH;\n\n $op eq 'setpass' and do\n   {\n             $result = 1;\n   },last SWITCH;\n\n        $op eq 'isuser' and do\n          {\n             # password is null. Return 1 if the user $user\\@$domain exitst.\n             $result = 1;\n          },last SWITCH;\n\n        $op eq 'tryregister' and do\n          {\n             $result = 1;\n          },last SWITCH;\n\n        $op eq 'removeuser' and do\n          {\n             # password is null. Return 1 if the user $user\\@$domain exitst.\n             $result = 1;\n          },last SWITCH;\n\n        $op eq 'removeuser3' and do\n          {\n             $result = 1;\n          },last SWITCH;\n      };\n    my $out = pack \"nn\",2,$result ? 1 : 0;\n    syswrite STDOUT,$out;\n  }\n\ncloselog;\n</code></pre>"},{"location":"developer/guide/#python-example-script","title":"Python Example Script","text":"<p>Example Python script:</p> <pre><code>#!/usr/bin/python\n\nimport sys\nimport struct\n\ndef read_from_stdin(bytes):\n  if hasattr(sys.stdin, 'buffer'):\n    return sys.stdin.buffer.read(bytes)\n  else:\n    return sys.stdin.read(bytes)\n\ndef read():\n    (pkt_size,) = struct.unpack('&gt;H', read_from_stdin(2))\n    pkt = sys.stdin.read(pkt_size)\n    cmd = pkt.split(':')[0]\n    if cmd == 'auth':\n        u, s, p = pkt.split(':', 3)[1:]\n        if u == \"wrong\":\n            write(False)\n        else:\n            write(True)\n    elif cmd == 'isuser':\n        u, s = pkt.split(':', 2)[1:]\n        if u == \"wrong\":\n            write(False)\n        else:\n            write(True)\n    elif cmd == 'setpass':\n        u, s, p = pkt.split(':', 3)[1:]\n        write(True)\n    elif cmd == 'tryregister':\n        u, s, p = pkt.split(':', 3)[1:]\n        write(True)\n    elif cmd == 'removeuser':\n        u, s = pkt.split(':', 2)[1:]\n        write(True)\n    elif cmd == 'removeuser3':\n        u, s, p = pkt.split(':', 3)[1:]\n        write(True)\n    else:\n        write(False)\n\ndef write(result):\n    if result:\n        sys.stdout.write('\\x00\\x02\\x00\\x01')\n    else:\n        sys.stdout.write('\\x00\\x02\\x00\\x00')\n    sys.stdout.flush()\n\nif __name__ == \"__main__\":\n    try:\n        while True:\n            read()\n    except struct.error:\n        pass\n</code></pre>"},{"location":"developer/install-osx/","title":"Installing ejabberd development environment on OSX","text":"<p>This short guide will show you how to compile ejabberd from source code on Mac OS X, and get users chatting right away.</p>"},{"location":"developer/install-osx/#before-you-start","title":"Before you start","text":"<p>ejabberd is supported on Mac OS X 10.6.8 and later. Before you can compile and run ejabberd, you also need the following to be installed on your system:</p> <ul> <li>Gnu Make and GCC (the GNU Compiler Collection). To ensure that these   are installed, you can install the Command Line Tools for Xcode,   available via Xcode or from the Apple Developer website.</li> <li>Git</li> <li>Erlang/OTP 19.1 or higher. We recommend using Erlang 21.2.</li> <li>Autotools</li> </ul>"},{"location":"developer/install-osx/#homebrew","title":"Homebrew","text":"<p>An easy way to install some of the dependencies is by using a package manager, such as Homebrew \u2013 the Homebrew commands are provided here:</p> <ul> <li>Git: <code>brew install git</code></li> <li>Erlang /OTP: <code>brew install erlang</code></li> <li>Elixir: <code>brew install elixir</code></li> <li>Autoconf: <code>brew install autoconf</code></li> <li>Automake: <code>brew install automake</code></li> <li>Openssl: <code>brew install openssl</code></li> <li>Expat: <code>brew install expat</code></li> <li>Libyaml: <code>brew install libyaml</code></li> <li>Libiconv: <code>brew install libiconv</code></li> <li>Sqlite: <code>brew install sqlite</code></li> <li>GD: <code>brew install gd</code></li> <li>Rebar: <code>brew install rebar rebar3</code></li> </ul> <p>You can install everything with a single command:</p> <pre><code>brew install erlang elixir openssl expat libyaml libiconv libgd sqlite rebar rebar3 automake autoconf\n</code></pre>"},{"location":"developer/install-osx/#installation","title":"Installation","text":"<p>To build and install ejabberd from source code, do the following:</p> <ol> <li>Clone the Git repository: <code>git clone git@github.com:processone/ejabberd.git</code></li> <li>Go to your ejabberd build directory: <code>cd ejabberd</code></li> <li> <p>Run the following commands, assuming you want to install your    ejabberd deployment into your home directory:</p> <pre><code>chmod +x autogen.sh\n./autogen.sh\nexport LDFLAGS=\"-L/usr/local/opt/openssl/lib -L/usr/local/lib -L/usr/local/opt/expat/lib\"\nexport CFLAGS=\"-I/usr/local/opt/openssl/include/ -I/usr/local/include -I/usr/local/opt/expat/include\"\nexport CPPFLAGS=\"-I/usr/local/opt/openssl/include/ -I/usr/local/include -I/usr/local/opt/expat/include\"\n./configure --prefix=$HOME/my-ejabberd --enable-sqlite\nmake &amp;&amp; make install\n</code></pre> </li> </ol> <p>Note that the previous command reference the previously installed dependencies from Homebrew.</p>"},{"location":"developer/install-osx/#running-ejabberd","title":"Running ejabberd","text":"<ul> <li>From your ejabberd build directory, go to the installation directory: <code>cd $HOME/my-ejabberd</code></li> <li>To start the ejabberd server, run the following command: <code>sbin/ejabberdctl start</code></li> <li> <p>To verify that ejabberd is running, enter the following: <code>sbin/ejabberdctl status</code>   If the server is running, response should be as follow:</p> <pre><code>$ sbin/ejabberdctl status\nThe node ejabberd@localhost is started with status: started\nejabberd 14.12.40 is running in that node\n</code></pre> </li> <li> <p>To connect to the ejabberd console after starting the server: <code>sbin/ejabberdctl debug</code></p> </li> <li>Alternatively, you can also run the server in interactive mode: <code>sbin/ejabberdctl live</code></li> </ul>"},{"location":"developer/install-osx/#registering-a-user","title":"Registering a user","text":"<p>The default XMPP domain served by ejabberd right after the build is <code>localhost</code>. This is different from the IP address, DNS name of the server. It means remote users can connect to ejabberd even if it is running on your machine with <code>localhost</code> XMPP domain, by using your computer IP address or DNS name. This can prove handy in development phase to get more testers.</p>"},{"location":"developer/install-osx/#adium","title":"Adium","text":"<p>Adium is a popular XMPP client on OSX. You can use it</p> <ol> <li>Launch Adium. If the Adium Setup Assistant opens, close it.</li> <li>In the Adium menu, select Preferences, and then select the Accounts tab.</li> <li>Click the + button and select XMPP (Jabber).</li> <li>Enter a Jabber ID (for example, \u201cuser1@localhost\u201d) and password, and then click Register New Account.</li> <li>In the Server field, enter the following:</li> <li>Users registering on the computer on which ejabberd is running: <code>localhost</code></li> <li>Users registering from a different computer: the ejabberd server\u2019s IP address</li> <li>Click Request New Account.</li> </ol> <p>After registration, the user will connect automatically.</p> <p>Registered users wishing to add an existing account to Adium should enter the ejabberd server\u2019s IP address in the Connect Server field on the Options tab.</p>"},{"location":"developer/install-osx/#command-line","title":"Command line","text":"<p>You can register a user with the <code>ejabberdctl</code> utility: <code>ejabberdctl register user domain password</code></p> <p>For example: <code>ejabberdctl register user1 localhost myp4ssw0rd</code></p>"},{"location":"developer/install-osx/#domains","title":"Domains","text":"<p>To use your system\u2019s domain name instead of localhost, edit the following ejabberd configuration file: <code>$HOME/my-ejabberd/etc/ejabberd.yml</code> (point to the place of your real installation).</p> <p>Note: You may find example <code>ejabberd.cfg</code> files. This is the old obsolete format for configuration file. You can ignore the and focus on the new and more user friendly Yaml format.</p> <p>Find the line listing the hosts:</p> <pre><code>hosts:\n  - \"localhost\"\n</code></pre> <p>Replace <code>localhost</code> with your XMPP domain name, for example:</p> <pre><code>hosts:\n  - \"example.org\"\n</code></pre> <p>Save the configuration file and restart the ejabberd server. A user\u2019s Jabber ID will then use the domain instead of localhost, for example: <code>user1@example.org</code></p> <p>You can also configure multiple (virtual) domains for one server:</p> <pre><code>hosts:\n  - \"example1.org\"\n  - \"example2.org\"\n</code></pre>"},{"location":"developer/install-osx/#get-chatting","title":"Get chatting","text":"<p>Users that are registered on your server can now add their accounts in a chat application like Adium (specifying either the server\u2019s IP address or domain name), add each other as contacts, and start chatting.</p>"},{"location":"developer/repositories/","title":"Understanding ejabberd and its dependencies","text":""},{"location":"developer/repositories/#overview","title":"Overview","text":"<p>We wanted to make sure that ejabberd is modular and that parts that can be of interest for other Erlang projects can be reused.</p> <p>Not only we are massive open source contributors to Erlang community and ecosystem, but we are also trying to help even more by reviewing your pull requests. Do not hesitate to submit some on any of the many repositories mentioned here.</p> <p>ejabberd codebase is split among several repositories, so effectively ejabberd code is much more than what is in its primary repository. And each of those repositories is now a dependency of ejabberd.</p>"},{"location":"developer/repositories/#build-tools","title":"Build tools","text":"<p>The dependencies are managed differently depending on the build tool being used:</p> <ul> <li> <p>Elixir Mix</p> <ul> <li>reads dependencies from file <code>mix.exs</code> (package version or git commit):   <pre><code>{:fast_tls, \"&gt;= 1.1.18\"}\n{:yconf, git: \"https://github.com/processone/yconf\",\n         ref: \"9898754f16cbd4585a1c2061d72fa441ecb2e938\",\n         override: true}\n</code></pre></li> <li>downloads package from hex.pm, or git repository</li> <li>caches package in <code>$HOME/.hex/</code></li> <li>and compiles in <code>deps/</code></li> </ul> </li> <li> <p>Rebar3</p> <ul> <li>reads dependencies from file <code>rebar.config</code> (package version or git commit):   <pre><code>{fast_tls, \"~&gt; 1.1.19\", ...}\n{yconf, \".*\", {git, \"https://github.com/processone/yconf\",\n                    \"9898754f16cbd4585a1c2061d72fa441ecb2e938\"}}\n</code></pre></li> <li>downloads package from hex.pm, or git repository</li> <li>caches package in <code>$HOME/.cache/rebar3/hex/</code></li> <li>and compiles in <code>_build/default/lib/</code></li> </ul> </li> <li> <p>Rebar2</p> <ul> <li>reads dependencies from file <code>rebar.config</code> (git tag or git commit):   <pre><code>{fast_tls, ..., {git, \"https://github.com/processone/fast_tls\",\n                      {tag, \"1.1.24\"}}}\n{yconf, ..., {git, \"https://github.com/processone/yconf\",\n                   \"9898754f16cbd4585a1c2061d72fa441ecb2e938\"}}\n</code></pre></li> <li>downloads from the corresponding git repository</li> <li>does not cache it</li> <li>and compiles in <code>deps/</code></li> </ul> </li> </ul> <p>The dependencies are automatically downloaded from Internet, if not already cached on your machine. Alternatively, you can copy the cache directory from another machine.</p>"},{"location":"developer/repositories/#mandatory","title":"Mandatory","text":"<p>The main ejabberd repository is processone/ejabberd. There is hundreds of forks, but we actively maintain ejabberd to make it the most reliable and up to date version. This is thus your best starting point.</p> <p>When you build ejabberd yourself, the build chain will download a few Erlang dependencies:</p> <ul> <li>processone/cache_tab:   Flexible in-memory Erlang caching module.</li> <li>processone/fast_tls: Erlang native driver for TLS / SSL. It is build for performance and is more scalable that Erlang SSL driver. If your Erlang server is handling heavy load and is using TLS, we strongly recommend you check / compare with this driver.</li> <li>processone/fast_xml: Fast native Expat based Erlang XML parsing library. XML is the core of XMPP so we needed to provide the fast and more robust XML parsing stack as possible. It means that if you are looking for a great XML parser, reusing p1_xml is probably a great idea.</li> <li>processone/fast_yaml: Native Erlang interface to libyaml, for fast robust YAML parsing. This is needed by our new config file format.</li> <li>processone/iconv: Native iconv driver for Erlang. This is use for fast character encoding conversion.</li> <li>processone/p1_utils: This is extra Erlang modules developed for ejabberd but that can be useful in other Erlang applications.</li> <li>processone/stringprep: Fast and efficient Erlang Stringprep native driver. Stringprep is heavily used in XMPP to define encoding rules of various XMPP objects.</li> <li>basho/lager: Erlang logger module.</li> </ul>"},{"location":"developer/repositories/#optional","title":"Optional","text":"<p>Then, we use a few other dependent repositories that may be used if you have enabled support in the <code>./configure</code> script:</p> <ul> <li>processone/epam: epam helper for Erlang / Elixir PAM authentication support</li> <li>processone/erlang-sqlite3: Sqlite gen_server port for Erlang.</li> <li>processone/esip: ProcessOne SIP protocol support to add SIP-based voice capabilities to ejabberd.</li> <li>processone/ezlib: Native zlib driver for Erlang. Used for fast / efficient stream compression.</li> <li>processone/mysql: Pure Erlang MySQL driver.</li> <li>processone/pgsql: Pure Erlang PostgreSQL driver</li> <li>processone/stun: Implementation of Session Traversal Utilities for NAT. It is used for XMPP and SIP media capabilities, to help client discover their visible IP address and allow them to get in touch through NAT. This is basically useful for voice and file transfers.</li> <li>Nordix/eredis: Erlang Redis client</li> <li>rvirding/luerl: Lua in Erlang</li> </ul> <p>On the other hand, you can install additional ejabberd modules from the ejabberd-contrib repository.</p>"},{"location":"developer/sql-schema/","title":"ejabberd SQL Database Schema","text":"<p>We present the tables that might be in use, depending on your server configuration, together with a short explanation of the fields involved and their intended use. Tables are presented roughly grouped by related functionality.</p> <p>Consider this document a work in progress, not all tables are documented yet.</p> <p>Latest version of database schema are available in ejabberd Github repository:</p> <ul> <li>MySQL schema</li> <li>Postgres schema</li> <li>SQLite schema</li> <li>MS SQL Server schema. This   schema need testing / feedback and possibly improvement from SQL   Server users.</li> </ul>"},{"location":"developer/sql-schema/#authentication","title":"Authentication","text":""},{"location":"developer/sql-schema/#table-users","title":"Table <code>users</code>","text":"<p>Contains the information required to authenticate users.</p> Field Type Usage username string User password string User password, can be hashed created_at timestamp When the user account was created <p>The password are hashed if you use SCRAM authentication. In that case the next fields are also defined</p> Field Type Usage serverkey string support for salted passwords salt string support for salted passwords iterationcount integer support for salted passwords"},{"location":"developer/sql-schema/#rosters","title":"Rosters","text":""},{"location":"developer/sql-schema/#table-rosterusers","title":"Table <code>rosterusers</code>","text":"<p>This is a quite complex table, used as a store for a quite complex protocol that is the one defined to manage rosters and subscriptions on rfc6121.  </p> <p>In the common case of two users adding each other as contacts, entries in the roster table follows a series of steps  as they moves from a subscription request to the final approval and bi-directional subscription being established. This process can be initiated either by the user, or by the (possible remote) peer. Also need to account for the case where the user, or the contact, might not be online at the moment of the subscription request is made.</p> <p>Steps are further complicated by the fact that entries in the roster aren't required to have corresponding subscriptions. For details of the meaning of the different fields, refer to the protocol itself, as these are mostly a direct mapping of it.</p> <p>Note: If you manage users contacts from outside the roster workflow of XMPP (for example your site backends perform the linking between users),  it is likely that you only need to care about the  username, jid and nick fields,  and set the subscription field to be always 'B' for a mutual link between users.</p> Field Type Usage username string User jid string Contact jid nick string Contact nickname subscription char 'B'=both | 'T'=To | 'F'=From | 'N'=none ask char 'S'=subscribe | 'U'=unsubscribe | B='both' | 'O'=out | 'I'=in | 'N'=none askmessage string Message to be displayed on the subscription request server char 'N' for normal users contacts subscribe string type string \"item\" created_at timestamp Creation date of this roster entry"},{"location":"developer/sql-schema/#table-rostergroups","title":"Table <code>rostergroups</code>","text":""},{"location":"developer/sql-schema/#table-sr_group","title":"Table <code>sr_group</code>","text":""},{"location":"developer/sql-schema/#table-sr_user","title":"Table <code>sr_user</code>","text":""},{"location":"developer/sql-schema/#messages","title":"Messages","text":""},{"location":"developer/sql-schema/#table-spool","title":"Table <code>spool</code>","text":"<p>Messages sent to users that are offline are stored in this table. Do not confuse this with general message archiving: messages are only temporarily stored in this table, removed as soon as the target user is back online and the pending messages delivered to it.</p> Field Type Usage username string User xml blob Raw packet seq integer Unique, autoincrement sequence number. created_at timestamp When the message was stored <p>The seq field is used for sorting, and to easily identify a particular user message.</p>"},{"location":"developer/sql-schema/#table-privacy_list_data","title":"Table <code>privacy_list_data</code>","text":"<p>The table is used to store privacy rules.</p> <p>The table is a direct translation of the XMPP packet used to set privacy lists. For more details, please read XEP-0016: Privacy Lists, Syntax and Semantics. Here is an example packet coming from privacy list specification:</p> <pre><code>&lt;item\n     type='[jid|group|subscription]'\n     value='bar'\n     action='[allow|deny]'\n     order='unsignedInt'&gt;\n    [&lt;message/&gt;]\n    [&lt;presence-in/&gt;]\n    [&lt;presence-out/&gt;]\n    [&lt;iq/&gt;]\n &lt;/item&gt;\n</code></pre> <p>The table fields are defined as follow:</p> Field Type Usage id int Privacy list rule id. t char Privacy rule type: 'j' for jid, 'g' for group and 's' for subscription. value string Privacy list value for match, whose content depends on privacy list rule type. action char Privacy list action: 'd' for deny and 'a' for allow. ord int Order for applying the privacy list rule. match_all boolean (0 or 1) If true (1), means any packet types will be matched. Other matches should be false (0). match_iq boolean (0 or 1) If true (1), means iq packets will be matched by rule. match_message boolean (0 or 1) If true (1), means message packets type will be matched by rule. match_presence_in boolean (0 or 1) If true (1), means inbound presence packets type will be matched by rule. match_presence_out boolean (0 or 1) If true (1), means outbound packets type will be matched by rule."},{"location":"developer/sql-schema/#multiuser-chat-rooms","title":"Multiuser Chat Rooms","text":""},{"location":"developer/sql-schema/#table-muc_room","title":"Table <code>muc_room</code>","text":"<p>It is used to store persistent rooms, that is, rooms that must be automatically started with the server.</p> Field Type Usage name string Room name host string Hostname of the conference component opts string Room options, encoded as erlang terms created_at timestamp Creation date <p>The opts field is legible, but not mean to be modified directly. It contents depends on the implementation of mod_muc. It contains the room configuration and affiliations.</p>"},{"location":"developer/sql-schema/#table-muc_registered","title":"Table <code>muc_registered</code>","text":"<p>Contains a map of user to nicknames.  When a user register a nickname with the conference module, that nick is reserved and can't be used by anyone else, in any room from that conference host.</p> Field Type Usage jid string User jid host string Hostname of the conference component nick string Room options, encoded as erlang terms created_at timestamp Creation date"},{"location":"developer/sql-schema/#table-room_history","title":"Table <code>room_history</code>","text":"<p>In ejabberd Business Edition, this table is used if persistent room history is enabled. If so, recent room history is saved to the DB before ejabberd is stopped, allowing the recent history to survive server restarts.</p> Field Type Usage room string Room jid nick string Nickname that sent the message packet string XML stanza with the message have_subject boolean True if the message stanza had subject created_at timestamp Creation date size integer Size in bytes of the xml packet"},{"location":"developer/sql-schema/#table-muc_online_room","title":"Table <code>muc_online_room</code>","text":"<p>This table is used to store rooms that actually exists in the memory of the server.</p> Field Type Usage name string Room name host string Hostname of the conference component node string Erlang node where the room is pid string Pid of the thread running the room"},{"location":"developer/sql-schema/#table-muc_online_users","title":"Table <code>muc_online_users</code>","text":"<p>This table is used to store MucSub subscriptions.</p> Field Type Usage username string User server string Hostname of the user resource string User resource name string Name of the room host string Hostname of the conference component node string Erlang node"},{"location":"developer/sql-schema/#table-muc_room_subscribers","title":"Table <code>muc_room_subscribers</code>","text":"<p>This table is used to store MucSub subscriptions.</p> Field Type Usage room string Room name host string Hostname of the conference component jid string User jid nick string User nick nodes string MucSub nodes created_at timestamp Creation date"},{"location":"developer/sql-schema/#vcard","title":"VCard","text":""},{"location":"developer/sql-schema/#table-vcard","title":"Table <code>vcard</code>","text":"<p>The table is used to store raw vCard content for delivery of the vCard \"as is\".</p> <p>The table fields are defined as follow:</p> Field Type Usage username string Owner of the Vcard vcard text Raw Vcard created_at timestamp Record creation date"},{"location":"developer/sql-schema/#table-vcard_search","title":"Table <code>vcard_search</code>","text":"<p>The table is used to store vCard index on a few of the Vcard field used for vCard search in users directory.</p> <p>You can learn more about the vCard specification on Wikipedia vCard page.</p> <p>The table fields are defined as follow:</p> Field Type Usage username string Raw username for display lusername string Lowercase username for search fn string Raw fullname for display lfn string Lowercase fullname for search family string Raw family name for display lfamilly string Lowercase family name for search given string Raw given name for display lgiven string Lowercase given name for search middle string Raw middle name for display lmiddle string Lowercase middle name for search nickname string Raw nickname for display lnickname string Lowercase nickname for search bday string Raw birthday for display lbday string Lowercase and processed birthday for search ctry string Raw country for display lctry string Lowercase country for search locality string Raw city for display llocality string Lowercase city for search email string Raw email for display lemail string Lowercase email for search orgname string Raw organisation name for display lorgname string Lowercase organisation name for search orgunit string Raw organisation department name for display lorgunit string Lowercase organisation department for search"},{"location":"developer/sql-schema/#others","title":"Others","text":""},{"location":"developer/sql-schema/#table-last","title":"Table <code>last</code>","text":"<p>This table is used to store the last time the user was seen online. It is defined as follow:</p> Field Type Usage username string User seconds string Timestamp for the last time the user was seen online state string Why user got disconnected. Usually is empty <p>Note that the table is not updated while the user has the session open.</p>"},{"location":"developer/sql-schema/#table-caps_features","title":"Table <code>caps_features</code>","text":"<p>Ejabberd uses this table to keep a list of the entity capabilities discovered.</p> Field Type Usage node string Node subnode string Subnode feature string Entity feature created_at timestamp Creation date <p>The subnode field correspond to the 'ver' (\"verification string\") of XEP-0115. There is one entry in this table for each feature advertised by the given (node,subnode) pair.</p>"},{"location":"developer/sql-schema/#table-private_storage","title":"Table <code>private_storage</code>","text":"<p>Used for user private data storage.</p> Field Type Usage username string User namespace string XEP-0049 namespace of the stored data data string Raw xml created_at timestamp Creation date"},{"location":"developer/vscode/","title":"Developing ejabberd with VSCode","text":"<p> added in 23.01</p> <p>The ejabberd git repository includes basic configuration and a few scripts to get started with ejabberd development using Visual Studio Code.</p> <p>There are several Visual Studio Code flavours suitable for ejabberd development:</p> <ul> <li>Visual Studio Code desktop app \u2013  local development with no dependencies</li> <li>VSCodium desktop app \u2013  local development installing dependencies</li> <li>Coder's code-server container image \u2013  local or remote development</li> <li>GitHub Codespaces service \u2013  quick and short remote development</li> </ul>"},{"location":"developer/vscode/#visual-studio-code","title":"Visual Studio Code","text":"<p>The official Visual Studio Code installers provided by Microsoft can use the official marketplace. That allows to install the Dev Container extension to compile and run ejabberd inside a prepared container, which includes Erlang/OTP and all the required libraries, so you don't need to install them in your machine.</p> <p>However that installer is licensed under a not-FLOSS license and contains telemetry/tracking.</p> <p>Once installed: install Git as suggested, clone the ejabberd git repository locally, let it install the Dev Container extension, then let it reopen the path inside the devcontainer.</p>"},{"location":"developer/vscode/#vscodium","title":"VSCodium","text":"<p>VSCodium provides Free/Libre Open Source Software Binaries of VSCode. This is a great alternative to the official VSCode installer.</p> <p>However, it can't use the official marketplace, uses instead the open-vsx.com marketplace, and the Dev Containers extension is not available. This means that you must install the ejabberd dependencies in your system to compile and debug ejabberd.</p> <p>Once installed: open your local ejabberd git clone. It's highly recommended to go the EXTENSIONS tab and install the Erlang LS extension.</p>"},{"location":"developer/vscode/#coders-code-server","title":"Coder's code-server","text":"<p>An easy, zero-cost, way to use VSCode in a web browser is through the ejabberd's code-server container image. This image is based in the Debian docker image and includes Coder's code-server, Erlang/OTP, Elixir, and all the required libraries.</p> <p>Download and start the container, and provide as volume the path of your local ejabberd git clone:</p> dockerpod <pre><code>docker run \\\n    --name coder \\\n    -it \\\n    -p 1870:1870 \\\n    -v $(pwd)/ejabberd:/workspaces/ejabberd \\\n    ghcr.io/processone/code-server\n</code></pre> <p>The next time it can be started with <code>docker start -i coder</code></p> <p>Write a file named <code>pod.yml</code> with the following content:</p> <pre><code>apiVersion: v1\n\nkind: Pod\n\nmetadata:\n  name: codeserver\n\nspec:\n  containers:\n\n  - name: coder\n    image: ghcr.io/processone/code-server\n    ports:\n    - containerPort: 1870\n      hostPort: 1870\n    - containerPort: 5222\n      hostPort: 5222\n    - containerPort: 5280\n      hostPort: 5280\n    volumeMounts:\n      - mountPath: /workspaces/ejabberd\n        name: eja\n\n  volumes:\n  - name: eja\n    hostPath:\n      path: ejabberd # path to your ejabberd git clone\n      type: DirectoryOrCreate\n</code></pre> <p>And then run:</p> <pre><code>podman play kube pod.yml --replace --wait\n</code></pre> <p>Now open in your web browser: http://0.0.0.0:1870/</p> <p>If you cannot write inside the container directory, you need to change the owner of ejabberd directory and its files: code-server is ran by the user <code>1000:1000</code> inside the container, so should run something like this for your ejabberd directory:</p> dockerpodman <pre><code>sudo chown -R 1000:1000 ejabberd\n</code></pre> <pre><code>podman unshare chown -R 1000:1000 ejabberd\n</code></pre>"},{"location":"developer/vscode/#github-codespaces","title":"GitHub Codespaces","text":"<p>The ejabberd git repository contains default configuration to use it in the GitHub Codespaces service.</p> <p>This can be used remotely over a web browser, no need to install anything. Notice this is a service that can be used for free several hours each month, and later requires a subscription.</p> <p>To start using it:</p> <ol> <li>Go to https://github.com/codespaces</li> <li>Click \"New codespace\"</li> <li>Select ejabberd repository, desired branch, click \"Create codespace\"</li> </ol>"},{"location":"developer/vscode/#basic-usage","title":"Basic Usage","text":"<p>Once you have VSCode running and ejabberd git repository opened, open some erlang file, so Erlang LS extension gets started, and now you can go to RUN and run ejabberd for the first time. The first time it will take some time to compile, be patient.</p> <p>Now you can:</p> <ul> <li>In RUN click <code>\u25b7 Relive</code> to compile and start ejabberd</li> <li>In EXPLORER open any source code, and add a breakpoint</li> <li>In TERMINAL you can call: <code>ejabberdctl register admin localhost somepass</code></li> <li>In PORTS you can view the addresses you can use to connect to the running ejabberd</li> </ul> <p>The ejabberd configuration file is in <code>_build/relive/conf/ejabberd.yml</code>.</p> <p>You can connect to ejabberd using a XMPP client using HTTPS BOSH or WS on port 5443. Webadmin is on port 5280, if it complains 404, add <code>admin/</code> to the URL.</p>"},{"location":"developer/ejabberd-api/","title":"ejabberd ReST API","text":""},{"location":"developer/ejabberd-api/#introduction","title":"Introduction","text":"<p>ejabberd comes with a extensive API that allows to perform administrative tasks from outside ejabberd:</p> <ol> <li>Manage the XMPP server:    restart the server, reload configuration, ...</li> <li>Integrate the XMPP server with your existing platforms:    create a MUC room when a new party starts in your platform, ...</li> <li>Allow users to perform tasks using simple basic programs with no XMPP support:    send a message from the smartwatch, show the number of offline messages...</li> </ol> <p>The system is powerful, versatile, and you can configure access permissions very finely. In the next sections you will learn the basic concepts, how to start using ejabberd's API, how to adjust it to your needs, and integrate ejabberd with your existing systems.</p> <p>api command</p> <p>Command defined in some ejabberd module API backend, that can be executed using some API frontend.</p> <p>ejabberd's API currently includes over 200 API Commands, see API Reference for a detailed list of all the existing commands. Alternatively you can view the list of commands grouped by their API Tags.</p>"},{"location":"developer/ejabberd-api/#api-backends","title":"API Backends","text":"<p>API commands are defined and implemented in Erlang or Elixir modules that can be considered \"API backends\". Some modules included in ejabberd define their commands, while the majority of the existing commands are defined and implemented in:</p> <ul> <li><code>ejabberd_admin</code></li> <li>mod_admin_extra</li> <li>mod_muc_admin</li> </ul> <p>When developing a module in Erlang or Elixir, it can define new commands, see Commands page for details.</p>"},{"location":"developer/ejabberd-api/#api-frontends","title":"API Frontends","text":"<p>The API commands are exposed through interfaces, implemented in modules that can be considered \"API frontends\". Available interfaces are:</p> <ul> <li>ejabberdctl command-line tool</li> <li>mod_http_api for HTTP ReST calls using JSON data</li> <li>mod_adhoc_api for calls using a XMPP client</li> <li>WebAdmin uses most commands to build the web pages</li> <li>ejabberd_xmlrpc for XML-RPC calls (deprecated in favor of mod_http_api)</li> </ul> <p>There are other interfaces available in the ejabberd-contrib Github repository:</p> <ul> <li>mod_rest for HTTP ReST calls using plaintext data</li> <li>mod_shcommands for a WebAdmin page</li> </ul>"},{"location":"developer/ejabberd-api/#process-flow","title":"Process Flow","text":"<p>Let's review the process flow with one example:</p> <ol> <li>API Client: Your web client (in this case Curl) sends an HTTP query</li> <li>API Frontend: mod_http_api   checks the client authentication,   permissions to execute the command   and processes command arguments, then calls</li> <li>API Backend: mod_admin_extra   actually executes the command.   In this case, it will query to proper internal ejabberd code.</li> </ol> <pre><code>sequenceDiagram\n  autonumber\n  participant C as API Client&lt;br/&gt;curl\n  box ejabberd\n  participant F as API Frontend&lt;br/&gt;mod_http_api\n  participant B as API Backend&lt;br/&gt;mod_admin_extra\n  participant M as Module&lt;br/&gt;mod_last\n  end\n  Note right of C: HTTP Query\n  C--&gt;&gt;F: POST /api/get_last&lt;br/&gt;{\"user\": \"tom\",&lt;br/&gt;\"host\": \"localhost\"}\n  Note right of F: API Command Call\n  F--&gt;&gt;B: get_last&lt;br/&gt;tom localhost\n  Note right of B: Erlang Function Call\n  B--&gt;&gt;M: mod_last:get_last_info&lt;br/&gt;(tom, localhost)\n  activate M\n  M--&gt;&gt;B: {ok,&lt;br/&gt;1743517196,&lt;br/&gt;\"Disconnected\"}\n  deactivate M\n  B--&gt;&gt;F: {\"2025-04-01T14:19:56Z\",&lt;br/&gt;\"Disconnected\"}\n  F--&gt;&gt;C: 200 OK&lt;br/&gt;{\"timestamp\":&lt;br/&gt; \"2025-04-01T14:19:56Z\",&lt;br/&gt;\"status\":\"Disconnected\"}</code></pre>"},{"location":"developer/ejabberd-api/#the-role-of-ejabberd-api","title":"The role of ejabberd API","text":"<p>As we have seen, ejabberd API role is to provide and control access to ejabberd commands over HTTP/HTTPS.</p> <p>Thus, ejabberd API primary goal is to grant access to some or all ejabberd \"commands\".</p> <p>An admin ejabberd ReST API requires:</p> <ul> <li>At least one admin user, if you plan to check credentials for command access (You can alternatively rely on originating IP addresses).</li> <li>HTTP/HTTPS handlers configured to expose the desired commands.</li> <li>The selection of authentication mechanisms that can be used to access the API.   Two mechanisms are available to access the HTTP API:</li> <li>Basic authentication. This mechanism is enabled by default.</li> <li>OAuth 2.0 token based authentication. It has to be explicitly added to the config file.</li> </ul>"},{"location":"developer/ejabberd-api/#learning-the-basics","title":"Learning the basics","text":"<p>The first resources to read to learn about ejabberd ReST API configuration are the following:</p> <ul> <li>Simple API configuration</li> <li>Using ejabberd client API libraries and tools</li> </ul> <p>The list of available commands is available in the API Reference section. Additionally, you can check at runtime what commands are available in your installed server using ejabberdctl:</p> <pre><code>\u276f ejabberdctl\nUsage: ejabberdctl [--no-timeout] [--node nodename] [--version api_version] command [arguments]\n\nAvailable commands in this ejabberd node:\n  backup file\n             Store internal Mnesia database to binary backup file\n  ban_account user host reason\n             Ban an account: kick sessions and set random password\n  ...\n\n\u276f ejabberdctl help\n  ...\n\n\u276f ejabberdctl help ban_account\n  ...\n</code></pre>"},{"location":"developer/ejabberd-api/#next-steps","title":"Next steps","text":"<p>You can dig deeper into ejabberd ReST API configuration on the following pages:</p> <ul> <li>API Permissions</li> <li>OAuth Support</li> </ul>"},{"location":"developer/ejabberd-api/admin-api/","title":"API Reference","text":"<p>Please note</p> <p>This section describes API commands of ejabberd 25.07.  If you are using an old ejabberd release, please refer to the corresponding archived version of this page in the Archive.</p> <p>The commands that changed in this version are marked with \ud83d\udfe4</p>","boost":1},{"location":"developer/ejabberd-api/admin-api/#abort_delete_old_mam_messages","title":"abort_delete_old_mam_messages","text":"<p> added in 22.05</p> <p>Abort currently running delete old MAM messages operation</p> <p>Arguments:</p> <ul> <li>host :: string : Name of host where operation should be aborted</li> </ul> <p>Result:</p> <ul> <li>status :: string : Status text</li> </ul> <p>Tags: mam, purge</p> <p>Module: mod_mam</p> <p>Examples:</p> <pre><code>POST /api/abort_delete_old_mam_messages\n{\n  \"host\": \"localhost\"\n}\n\nHTTP/1.1 200 OK\n\"Operation aborted\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#abort_delete_old_messages","title":"abort_delete_old_messages","text":"<p> added in 22.05</p> <p>Abort currently running delete old offline messages operation</p> <p>Arguments:</p> <ul> <li>host :: string : Name of host where operation should be aborted</li> </ul> <p>Result:</p> <ul> <li>status :: string : Status text</li> </ul> <p>Tags: offline, purge</p> <p>Examples:</p> <pre><code>POST /api/abort_delete_old_messages\n{\n  \"host\": \"localhost\"\n}\n\nHTTP/1.1 200 OK\n\"Operation aborted\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#add_blocked_domain","title":"add_blocked_domain \ud83d\udfe4","text":"<p> added in 25.07</p> <p>Add domain to list of blocked domains</p> <p>Arguments:</p> <ul> <li>host :: string</li> <li>domain :: string</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: spam</p> <p>Module: mod_antispam</p> <p>Examples:</p> <pre><code>POST /api/add_blocked_domain\n{\n  \"host\": \"aaaaa\",\n  \"domain\": \"bbbbb\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#add_rosteritem","title":"add_rosteritem","text":"<p> updated in 24.02</p> <p>Add an item to a user's roster (supports ODBC)</p> <p>Arguments:</p> <ul> <li>localuser :: string : User name</li> <li>localhost :: string : Server name</li> <li>user :: string : Contact user name</li> <li>host :: string : Contact server name</li> <li>nick :: string : Nickname</li> <li>groups :: [group::string] : Groups</li> <li>subs :: string : Subscription</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: roster, v1</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/add_rosteritem\n{\n  \"localuser\": \"user1\",\n  \"localhost\": \"myserver.com\",\n  \"user\": \"user2\",\n  \"host\": \"myserver.com\",\n  \"nick\": \"User 2\",\n  \"groups\": [\n    \"Friends\",\n    \"Team 1\"\n  ],\n  \"subs\": \"both\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#add_to_spam_filter_cache","title":"add_to_spam_filter_cache \ud83d\udfe4","text":"<p> added in 25.07</p> <p>Add JID to spam filter cache</p> <p>Arguments:</p> <ul> <li>host :: string</li> <li>jid :: string</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: spam</p> <p>Module: mod_antispam</p> <p>Examples:</p> <pre><code>POST /api/add_to_spam_filter_cache\n{\n  \"host\": \"aaaaa\",\n  \"jid\": \"bbbbb\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#backup","title":"backup","text":"<p>Backup the Mnesia database to a binary file</p> <p>Arguments:</p> <ul> <li>file :: string : Full path for the destination backup file</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/backup\n{\n  \"file\": \"/var/lib/ejabberd/database.backup\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#ban_account","title":"ban_account","text":"<p> improved in 24.06</p> <p>Ban an account</p> <p>This command kicks the account sessions, sets a random password, and stores ban details in the account private storage. This command requires mod_private to be enabled. Check also get_ban_details API and unban_account API.</p> <p>Arguments:</p> <ul> <li>user :: string : User name to ban</li> <li>host :: string : Server name</li> <li>reason :: string : Reason for banning user</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: accounts, v2</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/ban_account\n{\n  \"user\": \"attacker\",\n  \"host\": \"myserver.com\",\n  \"reason\": \"Spaming other users\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#bookmarks_to_pep","title":"bookmarks_to_pep","text":"<p>Export private XML storage bookmarks to PEP</p> <p>Arguments:</p> <ul> <li>user :: string : Username</li> <li>host :: string : Server</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: private</p> <p>Module: mod_private</p> <p>Examples:</p> <pre><code>POST /api/bookmarks_to_pep\n{\n  \"user\": \"bob\",\n  \"host\": \"example.com\"\n}\n\nHTTP/1.1 200 OK\n\"Bookmarks exported\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#change_password","title":"change_password","text":"<p>Change the password of an account</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> <li>newpass :: string : New password for user</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: accounts</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/change_password\n{\n  \"user\": \"peter\",\n  \"host\": \"myserver.com\",\n  \"newpass\": \"blank\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#change_room_option","title":"change_room_option","text":"<p>Change an option in a MUC room</p> <p>Arguments:</p> <ul> <li>room :: string : Room name</li> <li>service :: string : MUC service</li> <li>option :: string : Option name</li> <li>value :: string : Value to assign</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: muc_room</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/change_room_option\n{\n  \"room\": \"room1\",\n  \"service\": \"conference.example.com\",\n  \"option\": \"members_only\",\n  \"value\": \"true\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#check_account","title":"check_account","text":"<p>Check if an account exists or not</p> <p>Arguments:</p> <ul> <li>user :: string : User name to check</li> <li>host :: string : Server to check</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: accounts</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/check_account\n{\n  \"user\": \"peter\",\n  \"host\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#check_password","title":"check_password","text":"<p>Check if a password is correct</p> <p>Arguments:</p> <ul> <li>user :: string : User name to check</li> <li>host :: string : Server to check</li> <li>password :: string : Password to check</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: accounts</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/check_password\n{\n  \"user\": \"peter\",\n  \"host\": \"myserver.com\",\n  \"password\": \"secret\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#check_password_hash","title":"check_password_hash","text":"<p>Check if the password hash is correct</p> <p>Allows hash methods from the Erlang/OTP crypto application.</p> <p>Arguments:</p> <ul> <li>user :: string : User name to check</li> <li>host :: string : Server to check</li> <li>passwordhash :: string : Password's hash value</li> <li>hashmethod :: string : Name of hash method</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: accounts</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/check_password_hash\n{\n  \"user\": \"peter\",\n  \"host\": \"myserver.com\",\n  \"passwordhash\": \"5ebe2294ecd0e0f08eab7690d2a6ee69\",\n  \"hashmethod\": \"md5\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#clear_cache","title":"clear_cache","text":"<p>Clear database cache on all nodes</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: server</p> <p>Examples:</p> <pre><code>POST /api/clear_cache\n{\n\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#compile","title":"compile","text":"<p>Recompile and reload Erlang source code file</p> <p>Arguments:</p> <ul> <li>file :: string : Filename of erlang source file to compile</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: erlang</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/compile\n{\n  \"file\": \"/home/me/srcs/ejabberd/mod_example.erl\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#connected_users","title":"connected_users","text":"<p>List all established sessions</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>connected_users :: [sessions::string] : List of users sessions full JID</li> </ul> <p>Tags: session</p> <p>Examples:</p> <pre><code>POST /api/connected_users\n{\n\n}\n\nHTTP/1.1 200 OK\n[\n  \"user1@example.com/Home\",\n  \"user2@example.com/54134\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#connected_users_info","title":"connected_users_info","text":"<p>List all established sessions and their information</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>connected_users_info :: [{jid::string, connection::string, ip::string, port::integer, priority::integer, node::string, uptime::integer, status::string, resource::string, statustext::string}]</li> </ul> <p>Tags: session</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/connected_users_info\n{\n\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"jid\": \"user1@myserver.com/tka\",\n    \"connection\": \"c2s\",\n    \"ip\": \"127.0.0.1\",\n    \"port\": 42656,\n    \"priority\": 8,\n    \"node\": \"ejabberd@localhost\",\n    \"uptime\": 231,\n    \"status\": \"dnd\",\n    \"resource\": \"tka\",\n    \"statustext\": \"\"\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#connected_users_number","title":"connected_users_number","text":"<p>Get the number of established sessions</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>num_sessions :: integer</li> </ul> <p>Tags: session, statistics</p> <p>Examples:</p> <pre><code>POST /api/connected_users_number\n{\n\n}\n\nHTTP/1.1 200 OK\n2\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#connected_users_vhost","title":"connected_users_vhost","text":"<p>Get the list of established sessions in a vhost</p> <p>Arguments:</p> <ul> <li>host :: string : Server name</li> </ul> <p>Result:</p> <ul> <li>connected_users_vhost :: [sessions::string] : List of sessions full JIDs</li> </ul> <p>Tags: session</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/connected_users_vhost\n{\n  \"host\": \"myexample.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  \"user1@myserver.com/tka\",\n  \"user2@localhost/tka\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#convert_to_scram","title":"convert_to_scram","text":"<p>Convert the passwords of users to SCRAM</p> <p>Arguments:</p> <ul> <li>host :: string : Vhost which users' passwords will be scrammed</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: sql</p> <p>Examples:</p> <pre><code>POST /api/convert_to_scram\n{\n  \"host\": \"example.com\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#convert_to_yaml","title":"convert_to_yaml","text":"<p>Convert the input file from Erlang to YAML format</p> <p>Arguments:</p> <ul> <li>in :: string : Full path to the original configuration file</li> <li>out :: string : And full path to final file</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: config</p> <p>Examples:</p> <pre><code>POST /api/convert_to_yaml\n{\n  \"in\": \"/etc/ejabberd/ejabberd.cfg\",\n  \"out\": \"/etc/ejabberd/ejabberd.yml\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#create_room","title":"create_room","text":"<p>Create a MUC room name@service in host</p> <p>Arguments:</p> <ul> <li>room :: string : Room name</li> <li>service :: string : MUC service</li> <li>host :: string : Server host</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: muc_room</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/create_room\n{\n  \"room\": \"room1\",\n  \"service\": \"conference.example.com\",\n  \"host\": \"example.com\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#create_room_with_opts","title":"create_room_with_opts","text":"<p> modified in 25.03</p> <p>Create a MUC room name@service in host with given options</p> <p>Options <code>affiliations</code> and <code>subscribers</code> are lists of tuples. The tuples in the list are separated with <code>;</code> and the elements in each tuple are separated with <code>=</code> (until ejabberd 24.12 the separators were <code>,</code> and <code>:</code> respectively). Each subscriber can have one or more nodes. In summary, <code>affiliations</code> is like <code>Type1=JID1;Type2=JID2</code> and <code>subscribers</code> is like <code>JID1=Nick1=Node1A=Node1B=Node1C;JID2=Nick2=Node2</code>.</p> <p>Arguments:</p> <ul> <li>room :: string : Room name</li> <li>service :: string : MUC service</li> <li>host :: string : Server host</li> <li>options :: [{name::string, value::string}] : List of options</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: muc_room, muc_sub</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/create_room_with_opts\n{\n  \"room\": \"room1\",\n  \"service\": \"conference.example.com\",\n  \"host\": \"localhost\",\n  \"options\": [\n    {\n      \"name\": \"members_only\",\n      \"value\": \"true\"\n    },\n    {\n      \"name\": \"affiliations\",\n      \"value\": \"owner=user1@localhost;member=user2@localhost\"\n    },\n    {\n      \"name\": \"subscribers\",\n      \"value\": \"user3@localhost=User3=messages=subject;user4@localhost=User4=messages\"\n    }\n  ]\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#create_rooms_file","title":"create_rooms_file","text":"<p> improved in 24.12</p> <p>Create the rooms indicated in file</p> <p>Provide one room JID per line. Rooms will be created after restart.</p> <p>Arguments:</p> <ul> <li>file :: string : Path to the text file with one room JID per line</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: muc</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/create_rooms_file\n{\n  \"file\": \"/home/ejabberd/rooms.txt\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#delete_expired_messages","title":"delete_expired_messages","text":"<p>Delete expired offline messages from database</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: offline, purge</p> <p>Examples:</p> <pre><code>POST /api/delete_expired_messages\n{\n\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#delete_expired_pubsub_items","title":"delete_expired_pubsub_items","text":"<p> added in 21.12</p> <p>Delete expired PubSub items</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: purge</p> <p>Module: mod_pubsub</p> <p>Examples:</p> <pre><code>POST /api/delete_expired_pubsub_items\n{\n\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#delete_mnesia","title":"delete_mnesia","text":"<p>Delete elements in Mnesia database for a given vhost</p> <p>Arguments:</p> <ul> <li>host :: string : Vhost which content will be deleted in Mnesia database</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/delete_mnesia\n{\n  \"host\": \"example.com\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#delete_old_mam_messages","title":"delete_old_mam_messages","text":"<p>Delete MAM messages older than DAYS</p> <p>Valid message TYPEs: <code>chat</code>, <code>groupchat</code>, <code>all</code>.</p> <p>Arguments:</p> <ul> <li>type :: string : Type of messages to delete (<code>chat</code>, <code>groupchat</code>, <code>all</code>)</li> <li>days :: integer : Days to keep messages</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: mam, purge</p> <p>Module: mod_mam</p> <p>Examples:</p> <pre><code>POST /api/delete_old_mam_messages\n{\n  \"type\": \"all\",\n  \"days\": 31\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#delete_old_mam_messages_batch","title":"delete_old_mam_messages_batch","text":"<p> added in 22.05</p> <p>Delete MAM messages older than DAYS</p> <p>Valid message TYPEs: <code>chat</code>, <code>groupchat</code>, <code>all</code>.</p> <p>Arguments:</p> <ul> <li>host :: string : Name of host where messages should be deleted</li> <li>type :: string : Type of messages to delete (<code>chat</code>, <code>groupchat</code>, <code>all</code>)</li> <li>days :: integer : Days to keep messages</li> <li>batch_size :: integer : Number of messages to delete per batch</li> <li>rate :: integer : Desired rate of messages to delete per minute</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: mam, purge</p> <p>Module: mod_mam</p> <p>Examples:</p> <pre><code>POST /api/delete_old_mam_messages_batch\n{\n  \"host\": \"localhost\",\n  \"type\": \"all\",\n  \"days\": 31,\n  \"batch_size\": 1000,\n  \"rate\": 10000\n}\n\nHTTP/1.1 200 OK\n\"Removal of 5000 messages in progress\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#delete_old_mam_messages_status","title":"delete_old_mam_messages_status","text":"<p> added in 22.05</p> <p>Status of delete old MAM messages operation</p> <p>Arguments:</p> <ul> <li>host :: string : Name of host where messages should be deleted</li> </ul> <p>Result:</p> <ul> <li>status :: string : Status test</li> </ul> <p>Tags: mam, purge</p> <p>Module: mod_mam</p> <p>Examples:</p> <pre><code>POST /api/delete_old_mam_messages_status\n{\n  \"host\": \"localhost\"\n}\n\nHTTP/1.1 200 OK\n\"Operation in progress, delete 5000 messages\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#delete_old_messages","title":"delete_old_messages","text":"<p>Delete offline messages older than DAYS</p> <p>Arguments:</p> <ul> <li>days :: integer : Number of days</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: offline, purge</p> <p>Examples:</p> <pre><code>POST /api/delete_old_messages\n{\n  \"days\": 31\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#delete_old_messages_batch","title":"delete_old_messages_batch","text":"<p> added in 22.05</p> <p>Delete offline messages older than DAYS</p> <p>Arguments:</p> <ul> <li>host :: string : Name of host where messages should be deleted</li> <li>days :: integer : Days to keep messages</li> <li>batch_size :: integer : Number of messages to delete per batch</li> <li>rate :: integer : Desired rate of messages to delete per minute</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: offline, purge</p> <p>Examples:</p> <pre><code>POST /api/delete_old_messages_batch\n{\n  \"host\": \"localhost\",\n  \"days\": 31,\n  \"batch_size\": 1000,\n  \"rate\": 10000\n}\n\nHTTP/1.1 200 OK\n\"Removal of 5000 messages in progress\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#delete_old_messages_status","title":"delete_old_messages_status","text":"<p> added in 22.05</p> <p>Status of delete old offline messages operation</p> <p>Arguments:</p> <ul> <li>host :: string : Name of host where messages should be deleted</li> </ul> <p>Result:</p> <ul> <li>status :: string : Status test</li> </ul> <p>Tags: offline, purge</p> <p>Examples:</p> <pre><code>POST /api/delete_old_messages_status\n{\n  \"host\": \"localhost\"\n}\n\nHTTP/1.1 200 OK\n\"Operation in progress, delete 5000 messages\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#delete_old_pubsub_items","title":"delete_old_pubsub_items","text":"<p> added in 21.12</p> <p>Keep only NUMBER of PubSub items per node</p> <p>Arguments:</p> <ul> <li>number :: integer : Number of items to keep per node</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: purge</p> <p>Module: mod_pubsub</p> <p>Examples:</p> <pre><code>POST /api/delete_old_pubsub_items\n{\n  \"number\": 1000\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#delete_old_push_sessions","title":"delete_old_push_sessions","text":"<p>Remove push sessions older than DAYS</p> <p>Arguments:</p> <ul> <li>days :: integer</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: purge</p> <p>Module: mod_push</p> <p>Examples:</p> <pre><code>POST /api/delete_old_push_sessions\n{\n  \"days\": 1\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#delete_old_users","title":"delete_old_users","text":"<p>Delete users that didn't log in last days, or that never logged</p> <p>To protect admin accounts, configure this for example: <pre><code>access_rules:\n  protect_old_users:\n    - allow: admin\n    - deny: all\n</code></pre></p> <p>Arguments:</p> <ul> <li>days :: integer : Last login age in days of accounts that should be removed</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: accounts, purge</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/delete_old_users\n{\n  \"days\": 30\n}\n\nHTTP/1.1 200 OK\n\"Deleted 2 users: [\"oldman@myserver.com\", \"test@myserver.com\"]\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#delete_old_users_vhost","title":"delete_old_users_vhost","text":"<p>Delete users that didn't log in last days in vhost, or that never logged</p> <p>To protect admin accounts, configure this for example: <pre><code>access_rules:\n  delete_old_users:\n    - deny: admin\n    - allow: all\n</code></pre></p> <p>Arguments:</p> <ul> <li>host :: string : Server name</li> <li>days :: integer : Last login age in days of accounts that should be removed</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: accounts, purge</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/delete_old_users_vhost\n{\n  \"host\": \"myserver.com\",\n  \"days\": 30\n}\n\nHTTP/1.1 200 OK\n\"Deleted 2 users: [\"oldman@myserver.com\", \"test@myserver.com\"]\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#delete_rosteritem","title":"delete_rosteritem","text":"<p>Delete an item from a user's roster (supports ODBC)</p> <p>Arguments:</p> <ul> <li>localuser :: string : User name</li> <li>localhost :: string : Server name</li> <li>user :: string : Contact user name</li> <li>host :: string : Contact server name</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: roster</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/delete_rosteritem\n{\n  \"localuser\": \"user1\",\n  \"localhost\": \"myserver.com\",\n  \"user\": \"user2\",\n  \"host\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#destroy_room","title":"destroy_room","text":"<p>Destroy a MUC room</p> <p>Arguments:</p> <ul> <li>room :: string : Room name</li> <li>service :: string : MUC service</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: muc_room</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/destroy_room\n{\n  \"room\": \"room1\",\n  \"service\": \"conference.example.com\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#destroy_rooms_file","title":"destroy_rooms_file","text":"<p>Destroy the rooms indicated in file</p> <p>Provide one room JID per line.</p> <p>Arguments:</p> <ul> <li>file :: string : Path to the text file with one room JID per line</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: muc</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/destroy_rooms_file\n{\n  \"file\": \"/home/ejabberd/rooms.txt\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#drop_from_spam_filter_cache","title":"drop_from_spam_filter_cache \ud83d\udfe4","text":"<p> added in 25.07</p> <p>Drop JID from spam filter cache</p> <p>Arguments:</p> <ul> <li>host :: string</li> <li>jid :: string</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: spam</p> <p>Module: mod_antispam</p> <p>Examples:</p> <pre><code>POST /api/drop_from_spam_filter_cache\n{\n  \"host\": \"aaaaa\",\n  \"jid\": \"bbbbb\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#dump","title":"dump","text":"<p>Dump the Mnesia database to a text file</p> <p>Arguments:</p> <ul> <li>file :: string : Full path for the text file</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/dump\n{\n  \"file\": \"/var/lib/ejabberd/database.txt\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#dump_config","title":"dump_config","text":"<p>Dump configuration in YAML format as seen by ejabberd</p> <p>Arguments:</p> <ul> <li>out :: string : Full path to output file</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: config</p> <p>Examples:</p> <pre><code>POST /api/dump_config\n{\n  \"out\": \"/tmp/ejabberd.yml\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#dump_table","title":"dump_table","text":"<p>Dump a Mnesia table to a text file</p> <p>Arguments:</p> <ul> <li>file :: string : Full path for the text file</li> <li>table :: string : Table name</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/dump_table\n{\n  \"file\": \"/var/lib/ejabberd/table-muc-registered.txt\",\n  \"table\": \"muc_registered\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#evacuate_kindly","title":"evacuate_kindly","text":"<p> added in 24.12</p> <p>Evacuate kindly all users (kick and prevent login)</p> <p>Inform users and rooms, don't allow login, wait, restart the server, and don't allow new logins. Provide the delay in seconds, and the announcement quoted, for example:  <code>ejabberdctl evacuate_kindly 60 \\\"The server will stop in one minute.\\\"</code></p> <p>Arguments:</p> <ul> <li>delay :: integer : Seconds to wait</li> <li>announcement :: string : Announcement to send, with quotes</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: server</p> <p>Examples:</p> <pre><code>POST /api/evacuate_kindly\n{\n  \"delay\": 60,\n  \"announcement\": \"Server will stop now.\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#expire_spam_filter_cache","title":"expire_spam_filter_cache \ud83d\udfe4","text":"<p> added in 25.07</p> <p>Remove old/unused spam JIDs from cache</p> <p>Arguments:</p> <ul> <li>host :: string</li> <li>seconds :: integer</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: spam</p> <p>Module: mod_antispam</p> <p>Examples:</p> <pre><code>POST /api/expire_spam_filter_cache\n{\n  \"host\": \"aaaaa\",\n  \"seconds\": 1\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#export2sql","title":"export2sql","text":"<p>Export virtual host information from Mnesia tables to SQL file</p> <p>Configure the modules to use SQL, then call this command. After correctly exported the database of a vhost, you may want to delete from mnesia with the delete_mnesia API.</p> <p>Arguments:</p> <ul> <li>host :: string : Vhost</li> <li>file :: string : Full path to the destination SQL file</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/export2sql\n{\n  \"host\": \"example.com\",\n  \"file\": \"/var/lib/ejabberd/example.com.sql\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#export_piefxis","title":"export_piefxis","text":"<p>Export data of all users in the server to PIEFXIS files (XEP-0227)</p> <p>Arguments:</p> <ul> <li>dir :: string : Full path to a directory</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/export_piefxis\n{\n  \"dir\": \"/var/lib/ejabberd/\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#export_piefxis_host","title":"export_piefxis_host","text":"<p>Export data of users in a host to PIEFXIS files (XEP-0227)</p> <p>Arguments:</p> <ul> <li>dir :: string : Full path to a directory</li> <li>host :: string : Vhost to export</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/export_piefxis_host\n{\n  \"dir\": \"/var/lib/ejabberd/\",\n  \"host\": \"example.com\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#gc","title":"gc","text":"<p> added in 20.01</p> <p>Force full garbage collection</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: server</p> <p>Examples:</p> <pre><code>POST /api/gc\n{\n\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#gen_html_doc_for_commands","title":"gen_html_doc_for_commands","text":"<p>Generates html documentation for ejabberd_commands</p> <p>Arguments:</p> <ul> <li>file :: string : Path to file where generated documentation should be stored</li> <li>regexp :: string : Regexp matching names of commands or modules that will be included inside generated document</li> <li>examples :: string : Comma separated list of languages (chosen from <code>java</code>, <code>perl</code>, <code>xmlrpc</code>, <code>json</code>) that will have example invocation include in markdown document</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: documentation</p> <p>Examples:</p> <pre><code>POST /api/gen_html_doc_for_commands\n{\n  \"file\": \"/home/me/docs/api.html\",\n  \"regexp\": \"mod_admin\",\n  \"examples\": \"java,json\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#gen_markdown_doc_for_commands","title":"gen_markdown_doc_for_commands","text":"<p>Generates markdown documentation for ejabberd_commands</p> <p>Arguments:</p> <ul> <li>file :: string : Path to file where generated documentation should be stored</li> <li>regexp :: string : Regexp matching names of commands or modules that will be included inside generated document, or <code>runtime</code> to get commands registered at runtime</li> <li>examples :: string : Comma separated list of languages (chosen from <code>java</code>, <code>perl</code>, <code>xmlrpc</code>, <code>json</code>) that will have example invocation include in markdown document</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: documentation</p> <p>Examples:</p> <pre><code>POST /api/gen_markdown_doc_for_commands\n{\n  \"file\": \"/home/me/docs/api.html\",\n  \"regexp\": \"mod_admin\",\n  \"examples\": \"java,json\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#gen_markdown_doc_for_tags","title":"gen_markdown_doc_for_tags","text":"<p> added in 21.12</p> <p>Generates markdown documentation for ejabberd_commands</p> <p>Arguments:</p> <ul> <li>file :: string : Path to file where generated documentation should be stored</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: documentation</p> <p>Examples:</p> <pre><code>POST /api/gen_markdown_doc_for_tags\n{\n  \"file\": \"/home/me/docs/tags.md\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_ban_details","title":"get_ban_details","text":"<p> added in 24.06</p> <p>Get ban details about an account</p> <p>Check ban_account API.</p> <p>Arguments:</p> <ul> <li>user :: string : User name to unban</li> <li>host :: string : Server name</li> </ul> <p>Result:</p> <ul> <li>ban_details :: [{name::string, value::string}]</li> </ul> <p>Tags: accounts, v2</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/get_ban_details\n{\n  \"user\": \"attacker\",\n  \"host\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"name\": \"reason\",\n    \"value\": \"Spamming other users\"\n  },\n  {\n    \"name\": \"bandate\",\n    \"value\": \"2024-04-22T09:16:47.975312Z\"\n  },\n  {\n    \"name\": \"lastdate\",\n    \"value\": \"2024-04-22T08:39:12Z\"\n  },\n  {\n    \"name\": \"lastreason\",\n    \"value\": \"Connection reset by peer\"\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_blocked_domains","title":"get_blocked_domains \ud83d\udfe4","text":"<p> added in 25.07</p> <p>Get list of domains being blocked</p> <p>Arguments:</p> <ul> <li>host :: string</li> </ul> <p>Result:</p> <ul> <li>blocked_domains :: [jid::string]</li> </ul> <p>Tags: spam</p> <p>Module: mod_antispam</p> <p>Examples:</p> <pre><code>POST /api/get_blocked_domains\n{\n  \"host\": \"aaaaa\"\n}\n\nHTTP/1.1 200 OK\n[\n  \"aaaaa\",\n  \"bbbbb\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_cookie","title":"get_cookie","text":"<p>Get the Erlang cookie of this node</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>cookie :: string : Erlang cookie used for authentication by ejabberd</li> </ul> <p>Tags: erlang</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/get_cookie\n{\n\n}\n\nHTTP/1.1 200 OK\n\"MWTAVMODFELNLSMYXPPD\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_last","title":"get_last","text":"<p>Get last activity information</p> <p>Timestamp is UTC and XEP-0082 format, for example: <code>2017-02-23T22:25:28.063062Z     ONLINE</code></p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> </ul> <p>Result:</p> <ul> <li>last_activity :: {timestamp::string, status::string} : Last activity timestamp and status</li> </ul> <p>Tags: last</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/get_last\n{\n  \"user\": \"user1\",\n  \"host\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n{\n  \"timestamp\": \"2017-06-30T14:32:16.060684Z\",\n  \"status\": \"ONLINE\"\n}\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_loglevel","title":"get_loglevel","text":"<p>Get the current loglevel</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>levelatom :: string : Tuple with the log level number, its keyword and description</li> </ul> <p>Tags: logs</p> <p>Examples:</p> <pre><code>POST /api/get_loglevel\n{\n\n}\n\nHTTP/1.1 200 OK\n\"warning\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_mam_count","title":"get_mam_count","text":"<p> added in 24.10</p> <p>Get number of MAM messages in a local user archive</p> <p>Arguments:</p> <ul> <li>user :: string</li> <li>host :: string</li> </ul> <p>Result:</p> <ul> <li>value :: integer : Number</li> </ul> <p>Tags: mam</p> <p>Module: mod_mam</p> <p>Examples:</p> <pre><code>POST /api/get_mam_count\n{\n  \"user\": \"aaaaa\",\n  \"host\": \"bbbbb\"\n}\n\nHTTP/1.1 200 OK\n5\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_master","title":"get_master","text":"<p> added in 24.06</p> <p>Get master node of the clustered Mnesia tables</p> <p>If there is no master, returns <code>none</code>.</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>nodename :: string</li> </ul> <p>Tags: cluster</p> <p>Examples:</p> <pre><code>POST /api/get_master\n{\n\n}\n\nHTTP/1.1 200 OK\n\"aaaaa\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_offline_count","title":"get_offline_count","text":"<p>Get the number of unread offline messages</p> <p>Arguments:</p> <ul> <li>user :: string</li> <li>host :: string</li> </ul> <p>Result:</p> <ul> <li>value :: integer : Number</li> </ul> <p>Tags: offline</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/get_offline_count\n{\n  \"user\": \"aaaaa\",\n  \"host\": \"bbbbb\"\n}\n\nHTTP/1.1 200 OK\n5\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_presence","title":"get_presence","text":"<p>Retrieve the resource with highest priority, and its presence (show and status message) for a given user.</p> <p>The <code>jid</code> value contains the user JID with resource.</p> <p>The <code>show</code> value contains the user presence flag. It can take limited values:</p> <ul> <li><code>available</code></li> <li><code>chat</code> (Free for chat)</li> <li><code>away</code></li> <li><code>dnd</code> (Do not disturb)</li> <li><code>xa</code> (Not available, extended away)</li> <li><code>unavailable</code> (Not connected)</li> </ul> <p><code>status</code> is a free text defined by the user client.</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> </ul> <p>Result:</p> <ul> <li>presence :: {jid::string, show::string, status::string}</li> </ul> <p>Tags: session</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/get_presence\n{\n  \"user\": \"peter\",\n  \"host\": \"myexample.com\"\n}\n\nHTTP/1.1 200 OK\n{\n  \"jid\": \"user1@myserver.com/tka\",\n  \"show\": \"dnd\",\n  \"status\": \"Busy\"\n}\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_room_affiliation","title":"get_room_affiliation","text":"<p>Get affiliation of a user in MUC room</p> <p>Arguments:</p> <ul> <li>room :: string : Room name</li> <li>service :: string : MUC service</li> <li>jid :: string : User JID</li> </ul> <p>Result:</p> <ul> <li>affiliation :: string : Affiliation of the user</li> </ul> <p>Tags: muc_room</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/get_room_affiliation\n{\n  \"room\": \"room1\",\n  \"service\": \"conference.example.com\",\n  \"jid\": \"user1@example.com\"\n}\n\nHTTP/1.1 200 OK\n\"member\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_room_affiliations","title":"get_room_affiliations","text":"<p> updated in 24.12</p> <p>Get the list of affiliations of a MUC room</p> <p>Arguments:</p> <ul> <li>room :: string : Room name</li> <li>service :: string : MUC service</li> </ul> <p>Result:</p> <ul> <li>affiliations :: [{jid::string, affiliation::string, reason::string}] : The list of affiliations with jid, affiliation and reason</li> </ul> <p>Tags: muc_room, v3</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/get_room_affiliations\n{\n  \"room\": \"room1\",\n  \"service\": \"conference.example.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"jid\": \"user1@example.com\",\n    \"affiliation\": \"member\",\n    \"reason\": \"member\"\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_room_history","title":"get_room_history","text":"<p> added in 23.04</p> <p>Get history of messages stored inside MUC room state</p> <p>Arguments:</p> <ul> <li>room :: string : Room name</li> <li>service :: string : MUC service</li> </ul> <p>Result:</p> <ul> <li>history :: [{timestamp::string, message::string}]</li> </ul> <p>Tags: muc_room</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/get_room_history\n{\n  \"room\": \"room1\",\n  \"service\": \"conference.example.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"timestamp\": \"aaaaa\",\n    \"message\": \"bbbbb\"\n  },\n  {\n    \"timestamp\": \"ccccc\",\n    \"message\": \"ddddd\"\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_room_occupants","title":"get_room_occupants","text":"<p>Get the list of occupants of a MUC room</p> <p>Arguments:</p> <ul> <li>room :: string : Room name</li> <li>service :: string : MUC service</li> </ul> <p>Result:</p> <ul> <li>occupants :: [{jid::string, nick::string, role::string}] : The list of occupants with JID, nick and affiliation</li> </ul> <p>Tags: muc_room</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/get_room_occupants\n{\n  \"room\": \"room1\",\n  \"service\": \"conference.example.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"jid\": \"user1@example.com/psi\",\n    \"nick\": \"User 1\",\n    \"role\": \"owner\"\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_room_occupants_number","title":"get_room_occupants_number","text":"<p>Get the number of occupants of a MUC room</p> <p>Arguments:</p> <ul> <li>room :: string : Room name</li> <li>service :: string : MUC service</li> </ul> <p>Result:</p> <ul> <li>occupants :: integer : Number of room occupants</li> </ul> <p>Tags: muc_room</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/get_room_occupants_number\n{\n  \"room\": \"room1\",\n  \"service\": \"conference.example.com\"\n}\n\nHTTP/1.1 200 OK\n7\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_room_options","title":"get_room_options","text":"<p>Get options from a MUC room</p> <p>Arguments:</p> <ul> <li>room :: string : Room name</li> <li>service :: string : MUC service</li> </ul> <p>Result:</p> <ul> <li>options :: [{name::string, value::string}] : List of room options tuples with name and value</li> </ul> <p>Tags: muc_room</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/get_room_options\n{\n  \"room\": \"room1\",\n  \"service\": \"conference.example.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"name\": \"members_only\",\n    \"value\": \"true\"\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_roster","title":"get_roster","text":"<p> improved in 23.10</p> <p>Get list of contacts in a local user roster</p> <p><code>subscription</code> can be: <code>none</code>, <code>from</code>, <code>to</code>, <code>both</code>.</p> <p><code>pending</code> can be: <code>in</code>, <code>out</code>, <code>none</code>.</p> <p>Arguments:</p> <ul> <li>user :: string</li> <li>host :: string</li> </ul> <p>Result:</p> <ul> <li>contacts :: [{jid::string, nick::string, subscription::string, pending::string, groups::[group::string]}]</li> </ul> <p>Tags: roster</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/get_roster\n{\n  \"user\": \"aaaaa\",\n  \"host\": \"bbbbb\"\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"jid\": \"user2@localhost\",\n    \"nick\": \"User 2\",\n    \"subscription\": \"none\",\n    \"pending\": \"subscribe\",\n    \"groups\": [\n      \"Group1\"\n    ]\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_roster_count","title":"get_roster_count","text":"<p> added in 24.06</p> <p>Get number of contacts in a local user roster</p> <p>Arguments:</p> <ul> <li>user :: string</li> <li>host :: string</li> </ul> <p>Result:</p> <ul> <li>value :: integer : Number</li> </ul> <p>Tags: roster</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/get_roster_count\n{\n  \"user\": \"aaaaa\",\n  \"host\": \"bbbbb\"\n}\n\nHTTP/1.1 200 OK\n5\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_spam_filter_cache","title":"get_spam_filter_cache \ud83d\udfe4","text":"<p> added in 25.07</p> <p>Show spam filter cache contents</p> <p>Arguments:</p> <ul> <li>host :: string</li> </ul> <p>Result:</p> <ul> <li>spammers :: [{jid::string, timestamp::integer}]</li> </ul> <p>Tags: spam</p> <p>Module: mod_antispam</p> <p>Examples:</p> <pre><code>POST /api/get_spam_filter_cache\n{\n  \"host\": \"aaaaa\"\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"jid\": \"aaaaa\",\n    \"timestamp\": 1\n  },\n  {\n    \"jid\": \"bbbbb\",\n    \"timestamp\": 2\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_subscribers","title":"get_subscribers","text":"<p>List subscribers of a MUC conference</p> <p>Arguments:</p> <ul> <li>room :: string : Room name</li> <li>service :: string : MUC service</li> </ul> <p>Result:</p> <ul> <li>subscribers :: [jid::string] : The list of users that are subscribed to that room</li> </ul> <p>Tags: muc_room, muc_sub</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/get_subscribers\n{\n  \"room\": \"room1\",\n  \"service\": \"conference.example.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  \"user2@example.com\",\n  \"user3@example.com\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_user_rooms","title":"get_user_rooms","text":"<p>Get the list of rooms where this user is occupant</p> <p>Arguments:</p> <ul> <li>user :: string : Username</li> <li>host :: string : Server host</li> </ul> <p>Result:</p> <ul> <li>rooms :: [room::string]</li> </ul> <p>Tags: muc</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/get_user_rooms\n{\n  \"user\": \"tom\",\n  \"host\": \"example.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  \"room1@conference.example.com\",\n  \"room2@conference.example.com\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_user_subscriptions","title":"get_user_subscriptions","text":"<p> added in 21.04</p> <p>Get the list of rooms where this user is subscribed</p> <p>Arguments:</p> <ul> <li>user :: string : Username</li> <li>host :: string : Server host</li> </ul> <p>Result:</p> <ul> <li>rooms :: [{roomjid::string, usernick::string, nodes::[node::string]}]</li> </ul> <p>Tags: muc, muc_sub</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/get_user_subscriptions\n{\n  \"user\": \"tom\",\n  \"host\": \"example.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"roomjid\": \"room1@conference.example.com\",\n    \"usernick\": \"Tommy\",\n    \"nodes\": [\n      \"mucsub:config\"\n    ]\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_vcard","title":"get_vcard","text":"<p>Get content from a vCard field</p> <p>Some vcard field names in <code>get</code>/<code>set_vcard</code> are:</p> <ul> <li>FN           - Full Name</li> <li>NICKNAME     - Nickname</li> <li>BDAY         - Birthday</li> <li>TITLE        - Work: Position</li> <li>ROLE         - Work: Role</li> </ul> <p>For a full list of vCard fields check XEP-0054: vcard-temp</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> <li>name :: string : Field name</li> </ul> <p>Result:</p> <ul> <li>content :: string : Field content</li> </ul> <p>Tags: vcard</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/get_vcard\n{\n  \"user\": \"user1\",\n  \"host\": \"myserver.com\",\n  \"name\": \"NICKNAME\"\n}\n\nHTTP/1.1 200 OK\n\"User 1\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_vcard2","title":"get_vcard2","text":"<p>Get content from a vCard subfield</p> <p>Some vcard field names and subnames in <code>get</code>/<code>set_vcard2</code> are:</p> <ul> <li>N FAMILY     - Family name</li> <li>N GIVEN      - Given name</li> <li>N MIDDLE     - Middle name</li> <li>ADR CTRY     - Address: Country</li> <li>ADR LOCALITY - Address: City</li> <li>TEL HOME     - Telephone: Home</li> <li>TEL CELL     - Telephone: Cellphone</li> <li>TEL WORK     - Telephone: Work</li> <li>TEL VOICE    - Telephone: Voice</li> <li>EMAIL USERID - E-Mail Address</li> <li>ORG ORGNAME  - Work: Company</li> <li>ORG ORGUNIT  - Work: Department</li> </ul> <p>For a full list of vCard fields check XEP-0054: vcard-temp</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> <li>name :: string : Field name</li> <li>subname :: string : Subfield name</li> </ul> <p>Result:</p> <ul> <li>content :: string : Field content</li> </ul> <p>Tags: vcard</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/get_vcard2\n{\n  \"user\": \"user1\",\n  \"host\": \"myserver.com\",\n  \"name\": \"N\",\n  \"subname\": \"FAMILY\"\n}\n\nHTTP/1.1 200 OK\n\"Schubert\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#get_vcard2_multi","title":"get_vcard2_multi","text":"<p>Get multiple contents from a vCard field</p> <p>Some vcard field names and subnames in <code>get</code>/<code>set_vcard2</code> are:</p> <ul> <li>N FAMILY     - Family name</li> <li>N GIVEN      - Given name</li> <li>N MIDDLE     - Middle name</li> <li>ADR CTRY     - Address: Country</li> <li>ADR LOCALITY - Address: City</li> <li>TEL HOME     - Telephone: Home</li> <li>TEL CELL     - Telephone: Cellphone</li> <li>TEL WORK     - Telephone: Work</li> <li>TEL VOICE    - Telephone: Voice</li> <li>EMAIL USERID - E-Mail Address</li> <li>ORG ORGNAME  - Work: Company</li> <li>ORG ORGUNIT  - Work: Department</li> </ul> <p>For a full list of vCard fields check XEP-0054: vcard-temp</p> <p>Arguments:</p> <ul> <li>user :: string</li> <li>host :: string</li> <li>name :: string</li> <li>subname :: string</li> </ul> <p>Result:</p> <ul> <li>contents :: [value::string]</li> </ul> <p>Tags: vcard</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/get_vcard2_multi\n{\n  \"user\": \"aaaaa\",\n  \"host\": \"bbbbb\",\n  \"name\": \"ccccc\",\n  \"subname\": \"ddddd\"\n}\n\nHTTP/1.1 200 OK\n[\n  \"aaaaa\",\n  \"bbbbb\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#halt","title":"halt","text":"<p> added in 23.10</p> <p>Halt ejabberd abruptly with status code 1</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: server</p> <p>Examples:</p> <pre><code>POST /api/halt\n{\n\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#help","title":"help","text":"<p>Get list of commands, or help of a command (only ejabberdctl)</p> <p>This command is exclusive for the ejabberdctl command-line script, don't attempt to execute it using any other API frontend.</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: ejabberdctl</p> <p>Examples:</p> <pre><code>POST /api/help\n{\n\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#import_dir","title":"import_dir","text":"<p>Import users data from jabberd14 spool dir</p> <p>Arguments:</p> <ul> <li>file :: string : Full path to the jabberd14 spool directory</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/import_dir\n{\n  \"file\": \"/var/lib/ejabberd/jabberd14/\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#import_file","title":"import_file","text":"<p>Import user data from jabberd14 spool file</p> <p>Arguments:</p> <ul> <li>file :: string : Full path to the jabberd14 spool file</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/import_file\n{\n  \"file\": \"/var/lib/ejabberd/jabberd14.spool\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#import_piefxis","title":"import_piefxis","text":"<p>Import users data from a PIEFXIS file (XEP-0227)</p> <p>Arguments:</p> <ul> <li>file :: string : Full path to the PIEFXIS file</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/import_piefxis\n{\n  \"file\": \"/var/lib/ejabberd/example.com.xml\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#import_prosody","title":"import_prosody","text":"<p>Import data from Prosody</p> <p>Note: this requires ejabberd to be compiled with <code>./configure --enable-lua</code> (which installs the <code>luerl</code> library).</p> <p>Arguments:</p> <ul> <li>dir :: string : Full path to the Prosody data directory</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: mnesia, sql</p> <p>Examples:</p> <pre><code>POST /api/import_prosody\n{\n  \"dir\": \"/var/lib/prosody/datadump/\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#incoming_s2s_number","title":"incoming_s2s_number","text":"<p>Number of incoming s2s connections on the node</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>s2s_incoming :: integer</li> </ul> <p>Tags: statistics, s2s</p> <p>Examples:</p> <pre><code>POST /api/incoming_s2s_number\n{\n\n}\n\nHTTP/1.1 200 OK\n1\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#install_fallback","title":"install_fallback","text":"<p>Install Mnesia database from a binary backup file</p> <p>The binary backup file is installed as fallback: it will be used to restore the database at the next ejabberd start. This means that, after running this command, you have to restart ejabberd. This command requires less memory than restore API.</p> <p>Arguments:</p> <ul> <li>file :: string : Full path to the fallback file</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/install_fallback\n{\n  \"file\": \"/var/lib/ejabberd/database.fallback\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#join_cluster","title":"join_cluster","text":"<p> improved in 24.06</p> <p>Join our local node into the cluster handled by Node</p> <p>This command returns immediately,             even before the joining process has             completed. Consequently, if you are using             <code>ejabberdctl</code> (or some <code>CTL_ON_</code> container             environment variables) to run more commands             afterwards, you may want to precede them with             the started command to ensure the             clustering process has completed before             proceeding. For example: <code>join_cluster             ejabberd@main</code> &gt; <code>started</code> &gt; <code>list_cluster</code>.</p> <p>Arguments:</p> <ul> <li>node :: string : Nodename of the node to join</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: cluster</p> <p>Examples:</p> <pre><code>POST /api/join_cluster\n{\n  \"node\": \"ejabberd1@machine7\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#join_cluster_here","title":"join_cluster_here","text":"<p> added in 24.06</p> <p>Join a remote Node here, into our cluster</p> <p>Arguments:</p> <ul> <li>node :: string : Nodename of the node to join here</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: cluster</p> <p>Examples:</p> <pre><code>POST /api/join_cluster_here\n{\n  \"node\": \"ejabberd1@machine7\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#kick_session","title":"kick_session","text":"<p>Kick a user session</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> <li>resource :: string : User's resource</li> <li>reason :: string : Reason for closing session</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: session</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/kick_session\n{\n  \"user\": \"peter\",\n  \"host\": \"myserver.com\",\n  \"resource\": \"Psi\",\n  \"reason\": \"Stuck connection\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#kick_user","title":"kick_user","text":"<p> modified in 24.06</p> <p>Disconnect user's active sessions</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: session, v2</p> <p>Examples:</p> <pre><code>POST /api/kick_user\n{\n  \"user\": \"user1\",\n  \"host\": \"example.com\"\n}\n\nHTTP/1.1 200 OK\n\"Kicked sessions: 2\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#kick_users","title":"kick_users","text":"<p> added in 25.04</p> <p>Disconnect all given host users' active sessions</p> <p>Arguments:</p> <ul> <li>host :: string : Server name</li> </ul> <p>Result:</p> <ul> <li>num_sessions :: integer : Number of sessions that were kicked</li> </ul> <p>Tags: session</p> <p>Examples:</p> <pre><code>POST /api/kick_users\n{\n  \"host\": \"example.com\"\n}\n\nHTTP/1.1 200 OK\n3\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#leave_cluster","title":"leave_cluster","text":"<p>Remove and shutdown Node from the running cluster</p> <p>This command can be run from any running node of the cluster, even the node to be removed. In the removed node, this command works only when using ejabberdctl, not mod_http_api or other code that runs inside the same ejabberd node that will leave.</p> <p>Arguments:</p> <ul> <li>node :: string : Nodename of the node to kick from the cluster</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: cluster</p> <p>Examples:</p> <pre><code>POST /api/leave_cluster\n{\n  \"node\": \"ejabberd1@machine8\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#list_certificates","title":"list_certificates","text":"<p>Lists all ACME certificates</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>certificates :: [{domain::string, file::string, used::string}]</li> </ul> <p>Tags: acme</p> <p>Examples:</p> <pre><code>POST /api/list_certificates\n{\n\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"domain\": \"aaaaa\",\n    \"file\": \"bbbbb\",\n    \"used\": \"ccccc\"\n  },\n  {\n    \"domain\": \"ddddd\",\n    \"file\": \"eeeee\",\n    \"used\": \"fffff\"\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#list_cluster","title":"list_cluster","text":"<p>List running nodes that are part of this cluster</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>nodes :: [node::string]</li> </ul> <p>Tags: cluster</p> <p>Examples:</p> <pre><code>POST /api/list_cluster\n{\n\n}\n\nHTTP/1.1 200 OK\n[\n  \"ejabberd1@machine7\",\n  \"ejabberd1@machine8\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#list_cluster_detailed","title":"list_cluster_detailed","text":"<p> added in 24.06</p> <p>List nodes (both running and known) and some stats</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>nodes :: [{name::string, running::string, status::string, online_users::integer, processes::integer, uptime_seconds::integer, master_node::string}]</li> </ul> <p>Tags: cluster</p> <p>Examples:</p> <pre><code>POST /api/list_cluster_detailed\n{\n\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"name\": \"ejabberd@localhost\",\n    \"running\": \"true\",\n    \"status\": \"The node ejabberd is started. Status...\",\n    \"online_users\": 7,\n    \"processes\": 348,\n    \"uptime_seconds\": 60,\n    \"master_node\": \"none\"\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#load","title":"load","text":"<p>Restore Mnesia database from a text dump file</p> <p>Restore immediately. This is not recommended for big databases, as it will consume much time, memory and processor. In that case it's preferable to use backup API and install_fallback API.</p> <p>Arguments:</p> <ul> <li>file :: string : Full path to the text file</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/load\n{\n  \"file\": \"/var/lib/ejabberd/database.txt\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#man","title":"man","text":"<p> added in 20.01</p> <p>Generate Unix manpage for current ejabberd version</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: documentation</p> <p>Examples:</p> <pre><code>POST /api/man\n{\n\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#mnesia_change_nodename","title":"mnesia_change_nodename","text":"<p>Change the erlang node name in a backup file</p> <p>Arguments:</p> <ul> <li>oldnodename :: string : Name of the old erlang node</li> <li>newnodename :: string : Name of the new node</li> <li>oldbackup :: string : Path to old backup file</li> <li>newbackup :: string : Path to the new backup file</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/mnesia_change_nodename\n{\n  \"oldnodename\": \"ejabberd@machine1\",\n  \"newnodename\": \"ejabberd@machine2\",\n  \"oldbackup\": \"/var/lib/ejabberd/old.backup\",\n  \"newbackup\": \"/var/lib/ejabberd/new.backup\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#mnesia_info","title":"mnesia_info","text":"<p>Dump info on global Mnesia state</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: string</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/mnesia_info\n{\n\n}\n\nHTTP/1.1 200 OK\n\"aaaaa\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#mnesia_info_ctl","title":"mnesia_info_ctl","text":"<p> renamed in 24.02</p> <p>Show information of Mnesia system (only ejabberdctl)</p> <p>This command is exclusive for the ejabberdctl command-line script, don't attempt to execute it using any other API frontend.</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: ejabberdctl, mnesia</p> <p>Examples:</p> <pre><code>POST /api/mnesia_info_ctl\n{\n\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#mnesia_list_tables","title":"mnesia_list_tables","text":"<p> added in 25.03</p> <p>List of Mnesia tables</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>tables :: [{name::string, storage_type::string, elements::integer, memory_kb::integer, memory_mb::integer}]</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/mnesia_list_tables\n{\n\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"name\": \"aaaaa\",\n    \"storage_type\": \"bbbbb\",\n    \"elements\": 1,\n    \"memory_kb\": 2,\n    \"memory_mb\": 3\n  },\n  {\n    \"name\": \"ccccc\",\n    \"storage_type\": \"ddddd\",\n    \"elements\": 4,\n    \"memory_kb\": 5,\n    \"memory_mb\": 6\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#mnesia_table_change_storage","title":"mnesia_table_change_storage","text":"<p> added in 25.03</p> <p>Change storage type of a Mnesia table</p> <p>Storage type can be: <code>ram_copies</code>, <code>disc_copies</code>, <code>disc_only_copies</code>, <code>remote_copy</code>.</p> <p>Arguments:</p> <ul> <li>table :: string</li> <li>storage_type :: string</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/mnesia_table_change_storage\n{\n  \"table\": \"aaaaa\",\n  \"storage_type\": \"bbbbb\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#mnesia_table_info","title":"mnesia_table_info","text":"<p>Dump info on Mnesia table state</p> <p>Arguments:</p> <ul> <li>table :: string : Mnesia table name</li> </ul> <p>Result:</p> <ul> <li>res :: string</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/mnesia_table_info\n{\n  \"table\": \"roster\"\n}\n\nHTTP/1.1 200 OK\n\"aaaaa\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#module_check","title":"module_check","text":"<p>Check the contributed module repository compliance</p> <p>Arguments:</p> <ul> <li>module :: string : Module name</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: modules</p> <p>Examples:</p> <pre><code>POST /api/module_check\n{\n  \"module\": \"mod_rest\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#module_install","title":"module_install","text":"<p>Compile, install and start an available contributed module</p> <p>Arguments:</p> <ul> <li>module :: string : Module name</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: modules</p> <p>Examples:</p> <pre><code>POST /api/module_install\n{\n  \"module\": \"mod_rest\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#module_uninstall","title":"module_uninstall","text":"<p>Uninstall a contributed module</p> <p>Arguments:</p> <ul> <li>module :: string : Module name</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: modules</p> <p>Examples:</p> <pre><code>POST /api/module_uninstall\n{\n  \"module\": \"mod_rest\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#module_upgrade","title":"module_upgrade \ud83d\udfe4","text":"<p> improved in 25.07</p> <p>Upgrade the running code of an installed module</p> <p>In practice, this uninstalls, cleans the compiled files, and installs the module</p> <p>Arguments:</p> <ul> <li>module :: string : Module name</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: modules</p> <p>Examples:</p> <pre><code>POST /api/module_upgrade\n{\n  \"module\": \"mod_rest\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#modules_available","title":"modules_available","text":"<p>List the contributed modules available to install</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>modules :: [{name::string, summary::string}] : List of tuples with module name and description</li> </ul> <p>Tags: modules</p> <p>Examples:</p> <pre><code>POST /api/modules_available\n{\n\n}\n\nHTTP/1.1 200 OK\n{\n  \"mod_cron\": \"Execute scheduled commands\",\n  \"mod_rest\": \"ReST frontend\"\n}\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#modules_installed","title":"modules_installed","text":"<p>List the contributed modules already installed</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>modules :: [{name::string, summary::string}] : List of tuples with module name and description</li> </ul> <p>Tags: modules</p> <p>Examples:</p> <pre><code>POST /api/modules_installed\n{\n\n}\n\nHTTP/1.1 200 OK\n{\n  \"mod_cron\": \"Execute scheduled commands\",\n  \"mod_rest\": \"ReST frontend\"\n}\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#modules_update_specs","title":"modules_update_specs","text":"<p>Update the module source code from Git</p> <p>A connection to Internet is required</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: modules</p> <p>Examples:</p> <pre><code>POST /api/modules_update_specs\n{\n\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#muc_online_rooms","title":"muc_online_rooms","text":"<p>List existing rooms</p> <p>Ask for a specific host, or <code>global</code> to use all vhosts.</p> <p>Arguments:</p> <ul> <li>service :: string : MUC service, or <code>global</code> for all</li> </ul> <p>Result:</p> <ul> <li>rooms :: [room::string] : List of rooms JIDs</li> </ul> <p>Tags: muc</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/muc_online_rooms\n{\n  \"service\": \"conference.example.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  \"room1@conference.example.com\",\n  \"room2@conference.example.com\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#muc_online_rooms_by_regex","title":"muc_online_rooms_by_regex","text":"<p>List existing rooms filtered by regexp</p> <p>Ask for a specific host, or <code>global</code> to use all vhosts.</p> <p>Arguments:</p> <ul> <li>service :: string : MUC service, or <code>global</code> for all</li> <li>regex :: string : Regex pattern for room name</li> </ul> <p>Result:</p> <ul> <li>rooms :: [{jid::string, public::string, participants::integer}] : List of rooms with summary</li> </ul> <p>Tags: muc</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/muc_online_rooms_by_regex\n{\n  \"service\": \"conference.example.com\",\n  \"regex\": \"^prefix\"\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"jid\": \"room1@conference.example.com\",\n    \"public\": \"true\",\n    \"participants\": 10\n  },\n  {\n    \"jid\": \"room2@conference.example.com\",\n    \"public\": \"false\",\n    \"participants\": 10\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#muc_register_nick","title":"muc_register_nick","text":"<p> updated in 24.12</p> <p>Register a nick to a User JID in a MUC service</p> <p>Arguments:</p> <ul> <li>nick :: string : nick</li> <li>user :: string : user name</li> <li>host :: string : user host</li> <li>service :: string : MUC service</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: muc, v3</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/muc_register_nick\n{\n  \"nick\": \"Tim\",\n  \"user\": \"tim\",\n  \"host\": \"example.org\",\n  \"service\": \"conference.example.org\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#muc_unregister_nick","title":"muc_unregister_nick","text":"<p> updated in 24.12</p> <p>Unregister the nick registered by that account in the MUC service</p> <p>Arguments:</p> <ul> <li>user :: string : user name</li> <li>host :: string : user host</li> <li>service :: string : MUC service</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: muc, v3</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/muc_unregister_nick\n{\n  \"user\": \"tim\",\n  \"host\": \"example.org\",\n  \"service\": \"conference.example.org\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#num_resources","title":"num_resources","text":"<p>Get the number of resources of a user</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> </ul> <p>Result:</p> <ul> <li>resources :: integer : Number of active resources for a user</li> </ul> <p>Tags: session</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/num_resources\n{\n  \"user\": \"peter\",\n  \"host\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n5\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#oauth_add_client_implicit","title":"oauth_add_client_implicit","text":"<p>Add OAuth client_id with implicit grant type</p> <p>Arguments:</p> <ul> <li>client_id :: string</li> <li>client_name :: string</li> <li>redirect_uri :: string</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: oauth</p> <p>Examples:</p> <pre><code>POST /api/oauth_add_client_implicit\n{\n  \"client_id\": \"aaaaa\",\n  \"client_name\": \"bbbbb\",\n  \"redirect_uri\": \"ccccc\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#oauth_add_client_password","title":"oauth_add_client_password","text":"<p>Add OAuth client_id with password grant type</p> <p>Arguments:</p> <ul> <li>client_id :: string</li> <li>client_name :: string</li> <li>secret :: string</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: oauth</p> <p>Examples:</p> <pre><code>POST /api/oauth_add_client_password\n{\n  \"client_id\": \"aaaaa\",\n  \"client_name\": \"bbbbb\",\n  \"secret\": \"ccccc\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#oauth_issue_token","title":"oauth_issue_token","text":"<p> updated in 24.02</p> <p>Issue an OAuth token for the given jid</p> <p>Arguments:</p> <ul> <li>jid :: string : Jid for which issue token</li> <li>ttl :: integer : Time to live of generated token in seconds</li> <li>scopes :: [scope::string] : List of scopes to allow</li> </ul> <p>Result:</p> <ul> <li>result :: {token::string, scopes::[scope::string], expires_in::string}</li> </ul> <p>Tags: oauth, v1</p> <p>Examples:</p> <pre><code>POST /api/oauth_issue_token\n{\n  \"jid\": \"user@server.com\",\n  \"ttl\": 3600,\n  \"scopes\": [\n    \"connected_users_number\",\n    \"muc_online_rooms\"\n  ]\n}\n\nHTTP/1.1 200 OK\n{\n  \"token\": \"aaaaa\",\n  \"scopes\": [\n    \"bbbbb\",\n    \"ccccc\"\n  ],\n  \"expires_in\": \"ddddd\"\n}\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#oauth_list_tokens","title":"oauth_list_tokens","text":"<p>List OAuth tokens, user, scope, and seconds to expire (only Mnesia)</p> <p>List  OAuth tokens, their user and scope, and how many seconds remain until expiry</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>tokens :: [{token::string, user::string, scope::string, expires_in::string}]</li> </ul> <p>Tags: oauth</p> <p>Examples:</p> <pre><code>POST /api/oauth_list_tokens\n{\n\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"token\": \"aaaaa\",\n    \"user\": \"bbbbb\",\n    \"scope\": \"ccccc\",\n    \"expires_in\": \"ddddd\"\n  },\n  {\n    \"token\": \"eeeee\",\n    \"user\": \"fffff\",\n    \"scope\": \"ggggg\",\n    \"expires_in\": \"hhhhh\"\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#oauth_remove_client","title":"oauth_remove_client","text":"<p>Remove OAuth client_id</p> <p>Arguments:</p> <ul> <li>client_id :: string</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: oauth</p> <p>Examples:</p> <pre><code>POST /api/oauth_remove_client\n{\n  \"client_id\": \"aaaaa\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#oauth_revoke_token","title":"oauth_revoke_token","text":"<p> changed in 22.05</p> <p>Revoke authorization for an OAuth token</p> <p>Arguments:</p> <ul> <li>token :: string</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: oauth</p> <p>Examples:</p> <pre><code>POST /api/oauth_revoke_token\n{\n  \"token\": \"aaaaa\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#outgoing_s2s_number","title":"outgoing_s2s_number","text":"<p>Number of outgoing s2s connections on the node</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>s2s_outgoing :: integer</li> </ul> <p>Tags: statistics, s2s</p> <p>Examples:</p> <pre><code>POST /api/outgoing_s2s_number\n{\n\n}\n\nHTTP/1.1 200 OK\n1\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#print_sql_schema","title":"print_sql_schema","text":"<p> added in 24.02</p> <p>Print SQL schema for the given RDBMS (only ejabberdctl)</p> <p>This command is exclusive for the ejabberdctl command-line script, don't attempt to execute it using any other API frontend.</p> <p>Arguments:</p> <ul> <li>db_type :: string : Database type: pgsql | mysql | sqlite</li> <li>db_version :: string : Your database version: 16.1, 8.2.0...</li> <li>new_schema :: string : Use new schema: 0, false, 1 or true</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: ejabberdctl, sql</p> <p>Examples:</p> <pre><code>POST /api/print_sql_schema\n{\n  \"db_type\": \"pgsql\",\n  \"db_version\": \"16.1\",\n  \"new_schema\": \"true\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#privacy_set","title":"privacy_set","text":"<p>Send a IQ set privacy stanza for a local account</p> <p>Arguments:</p> <ul> <li>user :: string : Username</li> <li>host :: string : Server name</li> <li>xmlquery :: string : Query XML element</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: stanza</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/privacy_set\n{\n  \"user\": \"user1\",\n  \"host\": \"myserver.com\",\n  \"xmlquery\": \"&lt;query xmlns='jabber:iq:privacy'&gt;...\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#private_get","title":"private_get","text":"<p>Get some information from a user private storage</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> <li>element :: string : Element name</li> <li>ns :: string : Namespace</li> </ul> <p>Result:</p> <ul> <li>res :: string</li> </ul> <p>Tags: private</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/private_get\n{\n  \"user\": \"user1\",\n  \"host\": \"myserver.com\",\n  \"element\": \"storage\",\n  \"ns\": \"storage:rosternotes\"\n}\n\nHTTP/1.1 200 OK\n\"aaaaa\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#private_set","title":"private_set","text":"<p>Set to the user private storage</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> <li>element :: string : XML storage element</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: private</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/private_set\n{\n  \"user\": \"user1\",\n  \"host\": \"myserver.com\",\n  \"element\": \"&lt;storage xmlns='storage:rosternotes'/&gt;\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#process_rosteritems","title":"process_rosteritems","text":"<p>List/delete rosteritems that match filter</p> <p>Explanation of each argument:</p> <ul> <li><code>action</code>: what to do with each rosteritem that matches all the filtering options</li> <li><code>subs</code>: subscription type</li> <li><code>asks</code>: pending subscription</li> <li><code>users</code>: the JIDs of the local user</li> <li><code>contacts</code>: the JIDs of the contact in the roster</li> </ul> <p>Mnesia backend:</p> <p>Allowed values in the arguments:</p> <ul> <li><code>action</code> = <code>list</code> | <code>delete</code></li> <li><code>subs</code> = <code>any</code> | SUB[:SUB]*</li> <li><code>asks</code> = <code>any</code> | ASK[:ASK]*</li> <li><code>users</code> = <code>any</code> | JID[:JID]*</li> <li><code>contacts</code> = <code>any</code> | JID[:JID]*</li> </ul> <p>where</p> <ul> <li>SUB = <code>none</code> | <code>from</code>| <code>to</code> | <code>both</code></li> <li>ASK = <code>none</code> | <code>out</code> | <code>in</code></li> <li>JID = characters valid in a JID, and can use the globs: <code>*</code>, <code>?</code>, <code>!</code> and <code>[...]</code></li> </ul> <p>This example will list roster items with subscription <code>none</code>, <code>from</code> or <code>to</code> that have any ask property, of local users which JID is in the virtual host <code>example.org</code> and that the contact JID is either a bare server name (without user part) or that has a user part and the server part contains the word <code>icq</code>:   <code>list none:from:to any *@example.org *:*@*icq*</code></p> <p>SQL backend:</p> <p>Allowed values in the arguments:</p> <ul> <li><code>action</code> = <code>list</code> | <code>delete</code></li> <li><code>subs</code> = <code>any</code> | SUB</li> <li><code>asks</code> = <code>any</code> | ASK</li> <li><code>users</code> = JID</li> <li><code>contacts</code> = JID</li> </ul> <p>where</p> <ul> <li>SUB = <code>none</code> | <code>from</code> | <code>to</code> | <code>both</code></li> <li>ASK = <code>none</code> | <code>out</code> | <code>in</code></li> <li>JID = characters valid in a JID, and can use the globs: <code>_</code> and <code>%</code></li> </ul> <p>This example will list roster items with subscription <code>to</code> that have any ask property, of local users which JID is in the virtual host <code>example.org</code> and that the contact JID's server part contains the word <code>icq</code>:   <code>list to any %@example.org %@%icq%</code></p> <p>Arguments:</p> <ul> <li>action :: string</li> <li>subs :: string</li> <li>asks :: string</li> <li>users :: string</li> <li>contacts :: string</li> </ul> <p>Result:</p> <ul> <li>response :: [{user::string, contact::string}]</li> </ul> <p>Tags: roster</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/process_rosteritems\n{\n  \"action\": \"aaaaa\",\n  \"subs\": \"bbbbb\",\n  \"asks\": \"ccccc\",\n  \"users\": \"ddddd\",\n  \"contacts\": \"eeeee\"\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"user\": \"aaaaa\",\n    \"contact\": \"bbbbb\"\n  },\n  {\n    \"user\": \"ccccc\",\n    \"contact\": \"ddddd\"\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#push_alltoall","title":"push_alltoall","text":"<p>Add all the users to all the users of Host in Group</p> <p>Arguments:</p> <ul> <li>host :: string : Server name</li> <li>group :: string : Group name</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: roster</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/push_alltoall\n{\n  \"host\": \"myserver.com\",\n  \"group\": \"Everybody\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#push_roster","title":"push_roster","text":"<p>Push template roster from file to a user</p> <p>The text file must contain an erlang term: a list of tuples with username, servername, group and nick. For example: <code>[{\"user1\", \"localhost\", \"Workers\", \"User 1\"},  {\"user2\", \"localhost\", \"Workers\", \"User 2\"}].</code></p> <p>If there are problems parsing UTF8 character encoding, provide the corresponding string with the <code>&lt;&lt;\"STRING\"/utf8&gt;&gt;</code> syntax, for example: <code>[{\"user2\", \"localhost\", \"Workers\", &lt;&lt;\"User 2\"/utf8&gt;&gt;}]</code>.</p> <p>Arguments:</p> <ul> <li>file :: string : File path</li> <li>user :: string : User name</li> <li>host :: string : Server name</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: roster</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/push_roster\n{\n  \"file\": \"/home/ejabberd/roster.txt\",\n  \"user\": \"user1\",\n  \"host\": \"localhost\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#push_roster_all","title":"push_roster_all","text":"<p>Push template roster from file to all those users</p> <p>The text file must contain an erlang term: a list of tuples with username, servername, group and nick. Example: <code>[{\"user1\", \"localhost\", \"Workers\", \"User 1\"},  {\"user2\", \"localhost\", \"Workers\", \"User 2\"}].</code></p> <p>Arguments:</p> <ul> <li>file :: string : File path</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: roster</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/push_roster_all\n{\n  \"file\": \"/home/ejabberd/roster.txt\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#register","title":"register","text":"<p>Register a user</p> <p>Arguments:</p> <ul> <li>user :: string : Username</li> <li>host :: string : Local vhost served by ejabberd</li> <li>password :: string : Password</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: accounts</p> <p>Examples:</p> <pre><code>POST /api/register\n{\n  \"user\": \"bob\",\n  \"host\": \"example.com\",\n  \"password\": \"SomEPass44\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#registered_users","title":"registered_users","text":"<p>List all registered users in HOST</p> <p>Arguments:</p> <ul> <li>host :: string : Local vhost</li> </ul> <p>Result:</p> <ul> <li>users :: [username::string] : List of registered accounts usernames</li> </ul> <p>Tags: accounts</p> <p>Examples:</p> <pre><code>POST /api/registered_users\n{\n  \"host\": \"example.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  \"user1\",\n  \"user2\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#registered_vhosts","title":"registered_vhosts","text":"<p>List all registered vhosts in SERVER</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>vhosts :: [vhost::string] : List of available vhosts</li> </ul> <p>Tags: server</p> <p>Examples:</p> <pre><code>POST /api/registered_vhosts\n{\n\n}\n\nHTTP/1.1 200 OK\n[\n  \"example.com\",\n  \"anon.example.com\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#reload_config","title":"reload_config","text":"<p>Reload config file in memory</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: config</p> <p>Examples:</p> <pre><code>POST /api/reload_config\n{\n\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#reload_spam_filter_files","title":"reload_spam_filter_files \ud83d\udfe4","text":"<p> added in 25.07</p> <p>Reload spam JID/URL files</p> <p>Arguments:</p> <ul> <li>host :: string</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: spam</p> <p>Module: mod_antispam</p> <p>Examples:</p> <pre><code>POST /api/reload_spam_filter_files\n{\n  \"host\": \"aaaaa\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#remove_blocked_domain","title":"remove_blocked_domain \ud83d\udfe4","text":"<p> added in 25.07</p> <p>Remove domain from list of blocked domains</p> <p>Arguments:</p> <ul> <li>host :: string</li> <li>domain :: string</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: spam</p> <p>Module: mod_antispam</p> <p>Examples:</p> <pre><code>POST /api/remove_blocked_domain\n{\n  \"host\": \"aaaaa\",\n  \"domain\": \"bbbbb\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#remove_mam_for_user","title":"remove_mam_for_user","text":"<p>Remove mam archive for user</p> <p>Arguments:</p> <ul> <li>user :: string : Username</li> <li>host :: string : Server</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: mam</p> <p>Module: mod_mam</p> <p>Examples:</p> <pre><code>POST /api/remove_mam_for_user\n{\n  \"user\": \"bob\",\n  \"host\": \"example.com\"\n}\n\nHTTP/1.1 200 OK\n\"MAM archive removed\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#remove_mam_for_user_with_peer","title":"remove_mam_for_user_with_peer","text":"<p>Remove mam archive for user with peer</p> <p>Arguments:</p> <ul> <li>user :: string : Username</li> <li>host :: string : Server</li> <li>with :: string : Peer</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: mam</p> <p>Module: mod_mam</p> <p>Examples:</p> <pre><code>POST /api/remove_mam_for_user_with_peer\n{\n  \"user\": \"bob\",\n  \"host\": \"example.com\",\n  \"with\": \"anne@example.com\"\n}\n\nHTTP/1.1 200 OK\n\"MAM archive removed\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#reopen_log","title":"reopen_log","text":"<p>Reopen maybe the log files after being renamed</p> <p>Has no effect on ejabberd main log files, only on log files generated by some modules. This can be useful when an external tool is used for log rotation. See Log Files.</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: logs</p> <p>Examples:</p> <pre><code>POST /api/reopen_log\n{\n\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#request_certificate","title":"request_certificate","text":"<p>Requests certificates for all or some domains</p> <p>Domains can be <code>all</code>, or a list of domains separared with comma characters</p> <p>Arguments:</p> <ul> <li>domains :: string : Domains for which to acquire a certificate</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: acme</p> <p>Examples:</p> <pre><code>POST /api/request_certificate\n{\n  \"domains\": \"example.com,domain.tld,conference.domain.tld\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#resource_num","title":"resource_num","text":"<p>Resource string of a session number</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> <li>num :: integer : ID of resource to return</li> </ul> <p>Result:</p> <ul> <li>resource :: string : Name of user resource</li> </ul> <p>Tags: session</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/resource_num\n{\n  \"user\": \"peter\",\n  \"host\": \"myserver.com\",\n  \"num\": 2\n}\n\nHTTP/1.1 200 OK\n\"Psi\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#restart","title":"restart","text":"<p>Restart ejabberd gracefully</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: server</p> <p>Examples:</p> <pre><code>POST /api/restart\n{\n\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#restart_module","title":"restart_module","text":"<p>Stop an ejabberd module, reload code and start</p> <p>Arguments:</p> <ul> <li>host :: string : Server name</li> <li>module :: string : Module to restart</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Returns integer code:</li> <li><code>0</code>: code reloaded, module restarted</li> <li><code>1</code>: error: module not loaded</li> <li><code>2</code>: code not reloaded, but module restarted</li> </ul> <p>Tags: erlang</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/restart_module\n{\n  \"host\": \"myserver.com\",\n  \"module\": \"mod_admin_extra\"\n}\n\nHTTP/1.1 200 OK\n0\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#restore","title":"restore","text":"<p>Restore the Mnesia database from a binary backup file</p> <p>This restores immediately from a binary backup file the internal Mnesia database. This will consume a lot of memory if you have a large database, you may prefer install_fallback API.</p> <p>Arguments:</p> <ul> <li>file :: string : Full path to the backup file</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: mnesia</p> <p>Examples:</p> <pre><code>POST /api/restore\n{\n  \"file\": \"/var/lib/ejabberd/database.backup\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#revoke_certificate","title":"revoke_certificate","text":"<p>Revokes the selected ACME certificate</p> <p>Arguments:</p> <ul> <li>file :: string : Filename of the certificate</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: acme</p> <p>Examples:</p> <pre><code>POST /api/revoke_certificate\n{\n  \"file\": \"aaaaa\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#rooms_empty_destroy","title":"rooms_empty_destroy","text":"<p> modified in 24.06</p> <p>Destroy the rooms that have no messages in archive</p> <p>The MUC service argument can be <code>global</code> to get all hosts.</p> <p>Arguments:</p> <ul> <li>service :: string : MUC service, or <code>global</code> for all</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: muc, v2</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/rooms_empty_destroy\n{\n  \"service\": \"conference.example.com\"\n}\n\nHTTP/1.1 200 OK\n\"Destroyed rooms: 2\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#rooms_empty_list","title":"rooms_empty_list","text":"<p>List the rooms that have no messages in archive</p> <p>The MUC service argument can be <code>global</code> to get all hosts.</p> <p>Arguments:</p> <ul> <li>service :: string : MUC service, or <code>global</code> for all</li> </ul> <p>Result:</p> <ul> <li>rooms :: [room::string] : List of empty rooms</li> </ul> <p>Tags: muc</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/rooms_empty_list\n{\n  \"service\": \"conference.example.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  \"room1@conference.example.com\",\n  \"room2@conference.example.com\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#rooms_unused_destroy","title":"rooms_unused_destroy","text":"<p>Destroy the rooms that are unused for many days in the service</p> <p>The room recent history is used, so it's recommended  to wait a few days after service start before running this. The MUC service argument can be <code>global</code> to get all hosts.</p> <p>Arguments:</p> <ul> <li>service :: string : MUC service, or <code>global</code> for all</li> <li>days :: integer : Number of days</li> </ul> <p>Result:</p> <ul> <li>rooms :: [room::string] : List of unused rooms that has been destroyed</li> </ul> <p>Tags: muc</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/rooms_unused_destroy\n{\n  \"service\": \"conference.example.com\",\n  \"days\": 31\n}\n\nHTTP/1.1 200 OK\n[\n  \"room1@conference.example.com\",\n  \"room2@conference.example.com\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#rooms_unused_list","title":"rooms_unused_list","text":"<p>List the rooms that are unused for many days in the service</p> <p>The room recent history is used, so it's recommended  to wait a few days after service start before running this. The MUC service argument can be <code>global</code> to get all hosts.</p> <p>Arguments:</p> <ul> <li>service :: string : MUC service, or <code>global</code> for all</li> <li>days :: integer : Number of days</li> </ul> <p>Result:</p> <ul> <li>rooms :: [room::string] : List of unused rooms</li> </ul> <p>Tags: muc</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/rooms_unused_list\n{\n  \"service\": \"conference.example.com\",\n  \"days\": 31\n}\n\nHTTP/1.1 200 OK\n[\n  \"room1@conference.example.com\",\n  \"room2@conference.example.com\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#rotate_log","title":"rotate_log","text":"<p>Rotate maybe log file of some module</p> <p>Has no effect on ejabberd main log files, only on log files generated by some modules.</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: logs</p> <p>Examples:</p> <pre><code>POST /api/rotate_log\n{\n\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#send_direct_invitation","title":"send_direct_invitation","text":"<p> updated in 24.02</p> <p>Send a direct invitation to several destinations</p> <p>Since ejabberd 20.12, this command is asynchronous: the API call may return before the server has send all the invitations.</p> <p><code>password</code> and <code>message</code> can be set to <code>none</code>.</p> <p>Arguments:</p> <ul> <li>room :: string : Room name</li> <li>service :: string : MUC service</li> <li>password :: string : Password, or <code>none</code></li> <li>reason :: string : Reason text, or <code>none</code></li> <li>users :: [jid::string] : List of users JIDs</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: muc_room, v1</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/send_direct_invitation\n{\n  \"room\": \"room1\",\n  \"service\": \"conference.example.com\",\n  \"password\": \"\",\n  \"reason\": \"Check this out!\",\n  \"users\": [\n    \"user2@localhost\",\n    \"user3@example.com\"\n  ]\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#send_message","title":"send_message","text":"<p>Send a message to a local or remote bare of full JID</p> <p>When sending a groupchat message to a MUC room, <code>from</code> must be the full JID of a room occupant, or the bare JID of a MUC service admin, or the bare JID of a MUC/Sub subscribed user.</p> <p>Arguments:</p> <ul> <li>type :: string : Message type: <code>normal</code>, <code>chat</code>, <code>headline</code>, <code>groupchat</code></li> <li>from :: string : Sender JID</li> <li>to :: string : Receiver JID</li> <li>subject :: string : Subject, or empty string</li> <li>body :: string : Body</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: stanza</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/send_message\n{\n  \"type\": \"headline\",\n  \"from\": \"admin@localhost\",\n  \"to\": \"user1@localhost\",\n  \"subject\": \"Restart\",\n  \"body\": \"In 5 minutes\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#send_stanza","title":"send_stanza","text":"<p>Send a stanza; provide From JID and valid To JID</p> <p>Arguments:</p> <ul> <li>from :: string : Sender JID</li> <li>to :: string : Destination JID</li> <li>stanza :: string : Stanza</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: stanza</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/send_stanza\n{\n  \"from\": \"admin@localhost\",\n  \"to\": \"user1@localhost\",\n  \"stanza\": \"&lt;message&gt;&lt;ext attr='value'/&gt;&lt;/message&gt;\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#send_stanza_c2s","title":"send_stanza_c2s","text":"<p>Send a stanza from an existing C2S session</p> <p><code>user</code>@<code>host</code>/<code>resource</code> must be an existing C2S session. As an alternative, use send_stanza API instead.</p> <p>Arguments:</p> <ul> <li>user :: string : Username</li> <li>host :: string : Server name</li> <li>resource :: string : Resource</li> <li>stanza :: string : Stanza</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: stanza</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/send_stanza_c2s\n{\n  \"user\": \"admin\",\n  \"host\": \"myserver.com\",\n  \"resource\": \"bot\",\n  \"stanza\": \"&lt;message to='user1@localhost'&gt;&lt;ext attr='value'/&gt;&lt;/message&gt;\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#set_last","title":"set_last","text":"<p>Set last activity information</p> <p>Timestamp is the seconds since <code>1970-01-01 00:00:00 UTC</code>. For example value see <code>date +%s</code></p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> <li>timestamp :: integer : Number of seconds since epoch</li> <li>status :: string : Status message</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: last</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/set_last\n{\n  \"user\": \"user1\",\n  \"host\": \"myserver.com\",\n  \"timestamp\": 1500045311,\n  \"status\": \"GoSleeping\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#set_loglevel","title":"set_loglevel","text":"<p>Set the loglevel</p> <p>Possible loglevels: <code>none</code>, <code>emergency</code>, <code>alert</code>, <code>critical</code>,                        <code>error</code>, <code>warning</code>, <code>notice</code>, <code>info</code>, <code>debug</code>.</p> <p>Arguments:</p> <ul> <li>loglevel :: string : Desired logging level</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: logs</p> <p>Examples:</p> <pre><code>POST /api/set_loglevel\n{\n  \"loglevel\": \"debug\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#set_master","title":"set_master","text":"<p>Set master node of the clustered Mnesia tables</p> <p>If <code>nodename</code> is set to <code>self</code>, then this node will be set as its own master.</p> <p>Arguments:</p> <ul> <li>nodename :: string : Name of the erlang node that will be considered master of this node</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: cluster</p> <p>Examples:</p> <pre><code>POST /api/set_master\n{\n  \"nodename\": \"ejabberd@machine7\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#set_nickname","title":"set_nickname","text":"<p>Set nickname in a user's vCard</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> <li>nickname :: string : Nickname</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: vcard</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/set_nickname\n{\n  \"user\": \"user1\",\n  \"host\": \"myserver.com\",\n  \"nickname\": \"User 1\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#set_presence","title":"set_presence","text":"<p> updated in 24.02</p> <p>Set presence of a session</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> <li>resource :: string : Resource</li> <li>type :: string : Type: <code>available</code>, <code>error</code>, <code>probe</code>...</li> <li>show :: string : Show: <code>away</code>, <code>chat</code>, <code>dnd</code>, <code>xa</code>.</li> <li>status :: string : Status text</li> <li>priority :: integer : Priority, provide this value as an integer</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: session, v1</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/set_presence\n{\n  \"user\": \"user1\",\n  \"host\": \"myserver.com\",\n  \"resource\": \"tka1\",\n  \"type\": \"available\",\n  \"show\": \"away\",\n  \"status\": \"BB\",\n  \"priority\": 7\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#set_room_affiliation","title":"set_room_affiliation","text":"<p> updated in 24.12</p> <p>Change an affiliation in a MUC room</p> <p>If affiliation is <code>none</code>, then the affiliation is removed.</p> <p>Arguments:</p> <ul> <li>room :: string : room name</li> <li>service :: string : MUC service</li> <li>user :: string : user name</li> <li>host :: string : user host</li> <li>affiliation :: string : affiliation to set</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: muc_room, v3</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/set_room_affiliation\n{\n  \"room\": \"room1\",\n  \"service\": \"conference.example.com\",\n  \"user\": \"sun\",\n  \"host\": \"localhost\",\n  \"affiliation\": \"member\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#set_vcard","title":"set_vcard","text":"<p>Set content in a vCard field</p> <p>Some vcard field names in <code>get</code>/<code>set_vcard</code> are:</p> <ul> <li>FN           - Full Name</li> <li>NICKNAME     - Nickname</li> <li>BDAY         - Birthday</li> <li>TITLE        - Work: Position</li> <li>ROLE         - Work: Role</li> </ul> <p>For a full list of vCard fields check XEP-0054: vcard-temp</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> <li>name :: string : Field name</li> <li>content :: string : Value</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: vcard</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/set_vcard\n{\n  \"user\": \"user1\",\n  \"host\": \"myserver.com\",\n  \"name\": \"URL\",\n  \"content\": \"www.example.com\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#set_vcard2","title":"set_vcard2","text":"<p>Set content in a vCard subfield</p> <p>Some vcard field names and subnames in <code>get</code>/<code>set_vcard2</code> are:</p> <ul> <li>N FAMILY     - Family name</li> <li>N GIVEN      - Given name</li> <li>N MIDDLE     - Middle name</li> <li>ADR CTRY     - Address: Country</li> <li>ADR LOCALITY - Address: City</li> <li>TEL HOME     - Telephone: Home</li> <li>TEL CELL     - Telephone: Cellphone</li> <li>TEL WORK     - Telephone: Work</li> <li>TEL VOICE    - Telephone: Voice</li> <li>EMAIL USERID - E-Mail Address</li> <li>ORG ORGNAME  - Work: Company</li> <li>ORG ORGUNIT  - Work: Department</li> </ul> <p>For a full list of vCard fields check XEP-0054: vcard-temp</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> <li>name :: string : Field name</li> <li>subname :: string : Subfield name</li> <li>content :: string : Value</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: vcard</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/set_vcard2\n{\n  \"user\": \"user1\",\n  \"host\": \"myserver.com\",\n  \"name\": \"TEL\",\n  \"subname\": \"NUMBER\",\n  \"content\": \"123456\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#set_vcard2_multi","title":"set_vcard2_multi","text":"<p>Set multiple contents in a vCard subfield</p> <p>Some vcard field names and subnames in <code>get</code>/<code>set_vcard2</code> are:</p> <ul> <li>N FAMILY     - Family name</li> <li>N GIVEN      - Given name</li> <li>N MIDDLE     - Middle name</li> <li>ADR CTRY     - Address: Country</li> <li>ADR LOCALITY - Address: City</li> <li>TEL HOME     - Telephone: Home</li> <li>TEL CELL     - Telephone: Cellphone</li> <li>TEL WORK     - Telephone: Work</li> <li>TEL VOICE    - Telephone: Voice</li> <li>EMAIL USERID - E-Mail Address</li> <li>ORG ORGNAME  - Work: Company</li> <li>ORG ORGUNIT  - Work: Department</li> </ul> <p>For a full list of vCard fields check XEP-0054: vcard-temp</p> <p>Arguments:</p> <ul> <li>user :: string</li> <li>host :: string</li> <li>name :: string</li> <li>subname :: string</li> <li>contents :: [value::string]</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: vcard</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/set_vcard2_multi\n{\n  \"user\": \"aaaaa\",\n  \"host\": \"bbbbb\",\n  \"name\": \"ccccc\",\n  \"subname\": \"ddddd\",\n  \"contents\": [\n    \"eeeee\",\n    \"fffff\"\n  ]\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#srg_add","title":"srg_add","text":"<p> added in 24.06</p> <p>Add/Create a Shared Roster Group (without details)</p> <p>Arguments:</p> <ul> <li>group :: string : Group identifier</li> <li>host :: string : Group server name</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: shared_roster_group</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/srg_add\n{\n  \"group\": \"group3\",\n  \"host\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#srg_add_displayed","title":"srg_add_displayed","text":"<p> added in 24.06</p> <p>Add a group to displayed_groups of a Shared Roster Group</p> <p>Arguments:</p> <ul> <li>group :: string : Group identifier</li> <li>host :: string : Group server name</li> <li>add :: string : Group to add to displayed_groups</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: shared_roster_group</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/srg_add_displayed\n{\n  \"group\": \"group3\",\n  \"host\": \"myserver.com\",\n  \"add\": \"group1\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#srg_create","title":"srg_create","text":"<p> updated in 24.02</p> <p>Create a Shared Roster Group</p> <p>Arguments:</p> <ul> <li>group :: string : Group identifier</li> <li>host :: string : Group server name</li> <li>label :: string : Group name</li> <li>description :: string : Group description</li> <li>display :: [group::string] : List of groups to display</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: shared_roster_group, v1</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/srg_create\n{\n  \"group\": \"group3\",\n  \"host\": \"myserver.com\",\n  \"label\": \"Group3\",\n  \"description\": \"Third group\",\n  \"display\": [\n    \"group1\",\n    \"group2\"\n  ]\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#srg_del_displayed","title":"srg_del_displayed","text":"<p> added in 24.06</p> <p>Delete a group from displayed_groups of a Shared Roster Group</p> <p>Arguments:</p> <ul> <li>group :: string : Group identifier</li> <li>host :: string : Group server name</li> <li>del :: string : Group to delete from displayed_groups</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: shared_roster_group</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/srg_del_displayed\n{\n  \"group\": \"group3\",\n  \"host\": \"myserver.com\",\n  \"del\": \"group1\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#srg_delete","title":"srg_delete","text":"<p>Delete a Shared Roster Group</p> <p>Arguments:</p> <ul> <li>group :: string : Group identifier</li> <li>host :: string : Group server name</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: shared_roster_group</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/srg_delete\n{\n  \"group\": \"group3\",\n  \"host\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#srg_get_displayed","title":"srg_get_displayed","text":"<p> added in 24.06</p> <p>Get displayed groups of a Shared Roster Group</p> <p>Arguments:</p> <ul> <li>group :: string : Group identifier</li> <li>host :: string : Group server name</li> </ul> <p>Result:</p> <ul> <li>display :: [group::string] : List of groups to display</li> </ul> <p>Tags: shared_roster_group</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/srg_get_displayed\n{\n  \"group\": \"group3\",\n  \"host\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  \"group1\",\n  \"group2\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#srg_get_info","title":"srg_get_info","text":"<p>Get info of a Shared Roster Group</p> <p>Arguments:</p> <ul> <li>group :: string : Group identifier</li> <li>host :: string : Group server name</li> </ul> <p>Result:</p> <ul> <li>informations :: [{key::string, value::string}] : List of group information, as key and value</li> </ul> <p>Tags: shared_roster_group</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/srg_get_info\n{\n  \"group\": \"group3\",\n  \"host\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"key\": \"name\",\n    \"value\": \"Group 3\"\n  },\n  {\n    \"key\": \"displayed_groups\",\n    \"value\": \"group1\"\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#srg_get_members","title":"srg_get_members","text":"<p>Get members of a Shared Roster Group</p> <p>Arguments:</p> <ul> <li>group :: string : Group identifier</li> <li>host :: string : Group server name</li> </ul> <p>Result:</p> <ul> <li>members :: [member::string] : List of group identifiers</li> </ul> <p>Tags: shared_roster_group</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/srg_get_members\n{\n  \"group\": \"group3\",\n  \"host\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  \"user1@localhost\",\n  \"user2@localhost\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#srg_list","title":"srg_list","text":"<p>List the Shared Roster Groups in Host</p> <p>Arguments:</p> <ul> <li>host :: string : Server name</li> </ul> <p>Result:</p> <ul> <li>groups :: [id::string] : List of group identifiers</li> </ul> <p>Tags: shared_roster_group</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/srg_list\n{\n  \"host\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  \"group1\",\n  \"group2\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#srg_set_info","title":"srg_set_info","text":"<p> added in 24.06</p> <p>Set info of a Shared Roster Group</p> <p>Arguments:</p> <ul> <li>group :: string : Group identifier</li> <li>host :: string : Group server name</li> <li>key :: string : Information key: label, description</li> <li>value :: string : Information value</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: shared_roster_group</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/srg_set_info\n{\n  \"group\": \"group3\",\n  \"host\": \"myserver.com\",\n  \"key\": \"label\",\n  \"value\": \"Family\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#srg_user_add","title":"srg_user_add","text":"<p>Add the JID user@host to the Shared Roster Group</p> <p>Arguments:</p> <ul> <li>user :: string : Username</li> <li>host :: string : User server name</li> <li>group :: string : Group identifier</li> <li>grouphost :: string : Group server name</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: shared_roster_group</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/srg_user_add\n{\n  \"user\": \"user1\",\n  \"host\": \"myserver.com\",\n  \"group\": \"group3\",\n  \"grouphost\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#srg_user_del","title":"srg_user_del","text":"<p>Delete this JID user@host from the Shared Roster Group</p> <p>Arguments:</p> <ul> <li>user :: string : Username</li> <li>host :: string : User server name</li> <li>group :: string : Group identifier</li> <li>grouphost :: string : Group server name</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: shared_roster_group</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/srg_user_del\n{\n  \"user\": \"user1\",\n  \"host\": \"myserver.com\",\n  \"group\": \"group3\",\n  \"grouphost\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#stats","title":"stats","text":"<p>Get some statistical value for the whole ejabberd server</p> <p>Allowed statistics <code>name</code> are: <code>registeredusers</code>, <code>onlineusers</code>, <code>onlineusersnode</code>, <code>uptimeseconds</code>, <code>processes</code>.</p> <p>Arguments:</p> <ul> <li>name :: string : Statistic name</li> </ul> <p>Result:</p> <ul> <li>stat :: integer : Integer statistic value</li> </ul> <p>Tags: statistics</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/stats\n{\n  \"name\": \"registeredusers\"\n}\n\nHTTP/1.1 200 OK\n6\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#stats_host","title":"stats_host","text":"<p>Get some statistical value for this host</p> <p>Allowed statistics <code>name</code> are: <code>registeredusers</code>, <code>onlineusers</code>.</p> <p>Arguments:</p> <ul> <li>name :: string : Statistic name</li> <li>host :: string : Server JID</li> </ul> <p>Result:</p> <ul> <li>stat :: integer : Integer statistic value</li> </ul> <p>Tags: statistics</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/stats_host\n{\n  \"name\": \"registeredusers\",\n  \"host\": \"example.com\"\n}\n\nHTTP/1.1 200 OK\n6\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#status","title":"status","text":"<p>Get status of the ejabberd server</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: server</p> <p>Examples:</p> <pre><code>POST /api/status\n{\n\n}\n\nHTTP/1.1 200 OK\n\"The node ejabberd@localhost is started with status: startedejabberd X.X is running in that node\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#status_list","title":"status_list","text":"<p> updated in 24.12</p> <p>List of logged users with this status</p> <p>Arguments:</p> <ul> <li>status :: string : Status type to check</li> </ul> <p>Result:</p> <ul> <li>users :: [{jid::string, priority::integer, status::string}]</li> </ul> <p>Tags: session, v3</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/status_list\n{\n  \"status\": \"dnd\"\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"jid\": \"peter@myserver.com/tka\",\n    \"priority\": 6,\n    \"status\": \"Busy\"\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#status_list_host","title":"status_list_host","text":"<p> updated in 24.12</p> <p>List of users logged in host with their statuses</p> <p>Arguments:</p> <ul> <li>host :: string : Server name</li> <li>status :: string : Status type to check</li> </ul> <p>Result:</p> <ul> <li>users :: [{jid::string, priority::integer, status::string}]</li> </ul> <p>Tags: session, v3</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/status_list_host\n{\n  \"host\": \"myserver.com\",\n  \"status\": \"dnd\"\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"jid\": \"peter@myserver.com/tka\",\n    \"priority\": 6,\n    \"status\": \"Busy\"\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#status_num","title":"status_num","text":"<p>Number of logged users with this status</p> <p>Arguments:</p> <ul> <li>status :: string : Status type to check</li> </ul> <p>Result:</p> <ul> <li>users :: integer : Number of connected sessions with given status type</li> </ul> <p>Tags: session, statistics</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/status_num\n{\n  \"status\": \"dnd\"\n}\n\nHTTP/1.1 200 OK\n23\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#status_num_host","title":"status_num_host","text":"<p>Number of logged users with this status in host</p> <p>Arguments:</p> <ul> <li>host :: string : Server name</li> <li>status :: string : Status type to check</li> </ul> <p>Result:</p> <ul> <li>users :: integer : Number of connected sessions with given status type</li> </ul> <p>Tags: session, statistics</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/status_num_host\n{\n  \"host\": \"myserver.com\",\n  \"status\": \"dnd\"\n}\n\nHTTP/1.1 200 OK\n23\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#stop","title":"stop","text":"<p>Stop ejabberd gracefully</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: server</p> <p>Examples:</p> <pre><code>POST /api/stop\n{\n\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#stop_kindly","title":"stop_kindly","text":"<p>Stop kindly the server (informing users)</p> <p>Inform users and rooms, wait, and stop the server. Provide the delay in seconds, and the announcement quoted, for example:  <code>ejabberdctl stop_kindly 60 \\\"The server will stop in one minute.\\\"</code></p> <p>Arguments:</p> <ul> <li>delay :: integer : Seconds to wait</li> <li>announcement :: string : Announcement to send, with quotes</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: server</p> <p>Examples:</p> <pre><code>POST /api/stop_kindly\n{\n  \"delay\": 60,\n  \"announcement\": \"Server will stop now.\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#stop_s2s_connections","title":"stop_s2s_connections","text":"<p>Stop all s2s outgoing and incoming connections</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: s2s</p> <p>Examples:</p> <pre><code>POST /api/stop_s2s_connections\n{\n\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#subscribe_room","title":"subscribe_room","text":"<p> updated in 24.12</p> <p>Subscribe to a MUC conference</p> <p>Arguments:</p> <ul> <li>user :: string : user name</li> <li>host :: string : user host</li> <li>nick :: string : user nick</li> <li>room :: string : room name</li> <li>service :: string : MUC service</li> <li>nodes :: [node::string] : list of nodes</li> </ul> <p>Result:</p> <ul> <li>nodes :: [node::string] : The list of nodes that has subscribed</li> </ul> <p>Tags: muc_room, muc_sub, v3</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/subscribe_room\n{\n  \"user\": \"tom\",\n  \"host\": \"localhost\",\n  \"nick\": \"Tom\",\n  \"room\": \"room1\",\n  \"service\": \"conference.localhost\",\n  \"nodes\": [\n    \"urn:xmpp:mucsub:nodes:messages\",\n    \"urn:xmpp:mucsub:nodes:affiliations\"\n  ]\n}\n\nHTTP/1.1 200 OK\n[\n  \"urn:xmpp:mucsub:nodes:messages\",\n  \"urn:xmpp:mucsub:nodes:affiliations\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#subscribe_room_many","title":"subscribe_room_many","text":"<p> updated in 24.12</p> <p>Subscribe several users to a MUC conference</p> <p>This command accepts up to 50 users at once (this is configurable with the mod_muc_admin option <code>subscribe_room_many_max_users</code>)</p> <p>Arguments:</p> <ul> <li>users :: [{user::string, host::string, nick::string}] : List of tuples with users name, host and nick</li> <li>room :: string : room name</li> <li>service :: string : MUC service</li> <li>nodes :: [node::string] : nodes separated by commas: <code>,</code></li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: muc_room, muc_sub, v3</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/subscribe_room_many\n{\n  \"users\": [\n    {\n      \"user\": \"tom\",\n      \"host\": \"localhost\",\n      \"nick\": \"Tom\"\n    },\n    {\n      \"user\": \"jerry\",\n      \"host\": \"localhost\",\n      \"nick\": \"Jerry\"\n    }\n  ],\n  \"room\": \"room1\",\n  \"service\": \"conference.localhost\",\n  \"nodes\": [\n    \"urn:xmpp:mucsub:nodes:messages\",\n    \"urn:xmpp:mucsub:nodes:affiliations\"\n  ]\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#unban_account","title":"unban_account","text":"<p> added in 24.06</p> <p>Revert the ban from an account: set back the old password</p> <p>Check ban_account API.</p> <p>Arguments:</p> <ul> <li>user :: string : User name to unban</li> <li>host :: string : Server name</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: accounts, v2</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/unban_account\n{\n  \"user\": \"gooduser\",\n  \"host\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#unban_ip","title":"unban_ip","text":"<p>Remove banned IP addresses from the fail2ban table</p> <p>Accepts an IP address with a network mask. Returns the number of unbanned addresses, or a negative integer if there were any error.</p> <p>Arguments:</p> <ul> <li>address :: string : IP address, optionally with network mask.</li> </ul> <p>Result:</p> <ul> <li>unbanned :: integer : Amount of unbanned entries, or negative in case of error.</li> </ul> <p>Tags: accounts</p> <p>Module: mod_fail2ban</p> <p>Examples:</p> <pre><code>POST /api/unban_ip\n{\n  \"address\": \"::FFFF:127.0.0.1/128\"\n}\n\nHTTP/1.1 200 OK\n3\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#unregister","title":"unregister","text":"<p>Unregister a user</p> <p>This deletes the authentication and all the data associated to the account (roster, vcard...).</p> <p>Arguments:</p> <ul> <li>user :: string : Username</li> <li>host :: string : Local vhost served by ejabberd</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: accounts</p> <p>Examples:</p> <pre><code>POST /api/unregister\n{\n  \"user\": \"bob\",\n  \"host\": \"example.com\"\n}\n\nHTTP/1.1 200 OK\n\"Success\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#unsubscribe_room","title":"unsubscribe_room","text":"<p> updated in 24.12</p> <p>Unsubscribe from a MUC conference</p> <p>Arguments:</p> <ul> <li>user :: string : user name</li> <li>host :: string : user host</li> <li>room :: string : room name</li> <li>service :: string : MUC service</li> </ul> <p>Result:</p> <ul> <li>res :: integer : Status code (<code>0</code> on success, <code>1</code> otherwise)</li> </ul> <p>Tags: muc_room, muc_sub, v3</p> <p>Module: mod_muc_admin</p> <p>Examples:</p> <pre><code>POST /api/unsubscribe_room\n{\n  \"user\": \"tom\",\n  \"host\": \"localhost\",\n  \"room\": \"room1\",\n  \"service\": \"conference.localhost\"\n}\n\nHTTP/1.1 200 OK\n\"\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#update","title":"update","text":"<p> improved in 24.10</p> <p>Update the given module</p> <p>To update all the possible modules, use <code>all</code>.</p> <p>Arguments:</p> <ul> <li>module :: string</li> </ul> <p>Result:</p> <ul> <li>res :: string : Raw result string</li> </ul> <p>Tags: server</p> <p>Examples:</p> <pre><code>POST /api/update\n{\n  \"module\": \"all\"\n}\n\nHTTP/1.1 200 OK\n\"Updated modules: mod_configure, mod_vcard\"\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#update_list","title":"update_list","text":"<p>List modified modules that can be updated</p> <p>Arguments:</p> <p>Result:</p> <ul> <li>modules :: [module::string]</li> </ul> <p>Tags: server</p> <p>Examples:</p> <pre><code>POST /api/update_list\n{\n\n}\n\nHTTP/1.1 200 OK\n[\n  \"mod_configure\",\n  \"mod_vcard\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#user_resources","title":"user_resources","text":"<p>List user's connected resources</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> </ul> <p>Result:</p> <ul> <li>resources :: [resource::string]</li> </ul> <p>Tags: session</p> <p>Examples:</p> <pre><code>POST /api/user_resources\n{\n  \"user\": \"user1\",\n  \"host\": \"example.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  \"tka1\",\n  \"Gajim\",\n  \"mobile-app\"\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-api/#user_sessions_info","title":"user_sessions_info","text":"<p>Get information about all sessions of a user</p> <p>Arguments:</p> <ul> <li>user :: string : User name</li> <li>host :: string : Server name</li> </ul> <p>Result:</p> <ul> <li>sessions_info :: [{connection::string, ip::string, port::integer, priority::integer, node::string, uptime::integer, status::string, resource::string, statustext::string}]</li> </ul> <p>Tags: session</p> <p>Module: mod_admin_extra</p> <p>Examples:</p> <pre><code>POST /api/user_sessions_info\n{\n  \"user\": \"peter\",\n  \"host\": \"myserver.com\"\n}\n\nHTTP/1.1 200 OK\n[\n  {\n    \"connection\": \"c2s\",\n    \"ip\": \"127.0.0.1\",\n    \"port\": 42656,\n    \"priority\": 8,\n    \"node\": \"ejabberd@localhost\",\n    \"uptime\": 231,\n    \"status\": \"dnd\",\n    \"resource\": \"tka\",\n    \"statustext\": \"\"\n  }\n]\n</code></pre>","boost":1},{"location":"developer/ejabberd-api/admin-tags/","title":"API Tags","text":"<p>Please note</p> <p>This section enumerates the API tags of ejabberd 25.07.  If you are using an old ejabberd release, please refer to the corresponding archived version of this page in the Archive. </p>"},{"location":"developer/ejabberd-api/admin-tags/#accounts","title":"accounts","text":"<ul> <li> <p>ban_account</p> </li> <li> <p>change_password</p> </li> <li> <p>check_account</p> </li> <li> <p>check_password</p> </li> <li> <p>check_password_hash</p> </li> <li> <p>delete_old_users</p> </li> <li> <p>delete_old_users_vhost</p> </li> <li> <p>get_ban_details</p> </li> <li> <p>register</p> </li> <li> <p>registered_users</p> </li> <li> <p>unban_account</p> </li> <li> <p>unban_ip</p> </li> <li> <p>unregister</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#acme","title":"acme","text":"<ul> <li> <p>list_certificates</p> </li> <li> <p>request_certificate</p> </li> <li> <p>revoke_certificate</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#cluster","title":"cluster","text":"<ul> <li> <p>get_master</p> </li> <li> <p>join_cluster</p> </li> <li> <p>join_cluster_here</p> </li> <li> <p>leave_cluster</p> </li> <li> <p>list_cluster</p> </li> <li> <p>list_cluster_detailed</p> </li> <li> <p>set_master</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#config","title":"config","text":"<ul> <li> <p>convert_to_yaml</p> </li> <li> <p>dump_config</p> </li> <li> <p>reload_config</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#documentation","title":"documentation","text":"<ul> <li> <p>gen_html_doc_for_commands</p> </li> <li> <p>gen_markdown_doc_for_commands</p> </li> <li> <p>gen_markdown_doc_for_tags</p> </li> <li> <p>man</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#ejabberdctl","title":"ejabberdctl","text":"<ul> <li> <p>help</p> </li> <li> <p>mnesia_info_ctl</p> </li> <li> <p>print_sql_schema</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#erlang","title":"erlang","text":"<ul> <li> <p>compile</p> </li> <li> <p>get_cookie</p> </li> <li> <p>restart_module</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#last","title":"last","text":"<ul> <li> <p>get_last</p> </li> <li> <p>set_last</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#logs","title":"logs","text":"<ul> <li> <p>get_loglevel</p> </li> <li> <p>reopen_log</p> </li> <li> <p>rotate_log</p> </li> <li> <p>set_loglevel</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#mam","title":"mam","text":"<ul> <li> <p>abort_delete_old_mam_messages</p> </li> <li> <p>delete_old_mam_messages</p> </li> <li> <p>delete_old_mam_messages_batch</p> </li> <li> <p>delete_old_mam_messages_status</p> </li> <li> <p>get_mam_count</p> </li> <li> <p>remove_mam_for_user</p> </li> <li> <p>remove_mam_for_user_with_peer</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#mnesia","title":"mnesia","text":"<ul> <li> <p>backup</p> </li> <li> <p>delete_mnesia</p> </li> <li> <p>dump</p> </li> <li> <p>dump_table</p> </li> <li> <p>export2sql</p> </li> <li> <p>export_piefxis</p> </li> <li> <p>export_piefxis_host</p> </li> <li> <p>import_dir</p> </li> <li> <p>import_file</p> </li> <li> <p>import_piefxis</p> </li> <li> <p>import_prosody</p> </li> <li> <p>install_fallback</p> </li> <li> <p>load</p> </li> <li> <p>mnesia_change_nodename</p> </li> <li> <p>mnesia_info</p> </li> <li> <p>mnesia_info_ctl</p> </li> <li> <p>mnesia_list_tables</p> </li> <li> <p>mnesia_table_change_storage</p> </li> <li> <p>mnesia_table_info</p> </li> <li> <p>restore</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#modules","title":"modules","text":"<ul> <li> <p>module_check</p> </li> <li> <p>module_install</p> </li> <li> <p>module_uninstall</p> </li> <li> <p>module_upgrade</p> </li> <li> <p>modules_available</p> </li> <li> <p>modules_installed</p> </li> <li> <p>modules_update_specs</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#muc","title":"muc","text":"<ul> <li> <p>create_rooms_file</p> </li> <li> <p>destroy_rooms_file</p> </li> <li> <p>get_user_rooms</p> </li> <li> <p>get_user_subscriptions</p> </li> <li> <p>muc_online_rooms</p> </li> <li> <p>muc_online_rooms_by_regex</p> </li> <li> <p>muc_register_nick</p> </li> <li> <p>muc_unregister_nick</p> </li> <li> <p>rooms_empty_destroy</p> </li> <li> <p>rooms_empty_list</p> </li> <li> <p>rooms_unused_destroy</p> </li> <li> <p>rooms_unused_list</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#muc_room","title":"muc_room","text":"<ul> <li> <p>change_room_option</p> </li> <li> <p>create_room</p> </li> <li> <p>create_room_with_opts</p> </li> <li> <p>destroy_room</p> </li> <li> <p>get_room_affiliation</p> </li> <li> <p>get_room_affiliations</p> </li> <li> <p>get_room_history</p> </li> <li> <p>get_room_occupants</p> </li> <li> <p>get_room_occupants_number</p> </li> <li> <p>get_room_options</p> </li> <li> <p>get_subscribers</p> </li> <li> <p>send_direct_invitation</p> </li> <li> <p>set_room_affiliation</p> </li> <li> <p>subscribe_room</p> </li> <li> <p>subscribe_room_many</p> </li> <li> <p>unsubscribe_room</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#muc_sub","title":"muc_sub","text":"<ul> <li> <p>create_room_with_opts</p> </li> <li> <p>get_subscribers</p> </li> <li> <p>get_user_subscriptions</p> </li> <li> <p>subscribe_room</p> </li> <li> <p>subscribe_room_many</p> </li> <li> <p>unsubscribe_room</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#oauth","title":"oauth","text":"<ul> <li> <p>oauth_add_client_implicit</p> </li> <li> <p>oauth_add_client_password</p> </li> <li> <p>oauth_issue_token</p> </li> <li> <p>oauth_list_tokens</p> </li> <li> <p>oauth_remove_client</p> </li> <li> <p>oauth_revoke_token</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#offline","title":"offline","text":"<ul> <li> <p>abort_delete_old_messages</p> </li> <li> <p>delete_expired_messages</p> </li> <li> <p>delete_old_messages</p> </li> <li> <p>delete_old_messages_batch</p> </li> <li> <p>delete_old_messages_status</p> </li> <li> <p>get_offline_count</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#private","title":"private","text":"<ul> <li> <p>bookmarks_to_pep</p> </li> <li> <p>private_get</p> </li> <li> <p>private_set</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#purge","title":"purge","text":"<ul> <li> <p>abort_delete_old_mam_messages</p> </li> <li> <p>abort_delete_old_messages</p> </li> <li> <p>delete_expired_messages</p> </li> <li> <p>delete_expired_pubsub_items</p> </li> <li> <p>delete_old_mam_messages</p> </li> <li> <p>delete_old_mam_messages_batch</p> </li> <li> <p>delete_old_mam_messages_status</p> </li> <li> <p>delete_old_messages</p> </li> <li> <p>delete_old_messages_batch</p> </li> <li> <p>delete_old_messages_status</p> </li> <li> <p>delete_old_pubsub_items</p> </li> <li> <p>delete_old_push_sessions</p> </li> <li> <p>delete_old_users</p> </li> <li> <p>delete_old_users_vhost</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#roster","title":"roster","text":"<ul> <li> <p>add_rosteritem</p> </li> <li> <p>delete_rosteritem</p> </li> <li> <p>get_roster</p> </li> <li> <p>get_roster_count</p> </li> <li> <p>process_rosteritems</p> </li> <li> <p>push_alltoall</p> </li> <li> <p>push_roster</p> </li> <li> <p>push_roster_all</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#s2s","title":"s2s","text":"<ul> <li> <p>incoming_s2s_number</p> </li> <li> <p>outgoing_s2s_number</p> </li> <li> <p>stop_s2s_connections</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#server","title":"server","text":"<ul> <li> <p>clear_cache</p> </li> <li> <p>evacuate_kindly</p> </li> <li> <p>gc</p> </li> <li> <p>halt</p> </li> <li> <p>registered_vhosts</p> </li> <li> <p>restart</p> </li> <li> <p>status</p> </li> <li> <p>stop</p> </li> <li> <p>stop_kindly</p> </li> <li> <p>update</p> </li> <li> <p>update_list</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#session","title":"session","text":"<ul> <li> <p>connected_users</p> </li> <li> <p>connected_users_info</p> </li> <li> <p>connected_users_number</p> </li> <li> <p>connected_users_vhost</p> </li> <li> <p>get_presence</p> </li> <li> <p>kick_session</p> </li> <li> <p>kick_user</p> </li> <li> <p>kick_users</p> </li> <li> <p>num_resources</p> </li> <li> <p>resource_num</p> </li> <li> <p>set_presence</p> </li> <li> <p>status_list</p> </li> <li> <p>status_list_host</p> </li> <li> <p>status_num</p> </li> <li> <p>status_num_host</p> </li> <li> <p>user_resources</p> </li> <li> <p>user_sessions_info</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#shared_roster_group","title":"shared_roster_group","text":"<ul> <li> <p>srg_add</p> </li> <li> <p>srg_add_displayed</p> </li> <li> <p>srg_create</p> </li> <li> <p>srg_del_displayed</p> </li> <li> <p>srg_delete</p> </li> <li> <p>srg_get_displayed</p> </li> <li> <p>srg_get_info</p> </li> <li> <p>srg_get_members</p> </li> <li> <p>srg_list</p> </li> <li> <p>srg_set_info</p> </li> <li> <p>srg_user_add</p> </li> <li> <p>srg_user_del</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#spam","title":"spam","text":"<ul> <li> <p>add_blocked_domain</p> </li> <li> <p>add_to_spam_filter_cache</p> </li> <li> <p>drop_from_spam_filter_cache</p> </li> <li> <p>expire_spam_filter_cache</p> </li> <li> <p>get_blocked_domains</p> </li> <li> <p>get_spam_filter_cache</p> </li> <li> <p>reload_spam_filter_files</p> </li> <li> <p>remove_blocked_domain</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#sql","title":"sql","text":"<ul> <li> <p>convert_to_scram</p> </li> <li> <p>import_prosody</p> </li> <li> <p>print_sql_schema</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#stanza","title":"stanza","text":"<ul> <li> <p>privacy_set</p> </li> <li> <p>send_message</p> </li> <li> <p>send_stanza</p> </li> <li> <p>send_stanza_c2s</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#statistics","title":"statistics","text":"<ul> <li> <p>connected_users_number</p> </li> <li> <p>incoming_s2s_number</p> </li> <li> <p>outgoing_s2s_number</p> </li> <li> <p>stats</p> </li> <li> <p>stats_host</p> </li> <li> <p>status_num</p> </li> <li> <p>status_num_host</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#v1","title":"v1","text":"<ul> <li> <p>add_rosteritem</p> </li> <li> <p>oauth_issue_token</p> </li> <li> <p>send_direct_invitation</p> </li> <li> <p>set_presence</p> </li> <li> <p>srg_create</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#v2","title":"v2","text":"<ul> <li> <p>ban_account</p> </li> <li> <p>get_ban_details</p> </li> <li> <p>kick_user</p> </li> <li> <p>rooms_empty_destroy</p> </li> <li> <p>unban_account</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#v3","title":"v3","text":"<ul> <li> <p>get_room_affiliations</p> </li> <li> <p>muc_register_nick</p> </li> <li> <p>muc_unregister_nick</p> </li> <li> <p>set_room_affiliation</p> </li> <li> <p>status_list</p> </li> <li> <p>status_list_host</p> </li> <li> <p>subscribe_room</p> </li> <li> <p>subscribe_room_many</p> </li> <li> <p>unsubscribe_room</p> </li> </ul>"},{"location":"developer/ejabberd-api/admin-tags/#vcard","title":"vcard","text":"<ul> <li> <p>get_vcard</p> </li> <li> <p>get_vcard2</p> </li> <li> <p>get_vcard2_multi</p> </li> <li> <p>set_nickname</p> </li> <li> <p>set_vcard</p> </li> <li> <p>set_vcard2</p> </li> <li> <p>set_vcard2_multi</p> </li> </ul>"},{"location":"developer/ejabberd-api/api_versioning/","title":"API Versioning","text":"<p> added in 24.02</p>"},{"location":"developer/ejabberd-api/api_versioning/#api-versions-history","title":"API Versions History","text":"<ul> <li>API v3 (changes) was introduced in ejabberd 24.12</li> <li>API v2 (changes) was introduced in ejabberd 24.06</li> <li>API v1 (changes) was introduced in ejabberd 24.02</li> <li>API v0 was used in ejabberd 23.10</li> </ul>"},{"location":"developer/ejabberd-api/api_versioning/#introduction","title":"Introduction","text":"<p>It is possible to support different versions of the ejabberd API. Versioning is used to ensure compatibility with third party backend that uses the API.</p> <p>When a command is modified (either its declaration or its definition, breaking compatibility), those modifications can be done in a new version of the API, keeping the old command still available in the previous API version. An API version is an integer (sub-versions are not supported).</p> <p>If the API client does not specify the API version, ejabberd uses by default the most recent available API version.</p> <p>Alternatively, the API client can specify an API version, and ejabberd will use that one to process the query, or the most recent to the one specified. For example: if a command is defined in API versions 0, 2, 3, 7, and 9, and a client declares to support up to API version 5, then ejabberd uses the command API version 3, which is the most recent available for the one supported by the client.</p> <p>API versioning is supported by <code>mod_http_api</code> ReST interface and <code>ejabberdctl</code> command line script. However <code>ejabberd_xmlrpc</code> doesn't support API versioning, and consequently it can only use the latest API version.</p>"},{"location":"developer/ejabberd-api/api_versioning/#command-definition","title":"Command Definition","text":"<p>If a command is modified, a new <code>#ejabberd_commands</code> record should be defined with a <code>version</code> attribute set to the API version (an integer) where this command version is available. There is no need to add a new <code>#ejabberd_commands</code> record for commands that are not modified in a given API version, immediate inferior version is used.</p> <p>By default, all commands are in API version 0, and latest API is used if no version is specified when calling <code>ejabberd_commands</code> directly without specifying a version.</p>"},{"location":"developer/ejabberd-api/api_versioning/#api-documentation","title":"API Documentation","text":"<p>The command documentation indicates the api version as a tag: <code>v1</code>, <code>v2</code>... Commands not versioned do not have such a tag: they are version 0.</p> <p>The API Tags page lists the most recent API versions, and what commands are included.</p> <p>To know exactly what is the format expected for a command in a specific API version, use <code>ejabberdctl</code> specifying what API version you want to consult and the command name, for example:</p> <pre><code>ejabberdctl --version 0 help get_roster\n</code></pre>"},{"location":"developer/ejabberd-api/api_versioning/#ejabberdctl","title":"<code>ejabberdctl</code>","text":"<p>ejabberdctl uses by default the latest API version.</p> <p>To execute a command from a specific API version, add the <code>--version</code> switch, followed by the version number, and then the command name.</p> <p>Example:</p> <pre><code>ejabberdctl --version 2 set_loglevel 4\n</code></pre> <p>Use the most recent API version:</p> <pre><code>$ ejabberdctl get_roster admin localhost\njan@localhost jan   none    subscribe       group1,group2\ntom@localhost tom   none    subscribe       group3\n</code></pre> <p>Use version 0:</p> <pre><code>$ ejabberdctl --version 0 get_roster admin localhost\njan@localhost jan   none    subscribe       group1;group2\ntom@localhost tom   none    subscribe       group3\n</code></pre>"},{"location":"developer/ejabberd-api/api_versioning/#mod_adhoc_api","title":"<code>mod_adhoc_api</code>","text":"<p>mod_adhoc_api uses by default the latest API version.</p> <p>If you want the module to use a specific API version, configure the module option <code>default_version</code>.</p>"},{"location":"developer/ejabberd-api/api_versioning/#mod_http_api","title":"<code>mod_http_api</code>","text":"<p>mod_http_api uses by default the latest API version.</p> <p>You can set the default version when configuring <code>request_handlers</code>, by including a <code>vN</code> in its path, where <code>N</code> is an integer corresponding to the version.</p> <p>In any case, the API client can specify a version when sending the request, by appending <code>vN</code> to the request path.</p> <p>For example, when configured like:</p> <pre><code>listen:\n  -\n    request_handlers:\n      /api/v0: mod_http_api\n      /v1/api: mod_http_api\n      /api: mod_http_api\n</code></pre> <p>See what API version will be used depending on the URL:</p> <ul> <li><code>api/command</code> use the latest available version</li> <li><code>api/command/v0</code> use version 0</li> <li><code>api/command/v1</code> use version 1</li> <li><code>v1/api/command</code> use version 1</li> <li><code>v1/api/command/v0</code> use version 0</li> <li><code>api/v0/command</code> use version 0</li> <li><code>api/v0/command/v1</code> use version 1</li> </ul> <p>In this example, the server administrator configured the default API version to 0:</p> <pre><code>listen:\n  -\n    request_handlers:\n      /api/v0: mod_http_api\n</code></pre> <p>The client doesn't specify any version, so 0 is used:</p> <pre><code>$ curl -k -X POST -H \"Content-type: application/json\" \\\n  -d '{}' \"http://localhost:5280/api/v0/get_loglevel\"\n{\"levelatom\":\"info\"}\n</code></pre> <p>This time the client requests the API version 2:</p> <pre><code>$ curl -k -X POST -H \"Content-type: application/json\" \\\n  -d '{}' \"http://localhost:5280/api/v0/get_loglevel/v2\"\n\"info\"\n</code></pre>"},{"location":"developer/ejabberd-api/commands/","title":"ejabberd commands","text":"<p>By defining command using api available through <code>ejabberd_commands</code> module, it's possible to add operations that would be available to users through <code>ejabberdctl</code> command, XML-RPC socket or JSON based REST service.</p> <p>Each command needs to provide information about required arguments and produced result by filling <code>#ejabberd_commands</code> record and registering it in dispatcher by calling <code>ejabberd_commands:register_commands([ListOfEjabberdCommandsRecords])</code>.</p>"},{"location":"developer/ejabberd-api/commands/#structure-of-ejabberd_commands-record","title":"Structure of <code>#ejabberd_commands</code> record","text":""},{"location":"developer/ejabberd-api/commands/#writing-ejabberd-commands-supporting-oauth","title":"Writing ejabberd commands supporting OAuth","text":"<p>If you have existing commands that you want to make OAuth compliant, you can make them OAuth compliant very easily.</p> <p>An ejabberd command is defined by an <code>#ejabberd_commands</code> Erlang record. The record requires a few fields:</p> <ul> <li>name: This is an atom defining the name of the command.</li> <li> <p>tags: This is a list of atoms used to group the command into consistent group of commands. This is mostly used to group commands in <code>ejabberdctl</code> command-line tool. Existing categories are:</p> <ul> <li><code>session</code>: For commands related to user XMPP sessions.</li> <li><code>roster</code>: Commands related to contact list management. </li> </ul> </li> <li> <p>desc: Description of the command for online help.</p> </li> <li>module and function: Module and function to call to execute the command logic.</li> <li> <p>args: Argument of the command. An argument is defined by a tuple of atoms of the form <code>{argument_name, data_type}</code>. <code>data_type</code> can be one of:</p> <ul> <li>binary </li> </ul> </li> <li> <p>result: defines what the command will return.</p> </li> <li>policy: Is an optional field, containing an atom that define restriction policy of the command. It can be on of: <code>open</code>, <code>admin</code>, <code>user</code>, <code>restricted</code>. Default is <code>restricted</code>, meaning the command can be used from ejabberdctl command-line tool.</li> <li>version: API version number where this command is available (see API versioning documentation for details).</li> </ul> <p>To define a command that can be used by server user over ReST or XML-RPC API, you just have to define it with policy <code>user</code>. Then, you have to make sure that the function will take a user binary and a host binary as first parameter of the function. They do not have to be put in the <code>args</code> list in <code>#ejabberd_commands</code> record as the `user policy implicitly expect them.</p> <p>That's all you need to have commands that can be used in a variety of ways.</p> <p>Here is a example way to register commands when</p> <pre><code>start(_Host, _Opts) -&gt;\n    ejabberd_commands:register_commands(commands()).\n\nstop(_Host) -&gt;\n    ejabberd_commands:unregister_commands(commands()).\n\n%%%\n%%% Register commands\n%%%\n\ncommands() -&gt;\n    [#ejabberd_commands{name = user_get_roster,\n                        tags = [roster],\n                        desc = \"Retrieve the roster\",\n                        longdesc =\n                            \"Returns a list of the contacts in a \"\n                            \"user roster.\\n\\nAlso returns the state \"\n                            \"of the contact subscription. Subscription \"\n                            \"can be either  \\\"none\\\", \\\"from\\\", \\\"to\\\", \"\n                            \"\\\"both\\\". Pending can be \\\"in\\\", \\\"out\\\" \"\n                            \"or \\\"none\\\".\",\n                        module = ?MODULE, function = get_roster,\n                        args = [],\n                        policy = user,\n                        result =\n                            {contacts,\n                             {list,\n                              {contact,\n                               {tuple,\n                                [{jid, string},\n                                 {groups, {list, {group, string}}},\n                                 {nick, string}, {subscription, string},\n                                 {pending, string}]}}}}}\n        ].\n</code></pre>"},{"location":"developer/ejabberd-api/oauth/","title":"OAuth Support","text":"<p> added in 15.09</p>"},{"location":"developer/ejabberd-api/oauth/#introduction","title":"Introduction","text":"<p>ejabberd includes a full support OAuth 2.0 deep inside the ejabberd stack.</p> <p>This OAuth integration makes ejabberd:</p> <ul> <li> <p>an ideal project to develop XMPP applications with Web in mind, as it exposes ejabberd features as ReST or XML-RPC HTTP based API endpoints. OAuth makes ejabberd the ideal XMPP server to integrate in a  larger Web / HTTP ecosystem.</p> </li> <li> <p>a more secure tool that can leverage the use of oAuth token to authenticate, hiding your real password from the client itself. As your password is never shared with client directly with our X-OAUTH2 authentication mechanism, user have less risks of having their primary password leaked.</p> </li> <li> <p>a tool that can be used at the core of larger platforms as oauth token can be used by users and admins to delegate rights to subcomponents / subservices.</p> </li> <li> <p>a tool that is friendly to other online services as users can delegate rights to others SaaS platform they are using. This will be possible to let services access your message archive, show your offline message count or with future commands send message to users and chatrooms on your behalf. This is done in a granular way, with a scope limited to a specific function. And the delegation rights for a specific app / third party can always be revoked at any time as this is usually the case with OAuth services.</p> </li> </ul> <p>You can read more on OAuth from OAuth website.</p>"},{"location":"developer/ejabberd-api/oauth/#configuration","title":"Configuration","text":""},{"location":"developer/ejabberd-api/oauth/#authentication-method","title":"Authentication method","text":"<p>An X-OAUTH2 SASL authentication mechanism is enabled by default in ejabberd.</p> <p>However, if the <code>ejabberd_oauth</code> HTTP request handler is not enabled, there is no way to generate token from outside ejabberd. In this case, you may want to disable X-OAUTH2 with the disable_sasl_mechanisms top-level option in <code>ejabberd.yml</code> file, either at global or at virtual host level:</p> <pre><code>disable_sasl_mechanisms: [\"X-OAUTH2\"]\n</code></pre>"},{"location":"developer/ejabberd-api/oauth/#ejabberd-listeners","title":"ejabberd listeners","text":"<p>To enable OAuth support in ejabberd, you need to edit your <code>ejabberd.yml</code> file to add the following snippets.</p> <p>You first need to expose more HTTP endpoint in ejabberd_http modules:</p> <ul> <li><code>ejabberd_oauth</code> is the request handler that will allow generating token for third-parties (clients, services). It is usually exposed on \"/oauth\" endpoint. This handler is mandatory to support OAuth.</li> <li>mod_http_api request handler enables ReST API endpoint to perform delegated actions on ejabberd using an HTTP JSON API. This handler is usually exposed on \"/api\" endpoint. It is optional.</li> <li>ejabberd_xmlrpc listener can be set on a separate port to query commands using the XML-RPC protocol.</li> </ul> <p>Here is a example of the <code>listen</code> section in ejabberd configuration file, focusing on HTTP handlers:</p> <pre><code>listen:\n  -\n    port: 4560\n    module: ejabberd_http\n    request_handlers:\n      ## Handle ejabberd commands using XML-RPC\n      /: ejabberd_xmlrpc\n  -\n    port: 5280\n    module: ejabberd_http\n    request_handlers:\n      /websocket: ejabberd_http_ws\n      /log: mod_log_http\n      # OAuth support:\n      /oauth: ejabberd_oauth\n      # ReST API:\n      /api: mod_http_api\n</code></pre>"},{"location":"developer/ejabberd-api/oauth/#module-configuration","title":"Module configuration","text":"<p>Some commands are implemented by ejabberd internals and are always available, but other commands are implemented by optional modules. If the documentation of a command you want to use mentions a module, make sure you have enabled that module in <code>ejabberd.yml</code>. For example the add_rosteritem command is implemented in the mod_admin_extra module.</p> <p>By the way, ejabberd implements several commands to manage OAuth, check the oauth tag documentation.</p>"},{"location":"developer/ejabberd-api/oauth/#oauth-specific-parameters","title":"OAuth specific parameters","text":"<p>OAuth is configured using those top-level options:</p> <ul> <li>oauth_access</li> <li>oauth_cache_life_time</li> <li>oauth_cache_missed</li> <li>oauth_cache_rest_failure_life_time</li> <li>oauth_cache_size</li> <li>oauth_client_id_check</li> <li>oauth_db_type</li> <li>oauth_expire</li> <li>oauth_use_cache</li> </ul> <p>A basic setup is to allow all accounts to create tokens, and tokens expire after an hour:</p> <pre><code>oauth_access: all\noauth_expire: 3600\n</code></pre>"},{"location":"developer/ejabberd-api/oauth/#authorization_token","title":"authorization_token","text":"<p>An easy way to generate a token is using the oauth_issue_token command with the ejabberdctl shell script:</p> <pre><code>ejabberdctl oauth_issue_token user1@localhost 3600 ejabberd:admin\n\nr9KFladBTYJS71OggKCifo0GJwyT7oY4 [&lt;&lt;\"ejabberd:admin\"&gt;&gt;]  3600 seconds\n</code></pre> <p>The users can generate tokens themselves by visiting <code>/oauth/authorization_token</code> in a webview in your application or in a web browser. For example, URL can be:</p> <pre><code>http://example.net:5280/oauth/authorization_token\n    ?response_type=token\n    &amp;client_id=Client1\n    &amp;redirect_uri=http://client.uri\n    &amp;scope=get_roster+sasl_auth\n</code></pre> <p>Note: To use the <code>get_roster</code> scope, enable <code>mod_admin_extra</code>, because the get_roster  API is defined in that module. Otherwise, the command is unknown and you will get an <code>invalid_scope</code> error. See Module configuration for details.</p> <p>Parameters are described in OAuth 2.0 specification:</p> <ul> <li><code>response_type</code>: Should be <code>token</code>.</li> <li><code>client_id</code>: This is the name of the application that is asking for Oauth token.</li> <li><code>scope</code>: This is the scope of the rights being delegated to the application. It will limit the feature the application can perform and thus ensure the user is not giving away more right than expected by the application. As a developer, you should always limit the scope to what you actually need.</li> <li><code>redirect_uri</code>: After token is generated, token is passed to the application using the redirect URI. It can obviously work for web applications, but also for mobile applications, using a redirect URI that the mobile application have registered: Proper code for handling the token will thus be executed directly in the mobile application.</li> <li><code>state</code>: State parameter is optional and use by client to pass information that will be passed as well as state parameter in the redirect URI.</li> </ul> <p>Directing the user to this URL will present an authentication form summarizing what is the app requiring the token and the scope / rights that are going to be granted.</p> <p>The user can then put their login and password to confirm that they accept granting delegating rights and confirm the token generation. If the provided credentials are valid, the browser or webview will redirect the user to the redirect_uri, to actually let ejabberd pass the token to the app that requested it. It can be either a Web app or `a mobile / desktop application.</p>"},{"location":"developer/ejabberd-api/oauth/#redirect_uri","title":"redirect_uri","text":"<p>The <code>redirect_uri</code> originally passed in the authorization_token request will be called on successful validation of user credentials, with added parameters.</p> <p>For example, redirect URI called by ejabberd can be:</p> <pre><code>http://client.uri/\n    ?access_token=RHIT8DoudzOctdzBhYL9bYvXz28xQ4Oj\n    &amp;token_type=bearer\n    &amp;expires_in=3600\n    &amp;scope=user_get_roster+sasl_auth\n    &amp;state=\n</code></pre> <p>Parameters are described in OAuth specification:</p> <ul> <li><code>access_token</code>: This is the actual token that the client application can use for OAuth authentication.</li> <li><code>token_type</code>: ejabberd supports <code>bearer</code> token type.</li> <li><code>expires_in</code>: This is the validity duration of the token, in seconds. When the token expires, a new authorization token will need to be generated an approved by the user.</li> </ul> <ul> <li><code>scope</code>: Confirms the granted scope to the requesting application. Several scopes can be passed, separated by '+'.</li> <li><code>state</code>: If a state parameter was passed by requesting application in authorization_token URL, it will be passed back to the   application as a parameter of the <code>redirect_uri</code> to help with the client workflow.</li> </ul>"},{"location":"developer/ejabberd-api/oauth/#scopes","title":"Scopes","text":"<ul> <li><code>sasl_auth</code>: This scope is use to generate a token that can login over XMPP using SASL X-OAUTH2 mechanism.</li> <li><code>ejabberd:admin</code></li> <li><code>ejabberd:user</code></li> <li>Scopes for each existing API command.   For example, there is a scope <code>registered_users</code>  because there is a command called registered_users.   Ensure you enable the module that defines the command that you want to use, see Module configuration for details.</li> </ul>"},{"location":"developer/ejabberd-api/oauth/#x-oauth2-authentication","title":"X-OAuth2 Authentication","text":"<p>You can connect to ejabberd using an X-OAUTH2 token that is valid in the scope <code>sasl_auth</code>. You can use an OAuth token as generated in the previous steps instead of a password when connecting to ejabberd servers support OAuth SASL mechanism.</p> <p>When enabled, X-OAUTH2 SASL mechanism is advertised in server stream features:</p> <pre><code>&lt;stream:features&gt;\n  &lt;c xmlns=\"http://jabber.org/protocol/caps\" node=\"http://www.process-one.net/en/ejabberd/\" ver=\"nM19M+JK0ZBMXK7iJAvKnmDuQus=\" hash=\"sha-1\"/&gt;\n  &lt;register xmlns=\"http://jabber.org/features/iq-register\"/&gt;\n  &lt;mechanisms xmlns=\"urn:ietf:params:xml:ns:xmpp-sasl\"&gt;\n    &lt;mechanism&gt;PLAIN&lt;/mechanism&gt;\n    &lt;mechanism&gt;DIGEST-MD5&lt;/mechanism&gt;\n    &lt;mechanism&gt;X-OAUTH2&lt;/mechanism&gt;\n    &lt;mechanism&gt;SCRAM-SHA-1&lt;/mechanism&gt;\n  &lt;/mechanisms&gt;\n&lt;/stream:features&gt;\n</code></pre> <p>Authentication with X-OAUTH2 is done by modifying the SASL auth element as follow:</p> <pre><code>&lt;auth mechanism='X-OAUTH2'\n      xmlns='urn:ietf:params:xml:ns:xmpp-sasl'&gt;\n  base64(\"\\0\" + user_name + \"\\0\" + oauth_token)\n&lt;/auth&gt;\n</code></pre> <p>The content in the auth element should be the base64 encoding of a string containing a null byte, followed by the user name, another null byte and the string representation of the user\u2019s OAuth token. This is similar to how to authenticate with a password using the PLAIN mechanism, except the token is added instead of the user\u2019s password.</p> <p>The response is standard for SASL XMPP authentication. For example, on success, server will reply with:</p> <pre><code>&lt;success xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/&gt;\n</code></pre>"},{"location":"developer/ejabberd-api/oauth/#rest-example","title":"ReST Example","text":"<p>It is possible to use OAuth to authenticate a client when attempting to perform a ReST or XML-RPC query.</p>"},{"location":"developer/ejabberd-api/oauth/#configuring","title":"Configuring","text":"<p>First of all check all the required options are setup (listener, OAuth, API and ACL):</p> <pre><code>listen:\n  -\n    port: 5280\n    ip: \"::\"\n    module: ejabberd_http\n    request_handlers:\n      /api: mod_http_api\n      /oauth: ejabberd_oauth\n\noauth_expire: 3600\noauth_access: all\n\napi_permissions:\n  \"admin access\":\n    who:\n      oauth:\n        scope: \"ejabberd:admin\"\n        access:\n          allow:\n            - acl: loopback\n            - acl: admin\n    what:\n      - \"*\"\n      - \"!stop\"\n      - \"!start\"\n\nacl:\n  admin:\n    user:\n      - user1@localhost\n\nmodules:\n  mod_admin_extra: {}\n  mod_roster: {}\n</code></pre> <p>Register the account with admin rights, and another one used for the queries:</p> <pre><code>ejabberdctl register user1 localhost asd\nejabberdctl register user2 localhost asd\nejabberdctl add_rosteritem user2 localhost tom localhost Tom \"\" none\n</code></pre>"},{"location":"developer/ejabberd-api/oauth/#obtain-bearer-token","title":"Obtain bearer token","text":"<p>Obtain a bearer token as explained in authorization_token, either using <code>ejabberdctl</code>:</p> <pre><code>ejabberdctl oauth_issue_token user1@localhost 3600 ejabberd:admin\nr9KFladBTYJS71OggKCifo0GJwyT7oY4        [&lt;&lt;\"ejabberd:admin\"&gt;&gt;]  3600 seconds\n</code></pre> <p>Or using a web browser:</p> <ul> <li>visit the URL <code>http://localhost:5280/oauth/authorization_token?response_type=token&amp;scope=ejabberd:admin</code></li> <li>User (jid): <code>user1@localhost</code></li> <li>Password: <code>asd</code></li> <li>and click <code>Accept</code></li> </ul> <p>This redirects to a new URL which contains the access_token, for example:</p> <pre><code>http://localhost:5280/oauth/authorization_token\n  ?access_token=r9KFladBTYJS71OggKCifo0GJwyT7oY4\n  &amp;token_type=bearer\n  &amp;expires_in=31536000\n  &amp;scope=ejabberd:admin\n  &amp;state=\n</code></pre>"},{"location":"developer/ejabberd-api/oauth/#passing-credentials","title":"Passing credentials","text":"<p>When using ReST, the client authorization is done by using a bearer token (no need to pass the user and host parameters). For that, include an Authorization HTTP header like:</p> <pre><code>Authorization: Bearer r9KFladBTYJS71OggKCifo0GJwyT7oY4\n</code></pre>"},{"location":"developer/ejabberd-api/oauth/#query-examples","title":"Query examples","text":"<p>Let's use <code>curl</code> to get the list of registered_users with a HTTP GET query:</p> <pre><code>curl -X GET \\\n     -H \"Authorization: Bearer r9KFladBTYJS71OggKCifo0GJwyT7oY4\" \\\n     http://localhost:5280/api/registered_users?host=localhost\n\n[\"user1\",\"user2\"]\n</code></pre> <p>Or provide the bearer token with this option:</p> <pre><code>curl -X GET \\\n     --oauth2-bearer r9KFladBTYJS71OggKCifo0GJwyT7oY4 \\\n     http://localhost:5280/api/registered_users?host=localhost\n</code></pre> <p>With a command like get_roster you can get your own roster, or act as an admin to get any user roster.</p> <p>The HTTP endpoint does not take any parameter, so we can just do an HTTP POST with empty JSON structure list (see <code>-d</code> option).</p> <p>In this example let's use a HTTP POST query:</p> <pre><code>curl -v -X POST \\\n     --oauth2-bearer r9KFladBTYJS71OggKCifo0GJwyT7oY4 \\\n     http://localhost:5280/api/get_roster \\\n     -d '{\"user\": \"user2\", \"server\": \"localhost\"}'\n\n[{\"jid\":\"tom@localhost\",\"nick\":\"Tom\",\"subscription\":\"none\",\"ask\":\"none\",\"group\":\"\"}]\n</code></pre>"},{"location":"developer/ejabberd-api/oauth/#xml-rpc-example","title":"XML-RPC Example","text":"<p>For XML-RPC, credentials must be passed as XML-RPC parameters, including token but also user and host parameters. This is for legacy reason, but will likely change in a future version, making user and host implicit, thanks to bearer token.</p> <p>Here is an (Erlang) XML-RPC example on how to get your own roster:</p> <pre><code>xmlrpc:call({127, 0, 0, 1}, 4560, \"/\",\n  {call, get_roster, [\n    {struct, [{user, \"peter\"},\n              {server, \"example.com\"},\n              {token, \"0n6LaEjyAOxVDyZChzZfoKMYxc8uUk6L\"}]}]},\n  false, 60000, \"Host: localhost\\r\\n\", []).\n</code></pre> <p>This will lead to sending this XML-RPC payload to server:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;methodCall&gt;\n  &lt;methodName&gt;get_roster&lt;/methodName&gt;\n  &lt;params&gt;\n    &lt;param&gt;\n      &lt;value&gt;\n        &lt;struct&gt;\n          &lt;member&gt;\n            &lt;name&gt;server&lt;/name&gt;\n            &lt;value&gt;\n              &lt;string&gt;example.com&lt;/string&gt;\n            &lt;/value&gt;\n          &lt;/member&gt;\n          &lt;member&gt;\n            &lt;name&gt;user&lt;/name&gt;\n            &lt;value&gt;\n              &lt;string&gt;peter&lt;/string&gt;\n            &lt;/value&gt;\n          &lt;/member&gt;\n          &lt;member&gt;\n            &lt;name&gt;token&lt;/name&gt;\n            &lt;value&gt;\n              &lt;string&gt;0n6LaEjyAOxVDyZChzZfoKMYxc8uUk6L&lt;/string&gt;\n            &lt;/value&gt;\n          &lt;/member&gt;\n        &lt;/struct&gt;\n      &lt;/value&gt;\n    &lt;/param&gt;\n  &lt;/params&gt;\n&lt;/methodCall&gt;\n</code></pre> <p>To get roster of other user using admin authorization, this erlang XML-RPC code can be used:</p> <pre><code>xmlrpc:call({127, 0, 0, 1}, 4560, \"/\",\n  {call, get_roster, [\n    {struct, [{user, \"admin\"},\n              {server, \"example.com\"},\n              {token, \"0n6LaEjyAOxVDyZChzZfoKMYxc8uUk6L\"}\n              {admin, true}]},\n    {struct, [{user, \"peter\"},\n              {server, \"example.com\"}]}]},\n  false, 60000, \"Host: localhost\\r\\n\", []).\n</code></pre> <p>This is an equivalent Python 2 script:</p> <pre><code>import xmlrpclib\n\nserver_url = 'http://127.0.0.1:4560'\nserver = xmlrpclib.ServerProxy(server_url)\n\nLOGIN = {'user': 'admin',\n         'server': 'example.com',\n         'token': '0n6LaEjyAOxVDyZChzZfoKMYxc8uUk6L',\n         'admin': True}\n\ndef calling(command, data):\n    fn = getattr(server, command)\n    return fn(LOGIN, data)\n\nprint calling('get_roster', {'user':'peter', 'server':'example.com'})\n</code></pre> <p>And this is an equivalent Python 3 script:</p> <pre><code>from xmlrpc import client\n\nserver_url = 'http://127.0.0.1:4560'\nserver = client.ServerProxy(server_url)\n\nLOGIN = {'user': 'admin',\n         'server': 'example.com',\n         'token': '0n6LaEjyAOxVDyZChzZfoKMYxc8uUk6L',\n         'admin': True}\n\ndef calling(command, data):\n    fn = getattr(server, command)\n    return fn(LOGIN, data)\n\nresult = calling('get_roster', {'user':'peter', 'server':'example.com'})\nprint(result)\n</code></pre> <p>Those calls would send this XML to server:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;methodCall&gt;\n  &lt;methodName&gt;get_roster&lt;/methodName&gt;\n  &lt;params&gt;\n    &lt;param&gt;\n      &lt;value&gt;\n        &lt;struct&gt;\n          &lt;member&gt;\n            &lt;name&gt;admin&lt;/name&gt;\n            &lt;value&gt;\n              &lt;boolean&gt;1&lt;/boolean&gt;\n            &lt;/value&gt;\n          &lt;/member&gt;\n          &lt;member&gt;\n            &lt;name&gt;server&lt;/name&gt;\n            &lt;value&gt;\n              &lt;string&gt;example.com&lt;/string&gt;\n            &lt;/value&gt;\n          &lt;/member&gt;\n          &lt;member&gt;\n            &lt;name&gt;user&lt;/name&gt;\n            &lt;value&gt;\n              &lt;string&gt;admin&lt;/string&gt;\n            &lt;/value&gt;\n          &lt;/member&gt;\n          &lt;member&gt;\n            &lt;name&gt;token&lt;/name&gt;\n            &lt;value&gt;\n              &lt;string&gt;0n6LaEjyAOxVDyZChzZfoKMYxc8uUk6L&lt;/string&gt;\n            &lt;/value&gt;\n          &lt;/member&gt;\n        &lt;/struct&gt;\n      &lt;/value&gt;\n    &lt;/param&gt;\n    &lt;param&gt;\n      &lt;value&gt;\n        &lt;struct&gt;\n          &lt;member&gt;\n            &lt;name&gt;user&lt;/name&gt;\n            &lt;value&gt;\n              &lt;string&gt;peter&lt;/string&gt;\n            &lt;/value&gt;\n          &lt;/member&gt;\n          &lt;member&gt;\n            &lt;name&gt;server&lt;/name&gt;\n            &lt;value&gt;\n              &lt;string&gt;example.com&lt;/string&gt;\n            &lt;/value&gt;\n          &lt;/member&gt;\n        &lt;/struct&gt;\n      &lt;/value&gt;\n    &lt;/param&gt;\n  &lt;/params&gt;\n&lt;/methodCall&gt;\n</code></pre>"},{"location":"developer/ejabberd-api/permissions/","title":"API Permissions","text":"<p> added in 16.12</p> <p>This page describes ejabberd's flexible permission mechanism.</p> <p>Access to all available endpoints are configured using the <code>api_permissions</code> top-level option.</p> <p>It allows to define multiple groups, each one with separate list of filters on who and what are allowed by rules specified inside it.</p> <p>Basic rule looks like this:</p> <pre><code>api_permissions:\n  \"admin access\":\n    who:\n      - admin\n    what:\n      - \"*\"\n      - \"!stop\"\n    from:\n      - ejabberd_ctl\n      - mod_http_api\n</code></pre> <p>It tells that group named <code>Admin access</code> allows all users that are accepted by ACL rule <code>admin</code> to execute all commands except command <code>stop</code>, using the command-line tool <code>ejabberdctl</code> or sending a ReST query handled by mod_http_api.</p> <p>Each group has associated name (that is just used in log messages), <code>who</code> section for rules that authentication details must match, <code>what</code> section for specifying list of command, and <code>from</code> with list of modules that API was delivered to.</p>"},{"location":"developer/ejabberd-api/permissions/#rules-inside-who-section","title":"Rules inside <code>who</code> section","text":"<p>There are 3 types of rules that can be placed in <code>who</code> section:</p> <ul> <li> <p>acl: Name | ACLDefinition   or the short version: Name | ACLRule   This accepts a command when the authentication provided matches   rules of <code>Name</code> Access Control List   (or inline rules from <code>ACLDefinition</code> or <code>ACLRule</code>)</p> </li> <li> <p>access: Name | AccessDefinition   This allows execution if   the Access Rule <code>Name</code> or inline <code>AccessDefinition</code>   returns <code>allowed</code> for command's authentication details</p> </li> <li> <p>oauth: ListOfRules   This rule (and only this) will match for commands that were executed   with OAuth authentication.   Inside ListOfRules you can use any rule   described above (<code>acl: Name</code>, <code>AClName</code>, <code>access: Name</code>) and   additionally you must include <code>scope: ListOfScopeNames</code> with OAuth   scope names that must match scope used to generate OAuth token used   in command authentication.</p> </li> </ul> <p><code>who</code> allows the command to be executed if at least one rule matches.</p> <p>If you want to require several rules to match at this same time, use <code>access</code> (see examples below).</p> <p>Missing <code>who</code> rule is equivalent to <code>who: none</code> which will stop group from accepting any command.</p>"},{"location":"developer/ejabberd-api/permissions/#examples-of-who-rules","title":"Examples of <code>who</code> rules","text":"<p>This accepts user <code>admin@server.com</code> or commands originating from localhost:</p> <pre><code>who:\n  user: admin@server.com\n  ip: 127.0.0.1/8\n</code></pre> <p>This only allows execution of a command if it's invoked by user <code>admin@server.com</code> and comes from localhost address. If one of those restrictions isn't satisfied, execution will fail:</p> <pre><code>who:\n  access:\n    allow:\n      user: admin@server.com\n      ip: 127.0.0.1/8\n</code></pre> <p>Those rules match for users from <code>muc_admin</code> ACL both using regular authentication and OAuth:</p> <pre><code>who:\n  access:\n    allow:\n      acl: muc_admin\n  oauth:\n    scope: \"ejabberd:admin\"\n    access:\n      allow:\n        acl: muc_admin\n</code></pre>"},{"location":"developer/ejabberd-api/permissions/#rules-in-what-section","title":"Rules in <code>what</code> section","text":"<p>Rules in <code>what</code> section are constructed from <code>\"strings\"</code> literals. You can use:</p> <ul> <li>\"command_name\" of an existing API command</li> <li>command_name is same as before, but no need to provide <code>\"</code></li> <li>\"*\" is a wildcard rule to match all commands</li> <li>\"[tag: tagname ]\" allows all commands that have been declared with tag <code>tagname</code>.   You can consult the list of tags and their commands with: <code>ejabberdctl help tags</code></li> </ul> <p>Additionally each rule can be prepended with <code>!</code> character to change it into negative assertion rule. Command names that would match what is after <code>!</code> character will be removed from list of allowed commands.</p> <p>Missing <code>what</code> rule is equivalent to <code>what: \"!*\"</code> which will stop group from accepting any command.</p>"},{"location":"developer/ejabberd-api/permissions/#example-of-what-rules","title":"Example of <code>what</code> rules","text":"<p>This allows execution of all commands except command <code>stop</code>:</p> <pre><code>what:\n  - \"*\"\n  - \"!stop\"\n</code></pre> <p>This allows execution of <code>status</code> and commands with tag <code>session</code> (like <code>num_resources</code> or <code>status_list</code>):</p> <pre><code>what:\n  - status\n  - \"[tag:account]\"\n</code></pre> <p>This matches no command:</p> <pre><code>what:\n  - start\n  - \"!*\"\n</code></pre>"},{"location":"developer/ejabberd-api/permissions/#rules-in-from-section","title":"Rules in <code>from</code> section","text":"<p>This section allows to specify list of allowed module names that expose API to outside world. Currently those modules are <code>ejabberd_xmlrpc</code>, <code>mod_http_api</code> and <code>ejabberd_ctl</code>.</p> <p>If <code>from</code> section is missing from group then all endpoints are accepted, if it's specified endpoint must be listed inside it to be allowed to execute.</p>"},{"location":"developer/ejabberd-api/permissions/#examples","title":"Examples","text":"<p>Those rules allow execution of any command invoked by <code>ejabberdctl</code> shell command, or all command except <code>start</code> and <code>stop</code> for users in ACL admin, with regular authentication or <code>ejabberd:admin</code> scoped OAuth tokens.</p> <pre><code>api_permissions:\n  \"console commands\":\n    from:\n      - ejabberd_ctl\n    who: all\n    what: \"*\"\n  \"admin access\":\n    who:\n      access:\n        allow:\n          - acl: admin\n      oauth:\n        scope: \"ejabberd:admin\"\n        access:\n          allow:\n            - acl: admin\n    what:\n      - \"*\"\n      - \"!stop\"\n      - \"!start\"\n</code></pre>"},{"location":"developer/ejabberd-api/simple-configuration/","title":"Simple ejabberd Rest API Configuration","text":""},{"location":"developer/ejabberd-api/simple-configuration/#restrict-to-local-network","title":"Restrict to Local network","text":"<p>If you are planning to use ejabberd API for admin purpose, it is often enough to configure it to be available local commands. Access is thus generally limited by IP addresses, either restricted to localhost only, or restricted to one of your platform back-end.</p> <ol> <li> <p>Make sure an ejabberd_http listener is using mod_http_api on a given root URL and on a desired port:</p> <pre><code>listen:\n  -\n    port: 5281\n    module: ejabberd_http\n    ip: 127.0.0.1\n    request_handlers:\n      /api: mod_http_api\n</code></pre> <p>The <code>ip</code> option ensures it listens only on the local interface (127.0.0.1) instead of listening on all interface (0.0.0.0).</p> </li> <li> <p>By defining <code>api_permissions</code>, you can then allow HTTP request from a specific IP to trigger API commands execution without user credentials:</p> <pre><code>api_permissions:\n  \"API used from localhost allows all calls\":\n    who:\n      ip: 127.0.0.1/8\n    what:\n      - \"*\"\n      - \"!stop\"\n      - \"!start\"\n</code></pre> <p>Note</p> <p>The <code>stop</code> and <code>start</code> commands are disabled in that example as they are usually restricted to the ejabberdctl command-line tool. They are considered too sensitive to be exposed through API.</p> </li> <li> <p>Now you can query the API:</p> <ul> <li> <p>Example using <code>POST</code> query: <pre><code>curl -X POST \\\n     -H \"Content-type: application/json\" \\\n     \"127.0.0.1:5281/api/registered_users\" \\\n     -d '{\"host\": \"localhost\"}'\n\n[\"user2\",\"user8\"]\n</code></pre></p> </li> <li> <p>Minimal example using <code>POST</code>: <pre><code>curl 127.0.0.1:5281/api/registered_users -d '{\"host\": \"localhost\"}'\n\n[\"user2\",\"user8\"]\n</code></pre></p> </li> <li> <p><code>GET</code> is also supported when the arguments are just string or integers: <pre><code>curl '127.0.0.1:5281/api/registered_users?host=localhost'\n\n[\"user2\",\"user8\"]\n</code></pre></p> </li> </ul> </li> </ol>"},{"location":"developer/ejabberd-api/simple-configuration/#encryption","title":"Encryption","text":"<p>If you already defined certificates and your connection is not on a local network, you may want to use encryption.</p> <ol> <li> <p>Setup encryption like this:</p> <pre><code>listen:\n  -\n    port: 5281\n    module: ejabberd_http\n    tls: true\n    request_handlers:\n      /api: mod_http_api\n</code></pre> </li> <li> <p>Now you can query using HTTPS:</p> <pre><code>curl 'https://127.0.0.1:5281/api/registered_users?host=localhost'\n\n[\"user2\",\"user8\"]\n</code></pre> </li> <li> <p>If you are using a self-signed certificate, you can bypass the corresponding error message:</p> <pre><code>curl --insecure 'https://127.0.0.1:5281/api/registered_users?host=localhost'\n\n[\"user2\",\"user8\"]\n</code></pre> </li> </ol>"},{"location":"developer/ejabberd-api/simple-configuration/#basic-authentication","title":"Basic Authentication","text":"<p>Quite probably you will want to require authentication to execute API queries, either using basic auth or OAuth.</p> <ol> <li> <p>Assuming you have the simple listener:</p> <pre><code>listen:\n  -\n    port: 5281\n    module: ejabberd_http\n    ip: 127.0.0.1\n    request_handlers:\n      /api: mod_http_api\n</code></pre> </li> <li> <p>Define an ACL with the account that you will use to authenticate:</p> <pre><code>acl:\n  apicommands:\n    user: john@localhost\n</code></pre> </li> <li> <p>Allow only that ACL to use the API:</p> <pre><code>api_permissions:\n  \"some playing\":\n    from:\n      - ejabberd_ctl\n      - mod_http_api\n    who:\n      acl: apicommands\n    what: \"*\"\n</code></pre> </li> <li> <p>If that account does not yet exist, register it:</p> <pre><code>ejabberdctl register john localhost somePass\n</code></pre> </li> <li> <p>Now, when sending an API query, provide the authentication for that account:</p> <pre><code>curl --basic --user john@localhost:somePass \\\n     '127.0.0.1:5281/api/registered_users?host=localhost'\n\n[\"user2\",\"user8\",\"john\"]\n</code></pre> </li> <li> <p>Example Python code:</p> <pre><code>import requests\n\nurl = \"http://localhost:5281/api/registered_users\"\ndata = {\n    \"host\": \"localhost\"\n}\n\nres = requests.post(url, json=data, auth=(\"john@localhost\", \"somePass\"))\n\nprint(res.text)\n</code></pre> </li> </ol>"},{"location":"developer/ejabberd-api/simple-configuration/#oauth-authentication","title":"OAuth Authentication","text":"<p>Before using OAuth to interact with ejabberd API, you need to configure OAuth support in ejabberd.</p> <p>Here are example entries to check / change in your ejabberd configuration file:</p> <ol> <li> <p>Add a request handler for OAuth:</p> <pre><code>listen:\n  -\n    # Using a separate port for oauth and API to make it easy to protect it\n    # differently than BOSH and WebSocket HTTP interface.\n    port: 5281\n    # oauth and API only listen on localhost interface for security reason\n    # You can set ip to 0.0.0.0 to open it widely, but be careful!\n    ip: 127.0.0.1\n    module: ejabberd_http\n    request_handlers:\n      /api: mod_http_api\n      /oauth: ejabberd_oauth\n</code></pre> </li> <li> <p>Set the oauth_access    top-level option to allow token creation:</p> <pre><code>oauth_access: all\n</code></pre> </li> <li> <p>Define an ACL with the account that you will use to authenticate:</p> <pre><code>acl:\n  apicommands:\n    user: john@localhost\n</code></pre> </li> <li> <p>You can then configure the OAuth commands you want to expose and who can use them:</p> <pre><code>api_permissions:\n  \"admin access\":\n    who:\n      oauth:\n        scope: \"ejabberd:admin\"\n        scope: \"registered_users\"\n        access:\n          allow:\n            acl: apicommands\n    what: \"*\"\n</code></pre> </li> <li> <p>If that account does not yet exist, register it:</p> <pre><code>ejabberdctl register john localhost somePass\n</code></pre> </li> <li> <p>Request an authorization token. A quick way is using ejabberdctl:</p> <pre><code>ejabberdctl oauth_issue_token user123@localhost 3600 ejabberd:admin\nerHymcBiT2r0QsuOpDjIrsEvnOS4grkj   [&lt;&lt;\"ejabberd:admin\"&gt;&gt;]   3600 seconds\n</code></pre> </li> <li> <p>Now, when sending an API query, provide the authentication for that account:</p> <pre><code>curl -H \"Authorization: Bearer erHymcBiT2r0QsuOpDjIrsEvnOS4grkj\" \\\n     '127.0.0.1:5281/api/registered_users?host=localhost'\n\n[\"user2\",\"user8\",\"john\"]\n</code></pre> <p>Or quite simply:</p> <pre><code>curl --oauth2-bearer erHymcBiT2r0QsuOpDjIrsEvnOS4grkj \\\n     '127.0.0.1:5281/api/registered_users?host=localhost'\n\n[\"user2\",\"user8\",\"john\"]\n</code></pre> </li> </ol>"},{"location":"developer/extending-ejabberd/architecture/","title":"Architecture","text":"<p>This section contains information to help your understand ejabberd architecture and will explain how to integrate ejabberd properly into your overall infrastructure.</p>"},{"location":"developer/extending-ejabberd/architecture/#overview","title":"Overview","text":"<p>ejabberd is a configurable system where modules can be enabled or disabled based on customer requirements. Users can connect not only from a regular PC but also from mobile devices and from the web. User data can be stored internally in Mnesia or in one of the support SQL or NoSQL backend. Users can be totally managed by your own backend through a ReST interface.</p> <p>ejabberd internal architecture is organised around its router. Most of the other elements are plugins that can be adapted, enhanced or replaced to build a custom solution tailored to your needs.</p> <p>ejabberd support a core concept of XMPP: Federation. Federation is a mechanism allowing different independent XMPP servers and clusters to communicate with each other.</p> <p>Here is a high level diagram of ejabberd internal architecture:</p> <p></p>"},{"location":"developer/extending-ejabberd/architecture/#typical-large-scale-deployments","title":"Typical large scale deployments","text":"<p>Here is a diagram for a typical ejabberd large scale deployment. It can scale massively and rely on several back-ends.</p> <p></p> <p>Note that ejabberd ejabberd support a core concept of XMPP: Federation. Federation is a mechanism allowing different independent XMPP servers and clusters to communicate with each other. This is a purely optional layer, but it can help integrate with the rest of the world. It is also sometimes internally by companies to group users in subsidiaries or regions.</p>"},{"location":"developer/extending-ejabberd/architecture/#virtual-hosting","title":"Virtual hosting","text":"<p>If you need to manage several small XMPP domains, ejabberd supports virtual hosting.  It means you can host as many domain as you want on a single ejabberd deployment.</p> <p>Instances can be made to be totally independent and invisible for each other if needed (or they can communicate as they would through federation).</p>"},{"location":"developer/extending-ejabberd/elixir/","title":"ejabberd for Elixir Developers","text":"<p> improved in 21.07</p>"},{"location":"developer/extending-ejabberd/elixir/#building-ejabberd-with-mix","title":"Building ejabberd with Mix","text":"<p>You can build ejabberd with Elixir <code>mix</code> tool. This allows ejabberd to use Elixir libraries and ejabberd modules written in Elixir.</p> <p>Please note: Elixir 1.10.3 or higher is required to build a release. Also, if using Erlang/OTP 24, then Elixir 1.11.4 or higher is required.</p> <ol> <li> <p>Make sure you have the    requirements    installed. On MacOS you need to use Homebrew and    set up your environment.</p> </li> <li> <p>Clone ejabberd project from Github:</p> <pre><code>git clone https://github.com/processone/ejabberd.git\ncd ejabberd\n</code></pre> </li> <li> <p>Compile ejabberd:</p> <pre><code>./autogen.sh\n./configure --with-rebar=mix\nmake\n</code></pre> </li> <li> <p>Build a development release:</p> <pre><code>make dev\n</code></pre> </li> <li> <p>There are many ways to start ejabberd, using the <code>ejabberdctl</code> or <code>ejabberd</code> scripts:</p> <pre><code>_build/prod/rel/ejabberd/bin/ejabberdctl iexlive\n_build/prod/rel/ejabberd/bin/ejabberdctl live\n_build/prod/rel/ejabberd/bin/ejabberd start_iex\n</code></pre> </li> <li> <p>You should see that ejabberd is properly started:</p> <pre><code>Erlang/OTP 23 [erts-11.1.8] [source] [64-bit] [smp:2:2] [ds:2:2:10] [async-threads:1]\n\n2021-08-03 13:37:36.561603+02:00 [info] Loading configuration from /home/bernar/e/git/ejabberd/_build/dev/rel/ejabberd/etc/ejabberd/ejabberd.yml\n2021-08-03 13:37:37.541688+02:00 [info] Configuration loaded successfully\n...\n2021-08-03 13:37:40.201590+02:00 [info] ejabberd 21.7.9 is started in the node ejabberd@atenea in 3.86s\n2021-08-03 13:37:40.203678+02:00 [info] Start accepting TCP connections at [::]:5222 for ejabberd_c2s\n\nInteractive Elixir (1.10.3) - press Ctrl+C to exit (type h() ENTER for help)\niex(ejabberd@localhost)1&gt;\n</code></pre> </li> <li> <p>Now that ejabberd starts correctly, adapt to your needs the default ejabberd    configuration file located at <code>_build/dev/rel/ejabberd/etc/ejabberd/ejabberd.yml</code>    For example, enable this example Elixir ejabberd module:</p> <pre><code>modules:\n  'Ejabberd.Module.Example': {}\n  mod_adhoc: {}\n</code></pre> </li> </ol>"},{"location":"developer/extending-ejabberd/elixir/#embed-ejabberd-in-an-elixir-app","title":"Embed ejabberd in an elixir app","text":"<p>ejabberd is available as an Hex.pm application: ejabberd on hex.pm.</p> <p>This means you can build a customized XMPP messaging platform with Elixir on top of ejabberd by leveraging ejabberd code base in your app and providing only your custom modules. This makes the management of your ejabberd plugins easier and cleaner.</p> <p>To create your own application depending on ejabberd, you can go through the following steps:</p> <ol> <li> <p>Create a new Elixir app using <code>mix</code>:</p> <pre><code>mix new myapp\ncd myapp\n</code></pre> </li> <li> <p>Add ejabberd package as a    dependency in your <code>mix.exs</code> file:</p> <pre><code>  defp deps do\n    [\n     {:ejabberd, \"~&gt; 24.6\"}\n    ]\n  end\nend\n</code></pre> </li> <li> <p>Get the dependencies and compile them:</p> <pre><code>mix deps.get\nmix compile\n</code></pre> </li> <li> <p>Setup runtime options and ejabberd configuration file:</p> <pre><code>mkdir config\ncp deps/ejabberd/config/runtime.exs config/runtime.exs\nmkdir conf\ncp deps/ejabberd/ejabberd.yml.example conf/ejabberd.yml\n</code></pre> </li> <li> <p>Start your app, ejabberd will be started as a dependency:</p> <pre><code>iex -S mix # similar to: ejabberdctl iexlive\nmix run --no-halt # similar to: ejabberdctl foreground\n</code></pre> </li> <li> <p>You should see that ejabberd is properly started:</p> <pre><code>$ iex -S mix\n2024-07-15 13:33:12.087 [info] Loading configuration from conf/ejabberd.yml\n2024-07-15 13:33:12.301 [info] Configuration loaded successfully\n...\n2024-07-15 13:33:12.816 [info] ejabberd 24.6.0 is started in the node :nonode@nohost in 0.75s\n2024-07-15 13:33:12.842 [info] Start accepting TCP connections at [::]:5222 for :ejabberd_c2s\nErlang/OTP 26 [erts-14.2.5] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:1] [jit:ns]\n\nInteractive Elixir (1.16.3) - press Ctrl+C to exit (type h() ENTER for help)\niex(1)&gt;\n</code></pre> </li> <li> <p>Register an account from Elixir console:</p> <pre><code>:ejabberd_auth.try_register(\"test\", \"localhost\", \"passw0rd\")\n</code></pre> </li> <li> <p>You are all set, you can now connect with an XMPP client!    Notice that the default configuration doesn't have certificates or encryption.</p> </li> </ol>"},{"location":"developer/extending-ejabberd/elixir/#call-elixir-code-in-erlang-code","title":"Call elixir code in erlang code","text":"<p>It's possible to use Elixir libraries in an Erlang module, both the ones included in Elixir, or any other you add as a dependency.</p> <p>This simple example invokes Elixir's String.duplicate/2 function as shown in one of its documentation examples, and uses the result in the ejabberd vCard nickname field:</p> <pre><code>--- a/src/mod_vcard.erl\n+++ b/src/mod_vcard.erl\n@@ -209,6 +209,7 @@ process_local_iq(#iq{type = get, to = To, lang = Lang} = IQ) -&gt;\n     VCard = case mod_vcard_opt:vcard(ServerHost) of\n   undefined -&gt;\n       #vcard_temp{fn = &lt;&lt;\"ejabberd\"&gt;&gt;,\n+    nickname = 'Elixir.String':duplicate(&lt;&lt;\"abc\"&gt;&gt;, 2),\n     url = ejabberd_config:get_uri(),\n     desc = misc:get_descr(Lang, ?T(\"Erlang XMPP Server\")),\n     bday = &lt;&lt;\"2002-11-16\"&gt;&gt;};\n</code></pre> <p>Notice that the elixir code:</p> <pre><code>String.duplicate(\"abc\", 2)\n</code></pre> <p>is written in erlang as:</p> <pre><code>'Elixir.String':duplicate(&lt;&lt;\"abc\"&gt;&gt;, 2),\n</code></pre> <p>Check Erlang/Elixir Syntax: A Crash Course for details.</p>"},{"location":"developer/extending-ejabberd/elixir/#use-elixir-library-in-erlang-code","title":"Use elixir library in erlang code","text":"<p>This example demonstrates how to add an elixir library as a dependency in ejabberd, and use it in an ejabberd module written in erlang.</p> <p>It will use QRCodeEx elixir library to build a QR code of ejabberd's URI and return it as the server vCard photo.</p> <p>First add the dependency to <code>mix.exs</code>:</p> <pre><code>--- a/mix.exs\n+++ b/mix.exs\n@@ -46,7 +46,7 @@ defmodule Ejabberd.MixProject do\n                     :p1_utils, :stringprep, :yconf],\n      included_applications: [:mnesia, :os_mon,\n                              :cache_tab, :eimp, :mqtree, :p1_acme,\n-                             :p1_oauth2, :pkix, :xmpp]\n+                             :p1_oauth2, :pkix, :xmpp, :qrcode_ex]\n      ++ cond_apps()]\n   end\n\n@@ -113,6 +113,7 @@ defmodule Ejabberd.MixProject do\n      {:p1_oauth2, \"~&gt; 0.6\"},\n      {:p1_utils, \"~&gt; 1.0\"},\n      {:pkix, \"~&gt; 1.0\"},\n+     {:qrcode_ex, \"~&gt; 0.1.1\"},\n      {:stringprep, \"&gt;= 1.0.26\"},\n      {:xmpp, \"~&gt; 1.5\"},\n      {:yconf, \"~&gt; 1.0\"}]\n</code></pre> <p>Then call QRCodeEx.encode/2, QRCodeEx.png/2, and provide the result as the photo in the server vcard:</p> <pre><code>--- a/src/mod_vcard.erl\n+++ b/src/mod_vcard.erl\n@@ -206,9 +206,13 @@ process_local_iq(#iq{type = set, lang = Lang} = IQ) -&gt;\n     xmpp:make_error(IQ, xmpp:err_not_allowed(Txt, Lang));\n process_local_iq(#iq{type = get, to = To, lang = Lang} = IQ) -&gt;\n     ServerHost = ejabberd_router:host_of_route(To#jid.lserver),\n+    PhotoEncoded = 'Elixir.QRCodeEx':encode(ejabberd_config:get_uri()),\n+    PhotoBin = 'Elixir.QRCodeEx':png(PhotoEncoded, [{color, &lt;&lt;17, 120, 0&gt;&gt;}]),\n+    PhotoEl = #vcard_photo{type = &lt;&lt;\"image/png\"&gt;&gt;, binval = PhotoBin},\n     VCard = case mod_vcard_opt:vcard(ServerHost) of\n   undefined -&gt;\n       #vcard_temp{fn = &lt;&lt;\"ejabberd\"&gt;&gt;,\n+    photo = PhotoEl,\n     url = ejabberd_config:get_uri(),\n     desc = misc:get_descr(Lang, ?T(\"Erlang XMPP Server\")),\n     bday = &lt;&lt;\"2002-11-16\"&gt;&gt;};\n</code></pre>"},{"location":"developer/extending-ejabberd/elixir/#write-ejabberd-module-in-elixir","title":"Write ejabberd module in elixir","text":"<p>If you plan to write an ejabberd module that heavily depends on Elixir dependencies, you may want to write it in elixir from scratch.</p> <p>The Elixir source code is placed in the ejabberd's lib/ path. Any elixir module placed in <code>lib/</code> will be compiled by Mix, installed with all the other erlang modules, and available for you to use.</p> <p>As you can see, there's a file named mod_example.ex which defines an ejabberd module written in elixir. To enable <code>Ejabberd.Module.Example</code>, add it to <code>ejabberd.yml</code> like this:</p> <pre><code>modules:\n  'Ejabberd.Module.Example': {}\n</code></pre> <p>Let's write a new ejabberd module in elixir, add it to ejabberd's source code, compile and install it. This example module requires the QRCodeEx Elixir library, and adds a simple web page that generates QR code of any given JID.</p> <ol> <li> <p>Copy the mod_qrcode.ex source code to ejabberd's <code>lib/</code> path:</p> <pre><code>lib/mod_qrcode.ex\n</code></pre> </li> <li> <p>Recompile and reinstall ejabberd.</p> </li> <li> <p>Enable the module in <code>ejabberd.yml</code>:</p> <pre><code>listen:\n  -\n    port: 5280\n    request_handlers:\n      /qrcode: 'Elixir.ModQrcode'\n\nmodules:\n  'Elixir.ModQrcode': {}\n</code></pre> </li> <li> <p>When restarting ejabberd, it will show in the logs:</p> <pre><code>2022-07-06 13:14:35.363081+02:00 [info] Starting ejabberd module Qrcode\n</code></pre> </li> <li> <p>Now the ejabberd internal web server provides QR codes of any given JID.    Try visiting an URL like <code>http://localhost:5280/qrcode/anyusername/somedomain/</code></p> </li> </ol>"},{"location":"developer/extending-ejabberd/elixir/#elixir-module-in-ejabberd-contrib","title":"Elixir module in ejabberd-contrib","text":"<p>Using ejabberd-contrib it's possible to install additional ejabberd modules without compiling ejabberd, or requiring ejabberd source code. This is useful if you install ejabberd using binary installers or a container image.</p> <p>And it's possible to write a custom module and add your module to an existing ejabberd installation...</p> <p>Let's write a new ejabberd module in elixir, compile and install in an existing ejabberd deployment without requiring its source code. This example module adds a simple section listing PIDs in the users page in ejabberd WebAdmin.</p> <ol> <li> <p>First, create this path</p> <pre><code>$HOME/.ejabberd-modules/sources/mod_webadmin_pid/lib/\n</code></pre> </li> <li> <p>and copy the mod_webadmin_pid.ex source code to:</p> <pre><code>$HOME/.ejabberd-modules/sources/mod_webadmin_pid/lib/mod_webadmin_pid.ex\n</code></pre> </li> <li> <p>Create a specification file in YAML format as <code>mod_webadmin_pid.spec</code> (see examples from ejabberd-contrib). So, create the file</p> <pre><code>$HOME/.ejabberd-modules/sources/mod_webadmin_pid/mod_webadmin_pid.spec\n</code></pre> <p>with this content:</p> <pre><code>summary: \"Display PIDs in User page in Web Admin\"\n</code></pre> </li> <li> <p>From that point you should see it as available module:</p> <pre><code>ejabberdctl modules_available\nmod_webadmin_pid Display PIDs in User page in Web Admin\n</code></pre> </li> <li> <p>Now you can compile and install that module:</p> <pre><code>ejabberdctl module_install mod_webadmin_pid\n</code></pre> </li> <li> <p>Enable the module in <code>ejabberd.yml</code>:</p> <pre><code>modules:\n  'Elixir.ModWebAdminPid': {}\n</code></pre> </li> <li> <p>When restarting ejabberd, it will show in the logs:</p> <pre><code>2022-07-06 13:14:35.363081+02:00 [info] Starting ejabberd module WebAdminPid\n</code></pre> </li> <li> <p>Finally, go to ejabberd WebAdmin -&gt; Virtual Hosts -&gt; your vhost -&gt; Users -&gt;    some online user -&gt; and there will be a new section \"PIDs\".</p> </li> </ol>"},{"location":"developer/extending-ejabberd/elixir/#record-definition","title":"Record definition","text":"<p>To use an erlang record defined in ejabberd's header file, use Elixir's Record to extract the fields and define an Elixir record with its usage macros.</p> <p>For example, add this to the beginning of mod_example.ex:</p> <pre><code>require Record\n\nRecord.defrecord(:presence,\n  Record.extract(:presence, from_lib: \"xmpp/include/xmpp.hrl\"))\n</code></pre> <p>Later you can use those macros, named like your record, see the examples.</p> <p>In our example, let's improve the <code>on_presence</code> function and use the <code>presence</code> macros to get the <code>to</code> field:</p> <pre><code>def on_presence(_user, _server, _resource, packet) do\n  to_jid = presence(packet, :to)\n  to_str = :jid.to_string(to_jid)\n  info('Received presence for #{to_str}:~n~p', [packet])\n  :none\nend\n</code></pre>"},{"location":"developer/extending-ejabberd/elixir/#mod_qrcodeex","title":"<code>mod_qrcode.ex</code>","text":"<p>Example ejabberd module written in elixir:</p> mod_qrcode.ex<pre><code>defmodule ModQrcode do\n  use Ejabberd.Module\n\n  def start(host, _opts) do\n    info('Starting ejabberd module Qrcode')\n    :ok\n  end\n\n  def stop(host) do\n    info('Stopping ejabberd module Qrcode')\n    :ok\n  end\n\n  def process([username, hostname] = _path, _query) do\n    uri = &lt;&lt;\"xmpp:\", username::binary, \"@\", hostname::binary&gt;&gt;\n    qr = QRCodeEx.svg(QRCodeEx.encode(uri), [{:color, \"#3fb0d2\"}])\n    qxmlel = :fxml_stream.parse_element(qr)\n    {200,\n     [{&lt;&lt;\"Server\"&gt;&gt;, &lt;&lt;\"ejabberd\"&gt;&gt;},\n      {&lt;&lt;\"Content-Type\"&gt;&gt;, &lt;&lt;\"image/svg+xml\"&gt;&gt;}],\n     :ejabberd_web.make_xhtml([], [qxmlel])}\n  end\n\n  def process(path, _query) do\n    info('Received HTTP query with path: ~p', [path])\n    {404, [], \"Not Found\"}\n  end\n\n  def depends(_host, _opts) do\n    []\n  end\n\n  def mod_options(_host) do\n    []\n  end\n\n  def mod_doc() do\n    %{:desc =&gt; 'This is just a demonstration.'}\n  end\n\nend\n</code></pre>"},{"location":"developer/extending-ejabberd/elixir/#mod_webadmin_pidex","title":"<code>mod_webadmin_pid.ex</code>","text":"<p>Example ejabberd module written in elixir:</p> mod_webadmin_pid.ex<pre><code>defmodule ModWebAdminPid do\n  use Ejabberd.Module\n\n  require Record\n\n  Record.defrecord(:xmlel,\n    Record.extract(:xmlel, from_lib: \"xmpp/include/xmpp.hrl\"))\n\n  Record.defrecord(:request,\n    Record.extract(:request, from: \"include/ejabberd_http.hrl\"))\n\n  ##====================================================================\n  ## gen_mod callbacks\n  ##====================================================================\n\n  def start(host, _opts) do\n    info('Starting ejabberd module WebAdminPid')\n    :ejabberd_hooks.add(:webadmin_user, host, __MODULE__, :webadmin_user, 60)\n    :ejabberd_hooks.add(:webadmin_page_host, host, __MODULE__, :webadmin_page, 60)\n    :ok\n  end\n\n  def stop(host) do\n    info('Stopping ejabberd module WebAdminPid')\n    :ejabberd_hooks.delete(:webadmin_user, host, __MODULE__, :webadmin_user, 60)\n    :ejabberd_hooks.delete(:webadmin_page_host, host, __MODULE__, :webadmin_page, 60)\n    :ok\n  end\n\n  def depends(_host, _opts) do\n    []\n  end\n\n  def mod_options(_host) do\n    []\n  end\n\n  def mod_doc() do\n    %{:desc =&gt; 'This is just a demonstration.'}\n  end\n\n  ##====================================================================\n  ## Web Admin\n  ##====================================================================\n\n  def webadmin_user(acc, user, server, _lang) do\n    resources = :ejabberd_sm.get_user_resources(user, server)\n\n    pids_elements = Enum.map(resources,\n      fn resource -&gt;\n        pid = :ejabberd_sm.get_session_pid(user, server, resource)\n        pid_string = :erlang.pid_to_list(pid)\n        xmlel(name: \"a\", attrs: [{\"href\", \"pid/#{pid_string}\"}], children: [xmlcdata: pid_string])\n      end)\n\n    pids_separated = Enum.intersperse(pids_elements, {:xmlcdata, \", \"})\n\n    new_element = xmlel(name: \"h3\", children: [xmlcdata: \"PIDs:\"])\n\n    acc ++ [new_element] ++ pids_separated\n  end\n\n  def webadmin_page(_acc, host, request(path: [\"user\", user, \"pid\", pid])) do\n    res = webadmin_pid(user, host, pid)\n    {:stop, res}\n  end\n\n  def webadmin_page(acc, _host, _request) do\n    acc\n  end\n\n  def webadmin_pid(user, host, pid_string) do\n    us = :jid.to_string(:jid.make(user, host))\n    page_title = 'Pid #{pid_string} of #{us}'\n\n    pid = :erlang.list_to_pid(String.to_charlist(pid_string))\n    pid_info = Process.info(pid)\n    pid_info_string = :io_lib.format(\"~p\", [pid_info])\n\n    [xmlel(name: \"h1\", children: [xmlcdata: page_title]),\n     xmlel(name: \"pre\", children: [xmlcdata: pid_info_string])]\n  end\n\nend\n</code></pre>"},{"location":"developer/extending-ejabberd/localization/","title":"Internationalization and Localization","text":"<p>The source code of ejabberd supports localization: all built-in modules support the <code>xml:lang</code> attribute inside IQ queries, and the Web Admin supports the <code>Accept-Language</code> HTTP header.</p> <p>There are two ways to improve the translation of a language:</p> <ul> <li> <p>Edit the corresponding .po file in ejabberd-po git repository with a gettext-compatible program (Poedit, KBabel, Lokalize, ...). Then submit a Pull Request.</p> </li> <li> <p>Using the ejabberd-po Weblate online service.</p> </li> </ul> <p>Once the translators have improved the <code>po</code> files, you can run <code>make translations</code>. With that command, the translatable strings are extracted from source code to generate the file <code>ejabberd.pot</code>. This file is merged with each .po file to produce updated .po files. Finally those .po files are exported to .msg files, that have a format easily readable by ejabberd.</p>"},{"location":"developer/extending-ejabberd/modules/","title":"ejabberd Modules Development","text":""},{"location":"developer/extending-ejabberd/modules/#introduction","title":"Introduction","text":"<p>ejabberd is based on a modular architecture that makes it highly customizable and infinitely extensible.</p> <p>Here is an overview of ejabberd internal architecture:</p> <p></p>"},{"location":"developer/extending-ejabberd/modules/#what-is-a-module","title":"What is a module ?","text":"<p>Outside of a few infrastructure core components most of ejabberd features are developed as modules. Modules are used to extend the features of ejabberd (plugins).</p>"},{"location":"developer/extending-ejabberd/modules/#how-to-write-a-custom-module","title":"How to write a custom module ?","text":"<p>Ejabberd comes with a lot of modules, but sometimes you may need an unsupported feature from the official sources or maybe you need to write your own custom implementation for your very special needs.</p> <p>Each modules is written in either Erlang or Elixir. To use them, you typically declare them in ejabberd configuration file. That's also the place where you can configure the module, by passing supported options to overload its default behaviour.</p> <p>On ejabberd launch, the server will start all the declared modules. You can start (or stop) them manually from Erlang shell as well.</p> <p>As a convention, module names starts with \"mod_\", but you can actually call them as you want.</p>"},{"location":"developer/extending-ejabberd/modules/#the-gen_mod-behaviour","title":"The <code>gen_mod</code> behaviour","text":"<p>All ejabberd modules are implementing the <code>gen_mod</code> behaviour. It means that a module must provide the following API:</p> <pre><code>start(Host, Opts) -&gt; ok\nstop(Host) -&gt; ok\ndepends(Host, Opts) -&gt; []\nmod_options(Host) -&gt; []\n</code></pre> <p>Parameters are:</p> <ul> <li>Host = <code>string()</code></li> <li>Opts = <code>[{Name, Value}]</code></li> <li>Name = Value = <code>string()</code></li> </ul> <p>Host is the name of the virtual host running the module. The <code>start/2</code> and <code>stop/1</code> functions are called for each virtual host at start and stop time of the server.</p> <p><code>Opts</code> is a lists of options as defined in the configuration file for the module. They can be retrieved with the <code>gen_mod:get_opt/3</code> function.</p>"},{"location":"developer/extending-ejabberd/modules/#mod_hello_world","title":"mod_hello_world","text":"<p>The following code shows the simplest possible module.</p> mod_hello_world.erl<pre><code>-module(mod_hello_world).\n\n-behaviour(gen_mod).\n\n%% Required by ?INFO_MSG macros\n-include(\"logger.hrl\").\n\n%% Required by ?T macro\n-include(\"translate.hrl\").\n\n%% gen_mod API callbacks\n-export([start/2, stop/1, depends/2, mod_options/1, mod_doc/0]).\n\nstart(_Host, _Opts) -&gt;\n    ?INFO_MSG(\"Hello, ejabberd world!\", []),\n    ok.\n\nstop(_Host) -&gt;\n    ?INFO_MSG(\"Bye bye, ejabberd world!\", []),\n    ok.\n\ndepends(_Host, _Opts) -&gt;\n    [].\n\nmod_options(_Host) -&gt;\n    [].\n\nmod_doc() -&gt;\n    #{desc =&gt;\n          ?T(\"This is an example module.\")}.\n</code></pre> <p>Now you have two ways to compile and install the module: If you compiled ejabberd from source code, you can copy that source code file with all the other ejabberd source code files, so it will be compiled and installed with them. If you installed some compiled ejabberd package, you can create your own module dir, see Add module to ejabberd-modules.</p> <p>You can enable your new module by adding it in the ejabberd config file. Adding the following snippet in the config file will integrate the module in ejabberd module lifecycle management. It means the module will be started at ejabberd launch and stopped during ejabberd shutdown process:</p> <pre><code>modules:\n  ...\n  mod_hello_world: {}\n</code></pre> <p>Or you can start / stop it manually by typing the following commands in an Erlang shell running ejabberd:</p> <ul> <li> <p>To manually start your module:</p> <pre><code>gen_mod:start_module(&lt;&lt;\"localhost\"&gt;&gt;, mod_hello_world, []).\n</code></pre> </li> <li> <p>To manually stop your module:</p> <pre><code>gen_mod:stop_module(&lt;&lt;\"localhost\"&gt;&gt;, mod_hello_world).\n</code></pre> </li> </ul> <p>When the module is started, either on ejabberd start or manually, you should see the following message in ejabberd log file:</p> <pre><code>19:13:29.717 [info] Hello, ejabberd world!\n</code></pre>"},{"location":"developer/extending-ejabberd/modules/#add-module-to-ejabberd-modules","title":"Add module to ejabberd-modules","text":"<p>If you install ejabberd using the official ProcessOne installer, it includes everything needed to build ejabberd modules on its own.</p> <p>If using a container image, follow the specific steps to install your module in a container image.</p> <p>The value of <code>$HOME</code> vary depending on your ejabberd installation method, check ejabberd-modules for details.</p> <ol> <li> <p>First, create this path</p> <pre><code>$HOME/.ejabberd-modules/sources/mod_hello_world/src/\n</code></pre> </li> <li> <p>and copy your source code to this location:</p> <pre><code>$HOME/.ejabberd-modules/sources/mod_hello_world/src/mod_hello_world.erl\n</code></pre> </li> <li> <p>Create a specification file in YAML format as mod_hello_world.spec (see examples from ejabberd-contrib). So, create the file</p> <pre><code>$HOME/.ejabberd-modules/sources/mod_hello_world/mod_hello_world.spec\n</code></pre> <p>with this content:</p> mod_hello_world.spec<pre><code>summary: \"Hello World example module\"\n</code></pre> </li> <li> <p>From that point you should see it as available module:</p> <pre><code>ejabberdctl modules_available\nmod_hello_world Hello World example module\n</code></pre> </li> <li> <p>Now you can install and uninstall that module like any other,     as described in the previous section.</p> </li> <li> <p>If you plan to publish your module, you should check if your module     follows the policy and if it compiles correctly:</p> <pre><code>ejabberdctl module_check mod_mysupermodule\nok\n</code></pre> <p>If all is OK, your\u2019re done ! Else, just follow the warning/error messages to fix the issues.</p> </li> </ol> <p>You may consider publishing your module as a tgz/zip archive or git repository, and send your spec file for integration in ejabberd-contrib repository. ejabberd-contrib will only host a copy of your spec file and does not need your code to make it available to all ejabberd users.</p>"},{"location":"developer/extending-ejabberd/modules/#next-steps","title":"Next steps","text":"<p>From there, you know how to package a module to integrate it inside ejabberd environment. Packaging a module allows you to:</p> <ul> <li>Integrate in ejabberd overall application life cycle, i.e. with the   start and stop mechanism.</li> <li>Get data from ejabberd configuration file.</li> </ul> <p>Now, to do useful stuff, you need to integrate with ejabberd data flow. You have two mechanisms available from ejabberd modules:</p> <ul> <li> <p>Events and Hooks: This is to handle internal ejabberd triggers and   subscribe to them to perform actions or provide data.</p> </li> <li> <p>IQ Handlers: This is a way to register ejabberd module to handle   XMPP Info Queries. This is the XMPP way to provide new services.</p> </li> </ul>"},{"location":"developer/extending-ejabberd/pubsub/","title":"PubSub overview","text":"<p>This document describes ejabberd's PubSub architecture to understand how to write custom plugins.</p> <p><code>XEP-0060</code> (PubSub) is more than 100 pages of specifications, with 12 very detailed use cases with many possibles options and possible situations:</p> <ul> <li>Subscribe</li> <li>Unsubscribe</li> <li>Configure subscription</li> <li>Retrieve items</li> <li>Publish item</li> <li>Delete item</li> <li>Create node</li> <li>Configure node</li> <li>Delete node</li> <li>Purge node</li> <li>Manage subscriptions</li> <li>Manage affiliations</li> </ul> <p><code>XEP-0163</code> (PEP) is based on PubSub XEP-0248 (deprecated) for Collection Nodes and uses generic PubSub functionality, specified in XEP-0060.</p>"},{"location":"developer/extending-ejabberd/pubsub/#history","title":"History","text":"<p>Initial implementation made by Aleksey Shchepin, ability to organise nodes in a tree added by Christophe Romain in 2007. First attempt to create a flexible API for plugins started in 2007, and improved until 2015.</p>"},{"location":"developer/extending-ejabberd/pubsub/#implementation","title":"Implementation","text":"<p>PubSub service comes in several parts:</p> <ul> <li>A poll of iq handlers handled by ejabberd router</li> <li>A sending process</li> <li>A core router to perform high level actions for every use case</li> <li>Plugins to handle nodes, affiliations/subscriptions, and items at lower level and interface with data backend</li> </ul>"},{"location":"developer/extending-ejabberd/pubsub/#nodetree-plugins","title":"Nodetree plugins","text":"<p>They handles storage and organisation of PubSub nodes. Called on get, create and delete node. Default implementation includes three plugins:</p> <ul> <li>tree: (default) both internal and odbc backend.</li> <li>virtual: no backend, no configurable nodes.</li> <li>dag: handles <code>XEP-0248</code>.</li> </ul> <p>If all nodes shares same configuration, I/O on pubsub_node can be avoided using virtual nodetree.</p>"},{"location":"developer/extending-ejabberd/pubsub/#node-plugins","title":"Node plugins","text":"<p>They handle affiliations, subscriptions and items. They provide default node configuration and features. Called on every pubsub use cases. Each plugin is responsible of checks to handle all possibles cases and reply action result to PubSub engine to let it handle the routing. The most common plugins available in default installation are:</p> <ul> <li>flat: (default) all nodes are in a flat namespace, there are no parent/child nodes</li> <li>hometree: all nodes are organized as in a filesystem under /home/hostname/user/...</li> <li>pep: handles <code>XEP-0163</code></li> <li>dag: handles <code>XEP-0248</code>.</li> <li>public, private, ... which are derivate of flat, with different default node configuration.</li> </ul>"},{"location":"developer/extending-ejabberd/pubsub/#node_flat","title":"<code>node_flat</code>","text":"<p><code>node_flat</code> is the default plugin, without node hierarchy, which handles standard PubSub case. The default node configuration with this plugin is:</p> <pre><code>[{deliver_payloads, true},\n {notify_config, false},\n {notify_delete, false},\n {notify_retract, true},\n {purge_offline, false},\n {persist_items, true},\n {max_items, 10},\n {subscribe, true},\n {access_model, open},\n {roster_groups_allowed, []},\n {publish_model, publishers},\n {notification_type, headline},\n {max_payload_size, 60000},\n {send_last_published_item, on_sub_and_presence},\n {deliver_notifications, true},\n {presence_based_delivery, false}].\n</code></pre>"},{"location":"developer/extending-ejabberd/pubsub/#node_hometree","title":"node_hometree","text":"<p>node_hometree use exact same features as flat plugin, but organise nodes in a tree following same scheme as path in filesystem. Every user can create nodes in its own home. Each node can contain items and/or sub-nodes. Example:</p> <pre><code>/home/user\n/home/domain/user\n/home/domain/user/my_node\n/home/domain/user/my_node/child_node\n</code></pre>"},{"location":"developer/extending-ejabberd/pubsub/#node_pep","title":"node_pep","text":"<p>node_pep handles XEP-0163: Personal Eventing Protocol It do not persist items, just keeping last item in memory cache. Node names are raw namespace attached to a given bare JID. Every user can have its own node with a common namespace sharing with others.</p>"},{"location":"developer/extending-ejabberd/pubsub/#node_dag","title":"node_dag","text":"<p>node_dag handles XEP-0248: PubSub Collection Nodes Contribution from Brian Cully. Every node takes places in a tree and is either a collection node (have only sub-nodes) or a leaf node (contains only items). No restriction on the tree structure</p>"},{"location":"developer/extending-ejabberd/pubsub/#plugin-design","title":"Plugin design","text":"<p>Due to complexity of XEP-0060, PubSub engine do successive calls to nodetree and node plugins in order to check validity, perform corresponding action and return result or appropriate error to users. Plugin design follows this requirement and divide actions by type of data to allow transient backend implementation without any PubSub engine change.</p>"},{"location":"developer/extending-ejabberd/pubsub/#create-node","title":"Create Node","text":""},{"location":"developer/extending-ejabberd/pubsub/#delete-node","title":"Delete Node","text":""},{"location":"developer/extending-ejabberd/pubsub/#subscribe","title":"Subscribe","text":""},{"location":"developer/extending-ejabberd/pubsub/#unsubscribe","title":"Unsubscribe","text":""},{"location":"developer/extending-ejabberd/pubsub/#publish-item","title":"Publish item","text":""},{"location":"developer/extending-ejabberd/pubsub/#delete-item","title":"Delete item","text":""},{"location":"developer/extending-ejabberd/pubsub/#purge-node","title":"Purge Node","text":""},{"location":"developer/extending-ejabberd/pubsub/#get-item","title":"Get item","text":""},{"location":"developer/extending-ejabberd/pubsub/#available-backends","title":"Available backends","text":"<p>Flat, hometree and PEP supports mnesia and SQL backends. Any derivated plugin can support the same (public, private, club, buddy...). Adding backend does not require any PubSub engine change. Plugin just need to comply API. Business Edition also supports optimized ets and mdb.</p>"},{"location":"developer/extending-ejabberd/pubsub/#customisation","title":"Customisation","text":"<p>To write your own plugin, you need to implement needed functions:</p> <pre><code>[init/3, terminate/2, options/0, features/0,\n create_node_permission/6, create_node/2, delete_node/1,\n purge_node/2, subscribe_node/8, unsubscribe_node/4,\n publish_item/6, delete_item/4, remove_extra_items/3,\n get_entity_affiliations/2, get_node_affiliations/1,\n get_affiliation/2, set_affiliation/3,\n get_entity_subscriptions/2, get_node_subscriptions/1,\n get_subscriptions/2, set_subscriptions/4,\n get_pending_nodes/2, get_states/1, get_state/2,\n set_state/1, get_items/7, get_items/3, get_item/7,\n get_item/2, set_item/1, get_item_name/3, node_to_path/1,\n path_to_node/1]\n</code></pre> <p>Generic function must call their corresponding partner in <code>node_flat</code>.</p> <p>Simple plugin would just call <code>node_flat</code> and override some defaults such as:</p> <ul> <li>options/0 and features/0 to match your needs. This triggers the way PubSub controls calls to your plugins.</li> <li>create_node_permission/6 for example to check an LDAP directory against an access flag</li> <li>Write your own tests on publish or create node, forbids explicit access to items, etc...</li> </ul>"},{"location":"developer/extending-ejabberd/pubsub/#clustering","title":"Clustering","text":"<p>ejabberd's implementation tends to cover most generic and standard uses. It's good for common use, but far from optimal for edges or specific cases. Nodes, affiliations, subscriptions and items are stored in a replicated database. Each ejabberd node have access to all the data. Each ejabberd node handles part of the load, but keep locking database cluster wide on node records write (pubsub_node) Affiliations, subscriptions and items uses non blocking write (pubsub_state and pubsub_item)</p>"},{"location":"developer/extending-ejabberd/stanza-routing/","title":"ejabberd Stanza Routing","text":""},{"location":"developer/extending-ejabberd/stanza-routing/#message-routing","title":"Message Routing","text":"<p>In case of a message sent from User A to User B, both of whom are served by the same domain, the flow of the message through the system is as follows:</p> <ol> <li>User A's <code>ejabberd_receiver</code> receives the stanza and passes it to    <code>ejabberd_c2s</code>.</li> <li>After some consistency check, <code>user_send_packet</code> is called if the    stanza is correct.</li> <li>The stanza is matched against any privacy lists in use and, in case    of being allowed, routed by <code>ejabberd_router:route/3</code>.</li> <li><code>ejabberd_router:route/3</code> runs the <code>filter_packet</code>    hook. <code>filter_packet</code> hook can drop of modify the stanza.</li> <li> <p><code>ejabberd_router</code> will then consult the routing table to know what    do to next. It is easier to understand by looking at an example of    actual routing table content:</p> <pre><code>(ejabberd@localhost)2&gt; ets:tab2list(route).\n[{route,&lt;&lt;\"pubsub.localhost\"&gt;&gt;,\n  {apply_fun,#Fun&lt;ejabberd_router.2.122122122&gt;}},\n{route,&lt;&lt;\"muc.localhost\"&gt;&gt;,\n  {apply_fun,#Fun&lt;mod_muc.2.122122123&gt;}},\n{route,&lt;&lt;\"localhost\"&gt;&gt;,{apply,ejabberd_local,route}}]\n</code></pre> </li> </ol> <p>In that case, user is local so we need to route to same domain (in    our case localhost). We then can see that we have to call    <code>ejabberd_local:route</code> to route the message to local user. As both    user are local (no server-to-server involved), it matches our    expectations.</p> <ol> <li> <p><code>ejabberd_local</code> routes the stanza to <code>ejabberd_sm</code> given it's got at    least a bare JID as the recipient.</p> </li> <li> <p><code>ejabberd_sm</code> determines the available resources of User B, takes    into account their session priorities and whether the message is    addressed to a particular resource or a bare JID and appropriately    replicates (or not) the message and sends it to the recipient's    <code>ejabberd_c2s</code> process(es).</p> </li> </ol> <p>In case no resources are available for delivery (hence no    <code>ejabberd_c2s</code> processes to pass the message to),    <code>offline_message_hook</code> is run to delegate offline message storage.</p> <ol> <li><code>ejabberd_c2s</code> verifies the stanza against any relevant privacy    lists and sends it on the user socket if it does exist. In the case    of ejabberd Business Edition and ejabberd Saas, session can be    detached and push notifications can be used as a fallback.    <code>user_receive_packet</code> hook is run to notify the rest of the system    about stanza delivery to User B.</li> </ol> <p>Here is a broader diagram, including server-to-server routing:</p> <p></p>"},{"location":"developer/extending-ejabberd/testing/","title":"ejabberd Test Suites","text":"<p>ejabberd comes with a comprehensive test suite to cover various part of the software platform.</p>"},{"location":"developer/extending-ejabberd/testing/#xmpp-end-to-end-protocol-test-suite","title":"XMPP end-to-end protocol test suite","text":""},{"location":"developer/extending-ejabberd/testing/#running-ejabberd-test-suite","title":"Running ejabberd test suite","text":"<p>This test suite is a set of end-2-end integration tests that act like XMPP clients connecting with the server and is testing ejabberd at the protocol level.  It also contains tests for the various backends that ejabberd supports.</p> <p>The test suite is modular and can be run in parts (to focus on a group of features) or run for a specific backend.</p> <p>The <code>CT_BACKENDS</code> environment variable specifies which backend tests to run. Current <code>CT_BACKENDS</code> values:</p> <ul> <li><code>extauth</code></li> <li><code>ldap</code></li> <li><code>mnesia</code></li> <li><code>mssql</code></li> <li><code>mysql</code></li> <li><code>odbc</code></li> <li><code>pgsql</code></li> <li><code>redis</code></li> <li><code>sqlite</code></li> </ul> <p>Note: You must build ejabberd with proper backend support for the tests to work. If the tests fail and you aren't sure why, check the <code>configure</code> build options to make sure ejabberd is compiled with adequate backend support.</p> <p>Note: these tests are e2e tests that operate a full ejabberd instance.  So the ports that ejabberd needs must be available for testing.  So you can't run an ejabberd instance at the same time you test.</p> <p>Other options you can use to limit the tests that will be run is to pass a list of <code>groups</code> to test. Some <code>groups</code> examples:</p> <ul> <li><code>no_db</code>: Runs subgroups <code>generic</code> and <code>test_proxy65</code>.</li> <li><code>component</code></li> <li><code>extauth</code></li> <li><code>ldap</code></li> <li><code>mnesia</code></li> <li><code>mssql</code></li> <li><code>mysql</code></li> <li><code>pgsql</code></li> <li><code>redis</code></li> <li><code>s2s</code></li> <li><code>sqlite</code></li> </ul> <p>Usually, it is enough to just limit tests with <code>CT_BACKENDS</code> and let the test suite decide which relevant tests to run. Sometimes you may want to only focus on a specific backend, skipping the generic <code>no_db</code> tests.</p> <p>Some example commands for running the XMPP end-to-end test suite using rebar and rebar3 ct:</p> <pre><code>CT_BACKENDS=mnesia rebar  ct suites=ejabberd\nCT_BACKENDS=mnesia rebar  ct suites=ejabberd groups=mnesia\nCT_BACKENDS=mnesia rebar  ct suites=ejabberd groups=generic\nCT_BACKENDS=mnesia rebar3 ct --suite=test/ejabberd_SUITE --group=offline_flex,offline_send_all\nCT_BACKENDS=redis  rebar3 ct --suite=test/ejabberd_SUITE --group=offline_flex,offline_send_all\nCT_BACKENDS=mnesia rebar3 ct --suite=test/ejabberd_SUITE --group=commands_single\n</code></pre> <p>If you have every backend configured, you can run all the tests with:</p> <pre><code>make test\n</code></pre>"},{"location":"developer/extending-ejabberd/testing/#test-suite-conventions","title":"Test suite conventions","text":"<p>The records used in test suite are autogenerated and come from <code>tools/xmpp_codec.hrl</code>. This is handy to match packets/results against expected values.</p>"},{"location":"developer/extending-ejabberd/testing/#dependency-tests","title":"Dependency tests","text":"<p>ejabberd depends on a lot of dependent modules. The dependencies can be tested independently by checking them out and running their test suites directly.</p>"},{"location":"developer/extending-ejabberd/testing/#build-test-status","title":"Build test status","text":"<p>We run tests for ejabberd and dependencies automatically via Github Actions. We have a Dashboard available on Github to check the overall test status for all projects: ProcessOne Github Dashboard</p>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/","title":"MucSub: Multi-User Chat Subscriptions","text":""},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#motivation","title":"Motivation","text":"<p>In XMPP, Multi-User Chat rooms design rely on presence. To participate in a MUC room, you need to send a presence to the room. When you get disconnected, you leave the room and stopped being part of the room. User involvement in MUC rooms is not permanent.</p> <p>This is an issue with the rise of mobile applications. Chatting with friends in a room is a big part of messaging usage on mobile. However, to save battery life, mobile devices will freeze mobile XMPP application after a while when they get to background. It means that the connection is lost and that the session is usually terminated.</p> <p>Some workaround have been used to try letting user keep on receiving messages from MUC room when the app is in background. The most common one is to keep the session open for a while until a timeout happens. This is the approach promoted on mobile by XEP-0198 - Stream Management. When messages are received and no TCP/IP connection is attached, server usually fallback sending the message to the user using mobile push notification service to warn the user that a message has been received.</p> <p>This approach has many drawbacks:</p> <ol> <li>It is not permanent. The idea of having the session kept into    memory for a while is interesting but it is just a long    timeout. After that timeout, the session is closed and the user    will leave the room. No message will be received anymore.</li> <li>It does not play well with normal server / cluster operations. If    you restart the service where the user session is kept, it will    disappear. You can dump them to disk and recreate them on start,    but it means that if the node crashes, your session will be lost    and user will stop receiving messages.</li> <li>It does not change the fundamental nature of MUC chat room. They    are still presence-based. It means that if you need to restart the    MUC service, or if it crashes, presence are lost. For connected    clients, they are expected to join the MUC room again. However, for    mobile clients, it cannot happens until user reopens the    app. Moreover, it means that on new session start, user client is    expected to join all the MUC rooms they want to keep track of on    connect.</li> </ol> <p>This specification tries to solve those issues by keeping most of the logic of the MUC room intact. There is attempt to rewrite XMPP Multi-User chat rooms by splitting presence from ability to receive and send messages (XEP-0369: Mediated Information eXchange (MIX)). However, the features covered by the MUC protocol are quite comprehensive and the MIX protocol is not yet ready to cover all the MUC use cases yet. The goal is to produce an intermediate state that is compliant with MUC and leverage most of the MUC features, while adding the most basic feature possible to implement the MUC/Sub extension.</p> <p>This specifications tries to merge ideas to produce a MUC extension that make MUC rooms mobile clients friendly.</p> <p>To play well with mobile, MUC room need to support the following features:</p> <ul> <li>Add the ability to send and receive messages to a room without   having to send presence to the room. More generally allow other type   of interaction with the room (like configuration changes for example   or kick and ban). We will leverage existing publish and subscribe   approach.</li> <li>Add the ability to resync the client for missed messages on   reconnect. We will leverage Message Archive Management service for   MUC.</li> <li>Finally, ensure that a server can implement push notification   service to ensure alerting of offline users when MUC messages are   received.</li> </ul> <p>The goal is to learn from real life working implementation to help feeding MIX with feedback from the field, without having to reinvent a complete new protocol.</p>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#general-principle","title":"General principle","text":"<p>The core idea is to expose MUC rooms as PubSub nodes and to introduce the concept of MUC rooms subscribers.</p> <p>A user affiliated to a MUC room should be able to subscribe to MUC node events and have them routed to their JID, even if they are not a participant in the room. It means that a user can receive messages without having to send presence to the room. In that sense, \"joining the room\" in XEP-0045 becomes more \"Being available in the MUC room\".</p>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#discovering-support","title":"Discovering support","text":""},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#discovering-support-on-muc-service","title":"Discovering support on MUC service","text":"<p>You can check if MUC/Sub feature is available on MUC service by sending Disco Info IQ:</p> <pre><code>&lt;iq from='hag66@shakespeare.example/pda'\n    to='muc.shakespeare.example'\n    type='get'\n    id='ik3vs715'&gt;\n  &lt;query xmlns='http://jabber.org/protocol/disco#info'/&gt;\n&lt;/iq&gt;\n</code></pre> <p>MUC service will show a feature of type 'urn:xmpp:mucsub:0' to the response if the feature is supported and enabled:</p> <pre><code>&lt;iq from=\"muc.shakespeare.example\"\n    to=\"hag66@shakespeare.example/pda\"\n    type=\"result\"\n    id=\"ik3vs715\"&gt;\n  &lt;query xmlns=\"http://jabber.org/protocol/disco#info\"&gt;\n    &lt;identity category=\"conference\"\n              type=\"text\"\n              name=\"Chatrooms\" /&gt;\n    ...\n    &lt;feature var=\"urn:xmpp:mucsub:0\" /&gt;\n    ...\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#discovering-support-on-a-specific-muc","title":"Discovering support on a specific MUC","text":"<p>A user can discover support for MUC/Sub feature on a MUC room as follow:</p> <pre><code>&lt;iq from='hag66@shakespeare.example/pda'\n    to='coven@muc.shakespeare.example'\n    type='get'\n    id='ik3vs715'&gt;\n  &lt;query xmlns='http://jabber.org/protocol/disco#info'/&gt;\n&lt;/iq&gt;\n</code></pre> <p>A conference MUST add 'urn:xmpp:mucsub:0' to the response if the feature is supported and enabled:</p> <pre><code>&lt;iq from='coven@muc.shakespeare.example'\n    to='hag66@shakespeare.example/pda'\n    type='result'\n    id='ik3vs715'&gt;\n  &lt;query xmlns='http://jabber.org/protocol/disco#info'&gt;\n    &lt;identity category='conference'\n              name='A Dark Cave'\n              type='text' /&gt;\n    &lt;feature var='http://jabber.org/protocol/muc' /&gt;\n    ...\n    &lt;feature var='urn:xmpp:mucsub:0' /&gt;\n    ...\n  &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#option-muc-room-support-for-subscriptions","title":"Option MUC room support for subscriptions","text":"<p>Even if MUC room supports MUC/Sub feature, it MAY be explicitly enabled or disabled thanks to a new configuration option:</p> <ul> <li>Allow subscription: Users can subscribe to MUC/Sub events.</li> </ul>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#subscriber-role","title":"Subscriber role","text":"<p>Until a subscriber is not joined a conference (see Joining a MUC Room), a subscriber role MUST be 'none'. When a subscriber is joined a conference its role is changed according to XEP-0045 rules, that is, it becomes either 'visitor', 'participant' or 'moderator'.</p>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#subscribing-to-mucsub-events","title":"Subscribing to MUC/Sub events","text":"<p>User can subscribe to the following events, by subscribing to specific nodes:</p> <ul> <li>urn:xmpp:mucsub:nodes:presence</li> <li>urn:xmpp:mucsub:nodes:messages</li> <li>urn:xmpp:mucsub:nodes:affiliations</li> <li>urn:xmpp:mucsub:nodes:subscribers</li> <li>urn:xmpp:mucsub:nodes:config</li> <li>urn:xmpp:mucsub:nodes:subject</li> <li>urn:xmpp:mucsub:nodes:system</li> </ul> <p>Example: User Subscribes to MUC/Sub events</p> <pre><code>&lt;iq from='hag66@shakespeare.example'\n    to='coven@muc.shakespeare.example'\n    type='set'\n    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'&gt;\n  &lt;subscribe xmlns='urn:xmpp:mucsub:0'\n             nick='mynick'\n             password='roompassword'&gt;\n    &lt;event node='urn:xmpp:mucsub:nodes:messages' /&gt;\n    &lt;event node='urn:xmpp:mucsub:nodes:affiliations' /&gt;\n    &lt;event node='urn:xmpp:mucsub:nodes:subject' /&gt;\n    &lt;event node='urn:xmpp:mucsub:nodes:config' /&gt;\n  &lt;/subscribe&gt;\n&lt;/iq&gt;\n</code></pre> <p>If user is allowed to subscribe, server replies with success. The password attribute can be provided when subscribing to a password-protected room.</p> <p>Example: Server replies with success</p> <pre><code>&lt;iq from='coven@muc.shakespeare.example'\n    to='hag66@shakespeare.example'\n    type='result'\n    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'&gt;\n  &lt;subscribe xmlns='urn:xmpp:mucsub:0'&gt;\n    &lt;event node='urn:xmpp:mucsub:nodes:messages' /&gt;\n    &lt;event node='urn:xmpp:mucsub:nodes:affiliations' /&gt;\n    &lt;event node='urn:xmpp:mucsub:nodes:subject' /&gt;\n    &lt;event node='urn:xmpp:mucsub:nodes:config' /&gt;\n  &lt;/subscribe&gt;\n&lt;/iq&gt;\n</code></pre> <p>Subscription is associated with a nick. It will implicitly register the nick. Server should otherwise make sure that subscription match the user registered nickname in that room. In order to change the nick and/or subscription nodes, the same request MUST be sent with a different nick or nodes information.</p> <p>Example: User changes subscription data</p> <pre><code>&lt;iq from='hag66@shakespeare.example'\n    to='coven@muc.shakespeare.example'\n    type='set'\n    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'&gt;\n  &lt;subscribe xmlns='urn:xmpp:mucsub:0'\n             nick='newnick'&gt;\n    &lt;event node='urn:xmpp:mucsub:nodes:messages' /&gt;\n    &lt;event node='urn:xmpp:mucsub:nodes:presence' /&gt;\n  &lt;/subscribe&gt;\n&lt;/iq&gt;\n</code></pre> <p>A room moderator can subscribe another user to MUC Room events by providing the user JID as an attribute in the <code>&lt;subscribe/&gt;</code> element.</p> <p>Example: Room moderator subscribes another user</p> <pre><code>&lt;iq from='king@shakespeare.example'\n    to='coven@muc.shakespeare.example'\n    type='set'\n    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'&gt;\n  &lt;subscribe xmlns='urn:xmpp:mucsub:0'\n             jid='hag66@shakespeare.example'\n             nick='mynick'\n             password='roompassword'&gt;\n    &lt;event node='urn:xmpp:mucsub:nodes:messages' /&gt;\n    &lt;event node='urn:xmpp:mucsub:nodes:affiliations' /&gt;\n    &lt;event node='urn:xmpp:mucsub:nodes:subject' /&gt;\n    &lt;event node='urn:xmpp:mucsub:nodes:config' /&gt;\n  &lt;/subscribe&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#unsubscribing-from-a-muc-room","title":"Unsubscribing from a MUC Room","text":"<p>At any time a user can unsubscribe from MUC Room events.</p> <p>Example: User unsubscribes from a MUC Room</p> <pre><code>&lt;iq from='hag66@shakespeare.example'\n    to='coven@muc.shakespeare.example'\n    type='set'\n    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'&gt;\n  &lt;unsubscribe xmlns='urn:xmpp:mucsub:0' /&gt;\n&lt;/iq&gt;\n</code></pre> <p>Example: A MUC Room responds to unsubscribe request</p> <pre><code>&lt;iq from='coven@muc.shakespeare.example'\n    to='hag66@shakespeare.example'\n    type='result'\n    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7' /&gt;\n</code></pre> <p>A room moderator can unsubscribe another room user from MUC Room events by providing the user JID as an attribute in the <code>&lt;unsubscribe/&gt;</code> element.</p> <p>Example: Room moderator unsubscribes another room user</p> <pre><code>&lt;iq from='king@shakespeare.example'\n    to='coven@muc.shakespeare.example'\n    type='set'\n    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'&gt;\n  &lt;unsubscribe xmlns='urn:xmpp:mucsub:0'\n               jid='hag66@shakespeare.example'/&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#subscriber-actions","title":"Subscriber actions","text":"<p>If not stated otherwise in this document, a subscriber MUST perform any actions in the conference as described in XEP-0045. For example, it MUST send messages to all occupants according to 7.4 Sending a Message to All Occupants, it MUST configure a conference according to 10.2 Subsequent Room Configuration and so on.</p> <p>Here are a few examples:</p>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#sending-a-message","title":"Sending a message","text":"<p>Sending a message is like sending a standard groupchat message in MUC room:</p> <pre><code>&lt;message from=\"hag66@shakespeare.example\"\n         to=\"coven@muc.shakespeare.example\"\n         type=\"groupchat\"&gt;\n  &lt;body&gt;Test&lt;/body&gt;\n&lt;/message&gt;\n</code></pre> <p>No need to join it after you connect. As a subscriber, you can send messages at any time.</p>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#joining-a-muc-room","title":"Joining a MUC Room","text":"<p>If a user wants to be present in the room, they just have to join the room as defined in XEP-0045.</p> <p>A subscriber MAY decide to join a conference (in the XEP-0045 sense). In this case a conference MUST behave as described in XEP-0045 7.2 Entering a Room. A conference MUST process events as described under XEP-0045 7.1 Order of Events except it MUST not send room history. When a subscriber is joined, a conference MUST stop sending subscription events and MUST switch to a regular groupchat protocol (as described in XEP-0045) until a subscriber leaves.</p>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#receiving-events","title":"Receiving events","text":"<p>Here is as an example message received by a subscriber when a message is posted to a MUC room when subscriber is subscribed to node urn:xmpp:mucsub:nodes:messages:</p> <pre><code>&lt;message from=\"coven@muc.shakespeare.example\"\n         to=\"hag66@shakespeare.example/pda\"&gt;\n  &lt;event xmlns=\"http://jabber.org/protocol/pubsub#event\"&gt;\n    &lt;items node=\"urn:xmpp:mucsub:nodes:messages\"&gt;\n      &lt;item id=\"18277869892147515942\"&gt;\n        &lt;message from=\"coven@muc.shakespeare.example/secondwitch\"\n                 to=\"hag66@shakespeare.example/pda\"\n                 type=\"groupchat\"\n                 xmlns=\"jabber:client\"&gt;\n          &lt;archived xmlns=\"urn:xmpp:mam:tmp\"\n                    by=\"muc.shakespeare.example\"\n                    id=\"1467896732929849\" /&gt;\n          &lt;stanza-id xmlns=\"urn:xmpp:sid:0\"\n                     by=\"muc.shakespeare.example\"\n                     id=\"1467896732929849\" /&gt;\n          &lt;body&gt;Hello from the MUC room !&lt;/body&gt;\n        &lt;/message&gt;\n      &lt;/item&gt;\n    &lt;/items&gt;\n  &lt;/event&gt;\n&lt;/message&gt;\n</code></pre> <p>Presence changes in the MUC room are received wrapped in the same way by subscribers which subscribed to node urn:xmpp:mucsub:nodes:presence:</p> <pre><code>&lt;message from=\"coven@muc.shakespeare.example\"\n         to=\"hag66@shakespeare.example/pda\"&gt;\n  &lt;event xmlns=\"http://jabber.org/protocol/pubsub#event\"&gt;\n    &lt;items node=\"urn:xmpp:mucsub:nodes:presences\"&gt;\n      &lt;item id=\"8170705750417052518\"&gt;\n        &lt;presence xmlns=\"jabber:client\"\n                  from=\"coven@muc.shakespeare.example/secondwitch\"\n                  type=\"unavailable\"\n                  to=\"hag66@shakespeare.example/pda\"&gt;\n          &lt;x xmlns=\"http://jabber.org/protocol/muc#user\"&gt;\n            &lt;item affiliation=\"none\"\n                  role=\"none\" /&gt;\n          &lt;/x&gt;\n        &lt;/presence&gt;\n      &lt;/item&gt;\n    &lt;/items&gt;\n  &lt;/event&gt;\n&lt;/message&gt;\n</code></pre> <p>If subscriber is subscribed to node urn:xmpp:mucsub:nodes:subscribers, message will ne sent for every mucsub subscription change. When a user becomes a subscriber:</p> <pre><code>&lt;message from=\"coven@muc.shakespeare.example\"\n         to=\"hag66@shakespeare.example/pda\"&gt;\n   &lt;event xmlns=\"http://jabber.org/protocol/pubsub#event\"&gt;\n     &lt;items node=\"urn:xmpp:mucsub:nodes:subscribers\"&gt;\n       &lt;item id=\"17895981155977588737\"&gt;\n         &lt;subscribe xmlns=\"urn:xmpp:mucsub:0\"\n                    jid=\"bob@server.com\"\n                    nick=\"bob\"/&gt;\n       &lt;/item&gt;\n     &lt;/items&gt;\n   &lt;/event&gt;\n&lt;/message&gt;\n</code></pre> <p>When a user lost its subscription:</p> <pre><code>&lt;message from=\"coven@muc.shakespeare.example\"\n         to=\"hag66@shakespeare.example/pda\"&gt;\n   &lt;event xmlns=\"http://jabber.org/protocol/pubsub#event\"&gt;\n     &lt;items node=\"urn:xmpp:mucsub:nodes:subscribers\"&gt;\n       &lt;item id=\"10776102417321261057\"&gt;\n         &lt;unsubscribe xmlns=\"urn:xmpp:mucsub:0\"\n                      jid=\"bob@server.com\"\n                      nick=\"bob\"/&gt;\n       &lt;/item&gt;\n     &lt;/items&gt;\n   &lt;/event&gt;\n&lt;/message&gt;\n</code></pre> <p>Note: Sometimes jid in subscribe/unsubscribe event may be missing if room is set to anonymous and user is not moderator.</p>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#getting-list-of-subscribed-rooms","title":"Getting List of subscribed rooms","text":"<p>A user can query the MUC service to get their list of subscriptions.</p> <p>Example: User asks for subscriptions list</p> <pre><code>&lt;iq from='hag66@shakespeare.example'\n    to='muc.shakespeare.example'\n    type='get'\n    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'&gt;\n  &lt;subscriptions xmlns='urn:xmpp:mucsub:0' /&gt;\n&lt;/iq&gt;\n</code></pre> <p>Example: Server replies with subscriptions list</p> <pre><code>&lt;iq from='muc.shakespeare.example'\n    to='hag66@shakespeare.example'\n    type='result'\n    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'&gt;\n  &lt;subscriptions xmlns='urn:xmpp:mucsub:0'&gt;\n    &lt;subscription nick='mynick'\n                  jid='coven@muc.shakespeare.example'&gt;\n      &lt;event node='urn:xmpp:mucsub:nodes:messages'/&gt;\n      &lt;event node='urn:xmpp:mucsub:nodes:affiliations'/&gt;\n      &lt;event node='urn:xmpp:mucsub:nodes:subject'/&gt;\n      &lt;event node='urn:xmpp:mucsub:nodes:config'/&gt;\n    &lt;/subscription&gt;\n    &lt;subscription nick='MyNick'\n                  jid='chat@muc.shakespeare.example'&gt;\n      &lt;event node='urn:xmpp:mucsub:nodes:messages'/&gt;\n    &lt;/subscription&gt;\n  &lt;/subscriptions&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#getting-list-of-subscribers-of-a-room","title":"Getting list of subscribers of a room","text":"<p>A subscriber or room moderator can get the list of subscribers by sending <code>&lt;subscriptions/&gt;</code> request directly to the room JID.</p> <p>Example: Asks for subscribers list</p> <pre><code>&lt;iq from='hag66@shakespeare.example'\n    to='coven@muc.shakespeare.example'\n    type='get'\n    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'&gt;\n  &lt;subscriptions xmlns='urn:xmpp:mucsub:0' /&gt;\n&lt;/iq&gt;\n</code></pre> <p>Example: Server replies with subscribers list</p> <pre><code>&lt;iq from='coven@muc.shakespeare.example'\n    to='hag66@shakespeare.example'\n    type='result'\n    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'&gt;\n  &lt;subscriptions xmlns='urn:xmpp:mucsub:0'&gt;\n    &lt;subscription nick='Juliet'\n                  jid='juliet@shakespeare.example'&gt;\n      &lt;event node='urn:xmpp:mucsub:nodes:messages'/&gt;\n      &lt;event node='urn:xmpp:mucsub:nodes:affiliations'/&gt;\n    &lt;/subscription&gt;\n    &lt;subscription nick='Romeo'\n                  jid='romeo@shakespeare.example'&gt;\n      &lt;event node='urn:xmpp:mucsub:nodes:messages'/&gt;\n    &lt;/subscription&gt;\n  &lt;/subscriptions&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#compliance-with-existing-muc-clients","title":"Compliance with existing MUC clients","text":"<p>MUC/Sub approach is compliant with existing MUC service and MUC clients. MUC clients compliant with XEP-0045 will receive messages posted by subscribers. They may not see the user's presence, but it should not be an issue for most clients. Most clients already support receiving messages from users that are not currently in the MUC room through history retrieval.</p> <p>This approach should also help most clients to support better integration with third-party services posting to MUC room through API (as )</p> <p>However, a server could choose to send presence on behalf of subscribers when a user joins the room (in the XEP-0045 sense) so that the subscriber will be shown in MUC roster of legacy clients.</p>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#synchronization-of-muc-messages-leveraging-mam-support","title":"Synchronization of MUC messages: Leveraging MAM support","text":"<p>To be friendly with mobile, the MAM service should allow a user to connect and easily resync their history for all MUC subscriptions. For details about MAM, see XEP-0313 Message Archive Management and your software's documentation, for instance ejabberd's mod_mam.</p> <p>Thanks to ability to get the list of all the existing subscription, client can get a starting point to interact with MAM service to resync history and get the messages that were missed while the user was offline.</p> <p>If you subscribe to MucSub, MAM will add the message to your own user JID on new messages. You will simply be able to query them using your own JID from the standard MAM service.</p> <p>It means, you can get all new MUC message in subscribed room thanks to MucSub, with a single query. For example, if you ask for all messages sent since a specific date, the result will contain both normal chat and MucSub messages.</p> <p>You would only need to query MUC for MAM for rooms for which you do not use MucSub as with MucSub you will be \"delivered\" each message (in that case, each message is added your MAM archive).</p>"},{"location":"developer/xmpp-clients-bots/extensions/muc-sub/#push-support-compliance","title":"Push support compliance","text":"<p>Subscriptions are compliant with push mechanism. It is supported out of the box when using ProcessOne p1:push implementation (deployed on ejabberd SaaS for example).</p> <p>More generally, it is straightforward to handle them through ejabberd developer API to implement custom mechanisms.</p> <p>Subscriptions are delivered to online users. If the user has no active session, the server can choose to broadcast to the user through a push notification.</p> <p>When a session is opened, if the server detects that the user has not been recently active, or for any other reason, the server can still forward the message to a push notification service to warn the user that new messages are available in a MUC room.</p>"},{"location":"developer/xmpp-clients-bots/extensions/roster-versioning/","title":"Roster versioning","text":"<p>Roster versioning as implemented currently by ejabberd is a simplified approach to roster versioning.</p> <p>This is an all-or-nothing approach that does not support the granular diff as explained in RFC-6121.</p> <p>Our implementation conforms to version 0.6 of XEP-0237, sending the full roster in case of change or empty result if the roster did not change.</p> <p>As a result, as a client developer, when implementing support for roster versioning, you should expect both the traditional form for returning the roster, with version (iq result) and the incremental roster changes (iq set).</p>"},{"location":"developer/xmpp-clients-bots/extensions/roster-versioning/#example","title":"Example","text":"<p>As a summary, here is how you should expect it to work.</p> <p>First, you can check that the feature is advertised in the <code>stream:features</code> as <code>urn:xmpp:features:rosterver</code>:</p> <pre><code>&lt;stream:features&gt;\n &lt;bind xmlns=\"urn:ietf:params:xml:ns:xmpp-bind\"/&gt;\n &lt;session xmlns=\"urn:ietf:params:xml:ns:xmpp-session\"&gt;\n  &lt;optional/&gt;\n  &lt;/session&gt;\n  &lt;c xmlns=\"http://jabber.org/protocol/caps\" node=\"http://www.process-one.net/en/ejabberd/\" ver=\"/lmQr0llUEtX/pIt+6BDAbnIT/U=\" hash=\"sha-1\"/&gt;\n  &lt;sm xmlns=\"urn:xmpp:sm:2\"/&gt;\n  &lt;sm xmlns=\"urn:xmpp:sm:3\"/&gt;\n  &lt;ver xmlns=\"urn:xmpp:features:rosterver\"/&gt;\n&lt;/stream:features&gt;\n</code></pre> <p>You can then bootstrap the use of roster versioning using empty <code>ver</code> attribute when sending your roster <code>get</code> iq:</p> <pre><code>&lt;iq id='roster1' to='myuser@domain.com' type='get'&gt;\n &lt;query xmlns='jabber:iq:roster' ver=''/&gt;\n&lt;/iq&gt;\n</code></pre> <p>In return, you get a full roster with the current version:</p> <pre><code>&lt;iq from=\"myuser@domain.com\" type=\"result\" xml:lang=\"en\" to=\"myuser@domain.com/resource\" id=\"roster1\"&gt;\n &lt;query xmlns=\"jabber:iq:roster\" ver=\"81cb523a7b77c7011552be85a3dde55189297590\"&gt;\n  &lt;item subscription=\"both\" jid=\"contact@domain.com\"&gt;\n   &lt;group&gt;Test&lt;/group&gt;\n  &lt;/item&gt;\n  ...\n &lt;/query&gt;\n&lt;/iq&gt;\n</code></pre> <p>The client can store this version to send subsequent roster queries.</p> <p>If client send a roster query with reference version it received get an empty iq result meaning the roster did not change:</p> <pre><code>&lt;iq id=\"roster2\" to=\"myuser@domain.com\" type=\"get\"&gt;\n &lt;query xmlns='jabber:iq:roster' ver='81cb523a7b77c7011552be85a3dde55189297590'/&gt;\n&lt;/iq&gt;\n</code></pre> <pre><code>&lt;iq from=\"myuser@domain.com\" type=\"result\" xml:lang=\"en\" to=\"myuser@domain.com/resource\" id=\"roster2\"/&gt;\n</code></pre> <p>If client send roster query with any other reference version, it will receive the full roster again in the roster iq result.</p>"},{"location":"developer/xmpp-clients-bots/ios/getting-started-xmppframework/","title":"Getting Started with XMPPFramework","text":""},{"location":"developer/xmpp-clients-bots/ios/getting-started-xmppframework/#introduction","title":"Introduction","text":"<p>XMPP development on smartphone has always been challenging given the constraints on mobile platform.</p> <p>This area will help you understand the challenges and help you get started with XMPP development on Apple iOS platform.</p> <p>The main library to support XMPP on iOS is XMPPFramework.</p>"},{"location":"developer/xmpp-clients-bots/ios/getting-started-xmppframework/#xmppframework","title":"XMPPFramework","text":"<p>XMPPFramework is a large framework relying on several dependencies. The easiest way to get started is to use Cocoapods to integrate XMPPFramework in your own project. It will take care of adding all dependencies and perform all the required configuration steps.</p> <p>Here are the steps needed to get started:</p> <ol> <li> <p>Create a new iOS project in Xcode, if you do not have one.</p> </li> <li> <p>If you do not yet have a <code>Podfile</code>, create it if <code>pod init</code> command    from the project root directory.</p> </li> <li> <p>Edit your <code>Podfile</code> to use XMPPFramework as a target. It may looks like:</p> </li> </ol> <pre><code>platform :ios, '6.0'\nuse_frameworks!\n\ntarget 'projectname' do\n   pod 'XMPPFramework'\nend\n</code></pre> <ol> <li> <p>Run <code>pod install</code> command. It should download, install and    configure three pods.</p> </li> <li> <p>Open your XCode project with the newly created workspace file    instead of the project file. This is required by Cocoapods so that    you can use the installed Pods.</p> </li> <li> <p>At this stage, you should be able to build your project    successfully with the XMPP framework setup.</p> </li> </ol>"},{"location":"ejabberd-faq/","title":"Frequently Asked Questions","text":""},{"location":"ejabberd-faq/#development-process","title":"Development process","text":""},{"location":"ejabberd-faq/#why-is-there-a-commercial-version-of-ejabberd","title":"Why is there a commercial version of ejabberd?","text":"<p>Different needs for different users. Corporations and large scale deployments are very different from smaller deployments and community projects.</p> <p>While we put a huge development effort to have a product that is on the edge of innovation with ejabberd community version, we are requested to provide a stable version with long term commitment and high level of quality, testing, audit, etc.</p> <p>Maintaining such a version in parallel to the community version, along with extremely strong commitment in terms of availability and 24/7 support has a tangible cost. With ejabberd business edition we commit to a level of scalability and optimize the software until it is performing to the level agreed with the customer.</p> <p>Covering all those costs, along with all our Research and Development cost on ejabberd community in general is the real reason we need a business edition.</p> <p>The business edition is also a way for our customers to share the code between our customers only, thus retaining a huge competitive edge for a limited time (See next section).</p> <p>So, even if you are not using our business edition, this is a great benefit for you as a user of the community edition and the reason you have seen so many improvements since 2002. Thanks to our business edition customers, ejabberd project itself is a major contributor to Erlang and Elixir community.</p>"},{"location":"ejabberd-faq/#does-processone-voluntarily-hold-some-code-in-ejabberd-community-to-push-toward-the-business-edition","title":"Does ProcessOne voluntarily hold some code in ejabberd community to push toward the business edition?","text":"<p>No. We never do that and have no plan doing so with the code we produce and we own.</p> <p>However, when the code is paid by customer, they retain the ownership of the code. Part of our agreement is that the code produced for them will be limited to a restricted user base, ejabberd business edition until an agreed time expires, generally between 6 months and 1 year.</p> <p>This is extremely important for both the users of the commercial edition and the users of the community edition:</p> <ul> <li> <p>For the business edition customers, this is a way to keep their business advantage. This is   fair as they paid for the development.</p> </li> <li> <p>This is also a great incentive for our customers as they benefit from   development for other customers (I guess they agree for the   reciprocal sharing of their own code with customers).</p> </li> <li> <p>This is fair for the community as the community edition users know   they will benefit from new extremely advanced features in a relatively near future.    For example, websocket module was contributed to   ejabberd community as part of this process.</p> </li> </ul> <p>This is the model we have found to be fair to our broader user base and lets us produce an amazing code base that benefits all our users.</p> <p>This dual model is the core strength of our approach and our secret sauce to make sure everyone benefits.</p>"},{"location":"ejabberd-faq/#performance","title":"Performance","text":""},{"location":"ejabberd-faq/#is-ejabberd-the-most-scalable-version","title":"Is ejabberd the most scalable version?","text":"<p>Yes. Definitely. Despite claims that there is small change you can make to make it more scalable, we already performed the changes during the past year, that make those claims unfunded:</p> <ul> <li> <p>ejabberd reduced memory consumption in 2013 by switching to binary   representation of string instead of list. This can reduce given   string by 8.</p> </li> <li> <p>We have improved the C code performance a lot, using new Erlang   NIF. This provides better performance, removes bottlenecks</p> </li> <li> <p>We have a different clustering mechanism available to make sure we can   scale to large clusters</p> </li> </ul> <p>This is a common misconception, but our feedback for production service on various customer sites shows that ejabberd is the most scalable version. Once it is properly configured, optimized and tuned, you can handle tens of millions of users on ejabberd systems.</p> <p>... And we are still improving :)</p> <p>As a reference, you should read the following blog post: ejabberd Massive Scalability: 1 Node \u2014 2+ Million Concurrent Users</p>"},{"location":"ejabberd-faq/#what-are-the-tips-to-optimize-performance","title":"What are the tips to optimize performance?","text":"<p>Optimisation of XMPP servers performance, including ejabberd, is highly dependent on the use case. You really need to find your bottleneck(s) by monitoring the process queues, finding out what is your limiting factor, tune that and then move to the next one.</p> <p>The first step is to make sure you run the latest ejabberd. Each new release comes with a bunch of optimisations and a specific bottleneck you are facing may have gone away in the latest version.</p> <p>For perspective, ejabberd 15.07 is 2 to 3 times more efficient in memory, latency and CPU compared to ejabberd 2.1.</p> <p>You should also make sure that you are using the latest Erlang version. Each release of Erlang comes with more optimisation regarding locks, especially on SMP servers, and using the latest Erlang version can also help tremendously.</p>"},{"location":"ejabberd-faq/#erlang-support","title":"Erlang support","text":""},{"location":"ejabberd-faq/#is-ejabberd-conforming-to-the-best-erlang-practices","title":"Is ejabberd conforming to the best Erlang practices?","text":"<p>Yes. Our build system is primarily based on rebar. However, as we are multiplatform and need to run in many various environments, we rely on a toolchain that can detect required library dependencies using autotools.</p> <p>This gives developers and admins the best of both worlds. A very flexible and very versatile build chain, that is very adequate to make sure ejabberd can be used in most operating systems and even integrated in Linux distributions.</p>"},{"location":"get-started/","title":"Getting started \ud83d\udc4b","text":""},{"location":"get-started/#meet-ejabberd-your-superpowerful-messaging-framework","title":"Meet ejabberd, your superpowerful messaging framework","text":"<p>This web site is dedicated to help you use and develop for ejabberd 6251a85a-47d0-11ee-be56-0242ac120002:dbc53599546933e32fa7bf4864e20805:&lt;__None__&gt; messaging server.</p> <p>ejabberd has been in development since 2002 and is used all over the world to power the largest XMPP deployments. This project is so versatile that you can deploy it and customize it for very large scale, no matter what your use case is.</p> <p>This incredible power comes with a price. You need to learn how to leverage it. Fortunately, the goal of this website is to get you started on your path to mastery. Whether you are a sysadmin, an architect, a developer planning to extend it, or even a simple XMPP user, we have something for you here.</p>"},{"location":"get-started/#overview","title":"Overview","text":"<p>ejabberd is the de facto XMPP server in the world. The fact that it is used to power the largest deployments in the world should not intimidate you. ejabberd is equally suitable for small instances.</p> <p>ejabberd has been designed from the ground-up, since 2002 for robust, enterprise deployment. The goal has always been to shoot for the moon and this is what made it a long-lasting success.</p> <p>ejabberd is specifically designed for enterprise purposes: it is fault-tolerant, can utilise the resources of multiple clustered machines, and can easily scale when more capacity is required (by just adding a box/VM).</p> <p>Designed at a moment when clients were mostly desktops that only supported a kind of HTTP polling call BOSH, the project managed to adapt to recent changes by introducing support for WebSockets, BOSH improvements, and a solid mobile  stack.</p> <p>It was developed at a time when XMPP was still known as \"Jabber\", but quickly adopted an evolution process in order to support the various versions of XMPP RFCs. It now encourages innovation and experimentation by supporting most, if not all, extensions produced by the XSF.</p> <p>ejabberd relies on a dynamic community all over the world. To get an idea of existing contributions, you can check ejabberd main repository or the repository containing a great amount of contributed extensions.</p> <p>This is possible thanks to a modular architecture based on a core router and an extremely powerful plugin mechanism that is getting richer every day.</p> <p>Welcome to the beginning of your journey of ejabberd mastery!</p>"},{"location":"get-started/#options-to-use-ejabberd","title":"Options to use ejabberd","text":"<p>ejabberd can be used in different ways. The most common one is:</p> <ul> <li>ejabberd Community Server,   the public Open Source version   that everyone loves: highly scalable and flexible.</li> </ul> <p>Fortunately, if you need more than just the ejabberd platform software, ProcessOne can help you with a commercial offering. Commercial offering come in two type of packaging:</p> <ul> <li> <p>ejabberd Business Edition   including features for large companies   (enhanced geodistributed companies and mobile support to develop   own, rich clients) and world-class support, that can please even the   most demanding businesses, with 24/7 options.</p> </li> <li> <p>Fluux.io being a way to access and benefit of all the features   of ejabberd Business Edition at an attractive and scalable   price. Fluux.io allows you to keep control of your data thanks   to integration API you can implement on your backend to become a   data provider for ejabberd SaaS.</p> </li> </ul> <p>Whatever approach you choose, you can hardly make the wrong choice with ejabberd! In every case you can easily integrate ejabberd with your existing application using:</p> <ul> <li>REST API and ejabberdctl command-line tool</li> <li>Mobile libraries for iOS: XMPPFramework, Jayme REST API</li> <li>Mobile libraries for Android: Smack, Retrofit</li> <li>Web library with WebSocket support and fallback to BOSH: Strophe</li> </ul>"},{"location":"get-started/#architecture-of-an-ejabberd-service","title":"Architecture of an ejabberd service","text":"<p>ejabberd brings configurability, scalability and fault-tolerance to the core feature of XMPP \u2013 routing messages.</p> <p>Its architecture is based on a set of pluggable modules that enable different features, including:</p> <ul> <li>One-to-one messaging</li> <li>Store-and-forward (offline messages)</li> <li>Contact list (roster) and presence</li> <li>Groupchat: MUC (Multi-User Chat)</li> <li>Messaging archiving with Message Archive Management (MAM)</li> <li>User presence extension: Personal Event Protocol (PEP) and typing indicator</li> <li>Privacy settings, through privacy list and simple blocking extensions</li> <li>User profile with vCards</li> <li>Full feature web support, with BOSH and websockets</li> <li>Stream management for message reliability on mobile (aka XEP-0198)</li> <li>Message Delivery Receipts (aka XEP-184)</li> <li>Last activity</li> <li>Metrics and full command-line administration</li> <li>and many many more.</li> </ul> <p>The full list of supported protocol and extensions in the Specification &amp; Reference Sheets page.</p> <p>This modular architecture allows high customisability and easy access to the required features.</p> <p>ejabberd enables authenticating users using external or internal databases (Mnesia, SQL), LDAP or external scripts. It also allows connecting anonymous users, when required.</p> <p>For storing persistent data, ejabberd uses Mnesia (the distributed internal Erlang database), but you can opt for SQL database like MySQL or PostgreSQL</p> <p>And of course, thanks to its API, ejabberd can be customised to work with a database chosen by the customer.</p>"},{"location":"get-started/#deploying-and-managing-an-ejabberd-service","title":"Deploying and managing an ejabberd service","text":"<p>ejabberd can be deployed for a number of scenarios fitting end-user / developer / customer needs. The default installation setup consists of a single ejabberd node using Mnesia, so it does not require any additional configuration. This primary system is sufficient for fast deployment and connecting XMPP clients. It should be good enough for most of the small deployments (and even medium ones).</p> <p>A more scalable solution would be deploying ejabberd with an external database for persistent data. As Mnesia is caching part of its data in ejabberd memory (actually in Erlang VM node), this kind of setup make your system more scalable and typically easier to integrate with your usual database. As a sysadmin, yes, you can use your standard backup process.</p> <p>Those larger setup can run as a cluster of ejabberd nodes. This is a clustering mode where all nodes are active, so it can be use for fault-tolerance, but also to increase the capacity of your ejabberd deployment.</p> <p>With such a deployment you can load balance the traffic to your cluster node using one of the following solution:</p> <ul> <li>traditional TCP/IP load balancer (beware of the cost of your solution, typical XMPP connections are persistent).</li> <li>DNS load balancing.</li> <li>Custom approach that requires client cooperation.</li> </ul> <p>If deployed on a 16 GB RAM machine with at least 4 cores, a single ejabberd node can typically handle 200-300 K online users. This setup is suitable for systems with up to 10 nodes.</p> <p>Note that your mileage may vary depending on your use case, the feature your are using and how clean the architecture design and the client is developed. That's why, if you plan to reach huge volume, it is recommended to start asking advices from day 1 to an ejabberd expert. Initial mistakes in the solution design are harder to fix once the project is in production.</p> <p>If the service requires a cluster of more than 10 nodes, we recommend not relying on Mnesia clustering mode. Many solutions are available, the easiest and more inexpensive being to rely on ejabberd Software-as-a-Service approach, see Advanced Messaging Infrastructure &amp; Services.</p> <p>ejabberd also allows connecting different clusters as parts of larger systems. This is a standard XMPP feature call server-to-server (aka s2s in XMPP lingo). It is used in geo-localised services handling massive traffic from all over the world. Special extension are also available from ProcessOne to handle geodistribution in an even more robust way.</p> <p>To manage the users, rosters, messages and general settings, we provide a command-line tool, ejabberdctl. That command-line allows you to gather metrics from ejabberd to be able to monitor what is happening in your system, understand and even anticipate issues.</p> <p>The main benefit of ejabberd is the ability to reach a command-line to type Erlang commands. This allows you to fix and troubleshoot most of the tricky situation and even update and reload code without stopping the service. This is a life saver for your uptime.</p> <p>Welcome to the benefit of Erlang hot-code swapping!</p>"},{"location":"get-started/#ejabberd-is-more-than-xmpp","title":"ejabberd is more than XMPP","text":"<p>Thanks to the modular architecture of ejabberd, the platform is becoming a core component for messaging applications.</p> <p>Messaging applications require to transfer more than text messages. ejabberd has grow a full set of media related features that makes ejabberd a great choice to support voice and video applications, but also to proxy various kind of media transfer (images, audio and video files for example).</p> <p>As such, ejabberd support:</p> <ul> <li>Jingle, XMPP based voice protocol</li> <li>SIP (Session Initiation Protocol): Yes, you can pass SIP calls using ejabberd :)</li> <li>ICE (Interactive Connectivity Establishment: A Protocol for Network Address Translator (NAT) Traversal)</li> <li>STUN</li> <li>TURN</li> <li>Proxy65 media relay</li> </ul> <p>This makes ejabberd the best XMPP server to support SIP and WebRTC based communication tools.</p>"},{"location":"get-started/#helping-us-in-the-development-process","title":"Helping us in the development process","text":"<p>With thousands of more or less official forks, the core ejabberd team, supported by ProcessOne, is constantly monitoring and reviewing improvements.  We use our 15 years of experience to filter the best ideas or improvements to make sure ejabberd is always your most solid choice in term of scalability, robustness and manageability.</p> <p>The best way to start developing for ejabberd is to clone, watch and star the project, to get in touch on our developer chatroom (ejabberd@conference.process-one.net) or to join ejabberd community on StackOverflow.</p>"},{"location":"livebooks/ejabberd-developer-livebook/","title":"The ejabberd Developer Livebook","text":"<p>Info</p> <p>This page is designed to run interactively using Livebook. Of course, you could simply reproduce the instructions manually yourself. But, if possible, install Livebook in your machine and get the full experience clicking on the button:</p> <p></p> <pre><code>filename = \"ejabberd.yml\"\n\nif File.exists?(filename) do\n  Mix.install([\n    {:ejabberd, \"~&gt; 24.2\"},\n    {:kino, \"~&gt; 0.12.3\"}\n  ])\nelse\n  url = \"https://raw.githubusercontent.com/processone/ejabberd/master/ejabberd.yml.example\"\n\n  Mix.install([:req]) &amp;&amp;\n    File.write!(\n      filename,\n      String.replace(Req.get!(url).body, \"starttls_required: true\", \"\")\n    )\n\n  IO.puts(\"ejabberd.yml downloaded correctly, click 'Reconnect and setup' to download ejabberd.\")\nend\n</code></pre>"},{"location":"livebooks/ejabberd-developer-livebook/#setup-ejabberd-inside-livebook","title":"Setup ejabberd inside livebook","text":"<p>This Livebook will download, compile and install ejabberd:</p> <ol> <li> <p>If you want to use a specific <code>ejabberd.yml</code> configuration file, copy it to your Livebook folder.</p> </li> <li> <p>On top of this page, click <code>Setup</code>.</p> </li> <li> <p>If <code>ejabberd.yml</code> is not found, it will be downloaded from ejabberd git repository.</p> </li> <li> <p>Click <code>Reconnect and setup</code> to download ejabberd and all its dependencies. It will be compiled and started... it may take a pair of minutes.</p> </li> </ol> <p>Alternatively, if you already have ejabberd installed and running in your system, you can connect livebook to your ejabberd node</p>"},{"location":"livebooks/ejabberd-developer-livebook/#execute-some-erlang-code","title":"Execute some Erlang code","text":"<p>Now that Livebook is connected a running ejabberd node, you can run Erlang and Elixir code from this page directly in your node.</p> <p>For example, to run some erlang code, put your mouse over the new lines and click on <code>Evaluate</code>:</p> <pre><code>ejabberd_admin:registered_vhosts().\n</code></pre> <p>Let's define the details of an account, we will later register it. You may change those values:</p> <pre><code>Username = &lt;&lt;\"user1\"&gt;&gt;,\nServer = &lt;&lt;\"localhost\"&gt;&gt;,\nPassword = &lt;&lt;\"somepass123\"&gt;&gt;,\n{Username, Server, Password}.\n</code></pre> <p>Now let's execute an Erlang function to register the account:</p> <pre><code>ejabberd_auth:try_register(Username, Server, Password).\n</code></pre> <p>Let's check the account was registered:</p> <pre><code>ejabberd_auth:get_users(&lt;&lt;\"localhost\"&gt;&gt;).\n</code></pre> <p>And is the account's password the one we introduced?</p> <pre><code>Password == ejabberd_auth:get_password(Username, Server).\n</code></pre> <p>Ok, enough for now, let's remove the account:</p> <pre><code>ejabberd_auth:remove_user(Username, Server).\n</code></pre>"},{"location":"livebooks/ejabberd-developer-livebook/#execute-some-elixir-code","title":"Execute some Elixir code","text":"<p>The same code of the previous section can be executed using Elixir:</p> <pre><code>:ejabberd_admin.registered_vhosts()\n</code></pre> <pre><code>username = &lt;&lt;\"user1\"&gt;&gt;\nserver = &lt;&lt;\"localhost\"&gt;&gt;\npassword = &lt;&lt;\"somepass123\"&gt;&gt;\n{username, server, password}\n</code></pre> <pre><code>:ejabberd_auth.try_register(username, server, password)\n</code></pre> <pre><code>:ejabberd_auth.get_users(server)\n</code></pre> <pre><code>password == :ejabberd_auth.get_password(username, server)\n</code></pre> <pre><code>:ejabberd_auth.remove_user(username, server)\n</code></pre>"},{"location":"livebooks/ejabberd-developer-livebook/#run-api-commands","title":"Run API commands","text":"<p>Let's run some ejabberd API commands using the ejabberd_ctl frontend (there is is also mod_http_api and ejabberd_xmlrpc).</p> <p>For example, the status API command:</p> <pre><code>ejabberd_ctl:process([\"status\"]).\n</code></pre> <p>How to register an account using ejabberd_ctl to call the API command</p> <pre><code>command = ~c\"register\"\n:ejabberd_ctl.process([command, username, server, password])\n</code></pre> <p>If you have ejabberd installed in the the system, and the <code>ejabberdctl</code> command-line script is available in your PATH, then you could also try to execute with:</p> <pre><code>os:cmd(\"ejabberdctl status\").\n</code></pre> <pre><code>:os.cmd(~c\"ejabberdctl status\")\n</code></pre>"},{"location":"livebooks/ejabberd-developer-livebook/#draw-process-structure","title":"Draw process structure","text":"<p>Let's view the ejabberd process tree:</p> <pre><code>Kino.Process.render_app_tree(:ejabberd, direction: :left_right)\n</code></pre> <p>Let's view the erlang processes that handle XMPP client connections. If this graph is empty, login to ejabberd with a client and reevaluate this code:</p> <pre><code>Kino.Process.render_sup_tree(:ejabberd_c2s_sup, direction: :left_right)\n</code></pre> <p>And some information about the erlang process that handles the XMPP client session:</p> <pre><code>[resource] = :ejabberd_sm.get_user_resources(username, server)\nElixir.Process.info(:ejabberd_sm.get_session_pid(username, server, resource))\n</code></pre>"},{"location":"livebooks/ejabberd-developer-livebook/#connect-livebook-to-your-ejabberd-node","title":"Connect Livebook to your ejabberd node","text":"<p>By default this livebook downloads, compiles and starts ejabberd by setting up ejabberd sinde livebook. If you already have ejabberd installed and would like to connect this livebook to your existing ejabberd node, follow those steps:</p>"},{"location":"livebooks/ejabberd-developer-livebook/#get-erlang-node-name","title":"Get erlang node name","text":"<p>To connect Livebook to your running ejabberd node, you must know its erlang node name and its cookie.</p> <p>The erlang node name is by default <code>ejabberd@localhost</code>. You can check this in many places, for example:</p> <ul> <li>Using <code>ejabberdctl status</code>:</li> </ul> <pre><code>$ ejabberdctl status\nThe node ejabberd@localhost is started with status: started\nejabberd 24.2.52 is running in that node\n</code></pre> <ul> <li>In the <code>ejabberd.log</code> file, which contains a line like:</li> </ul> <pre><code>2024-03-26 13:18:35.019288+01:00 [info] &lt;0.216.0&gt;@ejabberd_app:start/2:63\nejabberd 24.2.52 is started in the node ejabberd@localhost in 0.91s\n</code></pre>"},{"location":"livebooks/ejabberd-developer-livebook/#setup-ejabberd-node","title":"Setup ejabberd node","text":"<p>A Livebook can only connect to an Erlang node that has Elixir support. So, make sure you install not only Erlang, but also Elixir.</p> <p>When compiling ejabberd, make sure to enable Elixir support. It should get enabled by default, but you can ensure this: either by <code>./configure --with-rebar=mix</code> or by <code>./configure --enable-elixir</code>.</p> <p>Then start ejabberd with IEx shell: <code>ejabberdctl iexlive</code></p>"},{"location":"livebooks/ejabberd-developer-livebook/#get-erlang-cookie","title":"Get erlang cookie","text":"<p>The erlang cookie is a random string of capital letters required to connect to an existing erlang node.</p> <p>You can get it in a running node, simply call:</p> <pre><code>:erlang.get_cookie()\n:XQFOPGGPSNEZNUWKRZJU\n</code></pre>"},{"location":"livebooks/ejabberd-developer-livebook/#connect-this-livebook-to-your-ejabberd-node","title":"Connect this livebook to your ejabberd node","text":"<p>Now that you have ejabberd running, and you know the information required to connect to it:</p> <ol> <li>go to Livebook</li> <li>in the left side bar, click the <code>Runtime settings</code> icon, or press <code>sr</code> keyboard shortcut</li> <li>click the <code>Configure</code> button</li> <li>click the <code>Attached node</code> button</li> <li>introduce the erlang node name (<code>ejabberd@localhost</code>) and cookie (<code>XQFOPGGPSNEZNUWKRZJU</code>) of your ejabberd node</li> <li>click the <code>Connect</code> button (it may say <code>Reconnect</code>)</li> <li>If it connected successfully, it will now show memory consumption of that node</li> </ol>"},{"location":"livebooks/ejabberd-developer-livebook/#test-the-connection","title":"Test the connection","text":"<p>Now that Livebook is connected to your running ejabberd node, you can run Erlang and Elixir code from this page directly in your node.</p> <p>For example, to run some erlang code, put your mouse over the new lines and click on <code>Evaluate</code>:</p> <pre><code>ejabberd_admin:registered_vhosts().\n</code></pre> <p>The same code can be executed using Elixir:</p> <pre><code>:ejabberd_admin.registered_vhosts()\n</code></pre>"},{"location":"livebooks/ejabberd-developer-livebook/#stop-ejabberd","title":"Stop ejabberd","text":"<p>Let' stop ejabberd insie livebook</p> <pre><code>:ejabberd.stop()\n</code></pre>"},{"location":"roadmap/","title":"ejabberd Roadmap","text":""},{"location":"roadmap/#in-the-works","title":"In the Works","text":"<ul> <li>Remove support for Erlang/OTP older than 25</li> </ul>"},{"location":"roadmap/#planned","title":"Planned","text":"<ul> <li> <p>Remove support for Rebar2</p> <p>ejabberd includes many tweaks to support rebar3 and rebar2. By removing support for rebar2, we could simplify rebar.config and other files a lot. But more importantly, dependencies would not need to be updated just because other dependencies are updated: Rebar2 requires exact version numbers to be provided, Rebar3 doesn't require that, and neither does Mix.</p> </li> </ul>"},{"location":"roadmap/#released","title":"Released","text":"<p>This is a brief summary for each released version. For details, please consult ejabberd's ChangeLog.</p>"},{"location":"roadmap/#2025","title":"2025","text":"<ul> <li> <p>25.07</p> <ul> <li>New module mod_antispam</li> <li>New module mod_pubsub_serverinfo</li> <li>mod_matrix_gw: Support for joining old versions of Matrix rooms too</li> <li>New options rest_proxy, hosts_alias, auth_password_types_hidden_in_scram1</li> <li>Erlang/OTP 25 required, OTP 28 supported</li> </ul> </li> <li> <p>25.04</p> <ul> <li>Fix handling multiple occupant-id</li> </ul> </li> <li> <p>25.03</p> <ul> <li>mod_matrix_gw: Support for joining Matrix rooms as MUC rooms</li> <li>auth_stored_password_types: Multiple Simultaneous Password Types</li> <li>mod_adhoc_api: New module to execute API commands using XMPP client</li> <li>Macros and Keywords Improvements</li> <li>CTL_OVER_HTTP: New option in <code>ejabberdctl</code> script</li> <li>Container images: reduce friction, use macros, webadmin port</li> </ul> </li> </ul>"},{"location":"roadmap/#2024","title":"2024","text":"<ul> <li> <p>24.12</p> <ul> <li>XEP-0484: Fast Authentication Streamlining Tokens</li> <li>Deprecation schedule for Erlang/OTP older than 25.0</li> <li>Commands API v3</li> </ul> </li> <li> <p>24.10</p> <ul> <li>New module mod_s2s_bidi</li> <li>New module mod_scram_upgrade</li> <li>IQ permission in privileged entities</li> <li>PubSub varied fixes</li> <li>WebAdmin improvements</li> </ul> </li> <li> <p>24.07</p> <ul> <li>Bugfixes and minor improvements</li> </ul> </li> <li> <p>24.06</p> <ul> <li>Reworked the ejabberd Docs and moved to MkDocs+Material</li> <li>Automatic SQL schema is now enabled by default</li> <li>Improved the ejabberd WebAdmin with support to use API commands</li> <li>Support for UNIX Socket Domain in MySQL and PostgreSQL</li> <li>Support Elixir 1.17 and Erlang/OTP 27.0</li> </ul> </li> <li> <p>24.02</p> <ul> <li>Matrix gateway</li> <li>RFC 9266 Channel Bindings for TLS 1.3</li> <li>XEP-0386: Bind 2</li> <li>XEP-0388: Extensible SASL Profile (SASL2)</li> <li>XEP-0424: Message Retraction</li> <li>XEP-0440: SASL Channel-Binding Type Capability</li> <li>XEP-0474: SASL SCRAM Downgrade Protection</li> <li>XEP-0480: SASL Upgrade Tasks</li> <li>Automatic SQL schema creation and update</li> <li>Commands API versioning</li> <li>Support Elixir 1.16 and Erlang/OTP 27.0-rc1</li> </ul> </li> </ul>"},{"location":"roadmap/#2023","title":"2023","text":"<ul> <li> <p>23.10</p> <ul> <li>Support for XEP-0402: PEP Native Bookmarks</li> <li>Support for XEP-0421: Occupant Id</li> <li>MySQL Performance enhancements</li> </ul> </li> <li> <p>23.04</p> <ul> <li><code>mod_mam</code> support for XEP-0425: Message Moderation</li> <li>New <code>mod_muc_rtbl</code>: Real-Time Block List for MUC rooms</li> <li>Binaries use Erlang/OTP 25.3, and changes in containers</li> </ul> </li> <li> <p>23.01</p> <ul> <li>New <code>mod_mqtt_bridge</code>: MQTT bridge</li> </ul> </li> </ul>"},{"location":"roadmap/#2022","title":"2022","text":"<ul> <li> <p>22.10</p> <ul> <li>Improved MIX support</li> <li>Improved SQL reconnection Mechanism</li> <li>Better burst traffix handling</li> </ul> </li> <li> <p>22.05</p> <ul> <li>Improved MQTT, MUC and ConverseJS integration</li> <li>New installers and container image</li> <li>Support for Erlang/OTP 25</li> </ul> </li> </ul>"},{"location":"roadmap/#2021","title":"2021","text":"<ul> <li> <p>21.12</p> <ul> <li>New <code>mod_conversejs</code>: built-in ConverseJS web client</li> <li>Support for MUC Hats extension</li> <li>PubSub, MucSub and Multicast improvements</li> </ul> </li> <li> <p>21.07</p> <ul> <li>Improved database and caching for shared rosters</li> <li>Broader multicast support for MUC</li> <li>Improved rebar3 and Elixir support</li> </ul> </li> <li> <p>21.04</p> <ul> <li>Full support for Erlang/OTP 24 and rebar3</li> <li>New API commands</li> <li>New CAPTCHA script</li> </ul> </li> <li> <p>21.01</p> <ul> <li>Systemd watchdog support</li> <li>STUN improvements</li> </ul> </li> </ul>"},{"location":"roadmap/#2020","title":"2020","text":"<ul> <li> <p>20.12</p> <ul> <li>Extended SCRAM-SHA support</li> <li>Microsoft ODBC Driver support</li> </ul> </li> <li> <p>20.07</p> <ul> <li>Support for Unix Domain Sockets</li> <li>Erlang/OTP 23 compatibility</li> </ul> </li> <li> <p>20.04</p> <ul> <li>New <code>mod_stun_disco</code>: support XEP-0215 including Audio/Video calls</li> <li>Improved MS SQL support</li> </ul> </li> <li> <p>20.03</p> <ul> <li>SSL connection to MySQL</li> <li>Improved performance of <code>mod_shared_roster</code></li> </ul> </li> <li> <p>20.02</p> <ul> <li>Improved compatibility with CockroachDB</li> <li>Emoji storage in MSSQL</li> </ul> </li> <li> <p>20.01</p> <ul> <li>OAuth support for ejabberd's MQTT</li> <li>New OTP 22 event logger</li> <li>New config parser &amp; validator</li> </ul> </li> </ul>"},{"location":"roadmap/#2019","title":"2019","text":"<ul> <li> <p>19.09</p> <ul> <li>Significant improvements in ACME support: ACME v2</li> <li>Erlang/OTP 19.3 is required</li> </ul> </li> <li> <p>19.08</p> <ul> <li>New JWT (JSON Web Token) authentication</li> <li>New configuration validator, yconf</li> <li>Improved MUC scalability</li> <li>Removed Riak support</li> </ul> </li> <li> <p>19.05</p> <ul> <li>MQTT over WebSocket</li> <li>Improved MucSub</li> <li>Erlang/OTP 19.1 is required</li> </ul> </li> <li> <p>19.02</p> <ul> <li>MQTT Support</li> <li>MIX improvements</li> </ul> </li> </ul>"},{"location":"roadmap/#2018","title":"2018","text":"<ul> <li> <p>18.12</p> <ul> <li>XML Compression in message archive storage</li> <li>PROXY protocol support versions 1 and 2</li> <li>MUC Self-Ping server optimisation (XEP-0410)</li> <li>Bookmarks Conversion (XEP-0411)</li> </ul> </li> <li> <p>18.09</p> <ul> <li>Default configuration file simplification</li> <li>Improved logging</li> <li>OpenSSL 1.1.1 support</li> <li>Modular ejabberd core</li> </ul> </li> <li> <p>18.06</p> <ul> <li>Stop ejabberd initialization on invalid/unknown options</li> <li>Support SASL PLAIN</li> <li>Drop support of mod_irc</li> </ul> </li> <li> <p>18.04</p> </li> <li> <p>18.03</p> <ul> <li>New SQL schemas with server_host</li> </ul> </li> <li> <p>18.01</p> </li> </ul>"},{"location":"roadmap/#2017","title":"2017","text":"<ul> <li> <p>17.12</p> <ul> <li>SNI (Server Name Indication) for inbound connections</li> <li>Rewrite ejabberd system monitor</li> <li>Support PubSub v1.14 and OMEMO</li> </ul> </li> <li> <p>17.11</p> <ul> <li>ACME Support</li> <li>Introduce \u2018certfiles\u2019 global option</li> <li>PubSub improved, and SQL storage</li> </ul> </li> <li> <p>17.09</p> <ul> <li>New mod_avatar</li> <li>SRV for XMPP over TLS</li> </ul> </li> <li> <p>17.08</p> <ul> <li>XEP-0357: Push Notifications</li> <li>Modular cluster with cluster_backend</li> </ul> </li> <li> <p>17.07</p> </li> <li> <p>17.06</p> <ul> <li>New Caching system</li> <li>Extended Riak support</li> <li>Certificate manager</li> </ul> </li> <li> <p>17.04</p> </li> <li> <p>17.03</p> <ul> <li>Modular code</li> <li>Dynamic configuration reload</li> <li>mod_blockstrangers for spam protection</li> <li>S2S dialback</li> </ul> </li> <li> <p>17.01</p> <ul> <li>PostgreSQL SSL support</li> </ul> </li> </ul>"},{"location":"roadmap/#2016","title":"2016","text":"<ul> <li> <p>16.12</p> <ul> <li>New BOSH module</li> <li>New Commands API permissions framework</li> <li>XMPP packet handling using dedicated <code>xmpp</code> erlang library</li> <li>New ejaberd/mix Docker container</li> </ul> </li> <li> <p>16.09</p> <ul> <li>Support for Elixir configuration file</li> <li>XEP-0355 Namespace Delegation</li> <li>XEP-0356 Privileged Entity</li> </ul> </li> <li> <p>16.08</p> <ul> <li>New MUC/Sub</li> <li>Improved Elixir support</li> <li>Major clean-up and improvement on OAuth ReST API</li> </ul> </li> <li> <p>16.06</p> <ul> <li>New ACL (Access Control List) infrastructure</li> </ul> </li> <li> <p>16.04</p> </li> <li> <p>16.03</p> <ul> <li>Experimental support for MIX (Mediated Information eXchange)</li> <li>Erlang/OTP 17.5 required</li> </ul> </li> <li> <p>16.02</p> <ul> <li>XEP-0013 Flexible Offline Message Retrieval</li> <li>Improved Message Archive Management (MAM)</li> <li>Published ejabberd on hex.pm</li> <li>Faster and more memory efficient XML parsing and TLS encryption.</li> <li>Stream compression after SASL</li> <li>Migration script from Prosody</li> </ul> </li> <li> <p>16.01</p> </li> </ul>"},{"location":"roadmap/#2015","title":"2015","text":"<ul> <li> <p>15.11</p> <ul> <li>Improved <code>join_cluster</code> and <code>leave_cluster</code></li> </ul> </li> <li> <p>15.10</p> <ul> <li>New mod_http_upload with support for XEP-0363 HTTP File Upload</li> <li>Added support for Grapherl</li> </ul> </li> <li> <p>15.09</p> <ul> <li>OAuth 2.0 delegation framework</li> <li>Preliminary OAuth and HTTP based ejabberd API</li> <li>X-AUTH2 authentication mechanism</li> </ul> </li> <li> <p>15.07</p> </li> <li> <p>15.06</p> <ul> <li>New mod_mam with XEP-0313 Message Archive Management</li> <li>Configuration checking on launch</li> <li>Added Windows 7/8 installers, RPM and DEB packages</li> <li>Document protocol support and version inside each module</li> </ul> </li> <li> <p>15.04</p> <ul> <li>Added mod_admin_extra and mod_muc_admin</li> <li>Added XEP-0033 Extended Stanza Addressing</li> <li>Support to embed ejabberd in an Elixir app</li> <li>Erlang/OTP R16B03-1 is required</li> </ul> </li> <li> <p>15.03</p> <ul> <li>Added support for WebSocket</li> <li>Customizable session backends</li> <li>SCRAM support for SQL authentication backend</li> <li>Documentation was converted from LaTeX to Markdown and published in docs.ejabberd.im/</li> </ul> </li> <li> <p>15.02</p> <ul> <li>Added Elixir support</li> <li>New command to reload configuration withour restart</li> <li>Bug tracker moves from JIRA to GitHub Issues</li> </ul> </li> <li> <p>Revamped ejabberd website, new logo, new development process and bugtracking migrated from JIRA to GitHub</p> </li> </ul>"},{"location":"roadmap/#2014","title":"2014","text":"<ul> <li> <p>14.12</p> <ul> <li>New mod_client_state with XEP-0352: Client State Indication</li> <li>New mod_fail2ban</li> </ul> </li> <li> <p>14.07</p> <ul> <li>SIP Outbound (RFC 5626)</li> </ul> </li> <li> <p>14.05</p> <ul> <li>RFC-3261 SIP proxy/registrar</li> <li>RFC-5766 TURN: Traversal Using Relays around NAT</li> <li>XEP-0198 Stream Management</li> <li>XEP-0321 Remote Roster Management</li> <li>Several improvements regarding encryption</li> <li>New Bash completion script for ejabberdctl</li> </ul> </li> </ul>"},{"location":"roadmap/#2013","title":"2013","text":"<ul> <li> <p>13.12</p> <ul> <li>New OpenSSL ciphers option in c2s, s2s and s2s_out</li> <li>ejabberd_xmlrpc included</li> </ul> </li> <li> <p>13.10</p> <ul> <li>ejabberd configuration file in YAML format</li> <li>Log files are created using Lager</li> <li>Rebar2 is used to manage dependencies</li> <li>Erlang/OTP R15 is required</li> </ul> </li> <li> <p>13.03-beta1 (announcement)</p> <ul> <li>Binarize and indent code</li> <li>New versioning scheme</li> </ul> </li> </ul>"},{"location":"roadmap/#2012","title":"2012","text":"<ul> <li>2.1.11<ul> <li>Added ODBC support for several modules</li> </ul> </li> </ul>"},{"location":"roadmap/#2011","title":"2011","text":"<ul> <li> <p>2.1.10</p> </li> <li> <p>2.1.9</p> <ul> <li>New SASL SCRAM-SHA-1 authentication mechanism</li> </ul> </li> </ul>"},{"location":"roadmap/#2010","title":"2010","text":"<ul> <li> <p>2.1.6</p> <ul> <li>mod_register: New captcha_protected option to require CAPTCHA</li> <li>Support PostgreSQL 9.0</li> </ul> </li> <li> <p>October: the source code repository and the bug tracker were finally moved to GitHub</p> </li> <li> <p>2.1.5</p> </li> <li> <p>2.1.4</p> <ul> <li>Full support for XEP-0115 Entity Capabilities v1.5</li> </ul> </li> <li> <p>2.1.2</p> </li> </ul>"},{"location":"roadmap/#2009","title":"2009","text":"<ul> <li> <p>2.1.1</p> </li> <li> <p>2.1.0</p> <ul> <li>LDAPS support</li> <li>STUN server</li> <li>New XEPs supported: XMPP Ping, Roster Versioning, Import/Export Format</li> <li>Erlang/OTP R13 is supported</li> </ul> </li> <li> <p>2.0.5 (announcement)</p> </li> <li> <p>2.0.4 (announcement)</p> </li> <li> <p>2.0.3 (announcement)</p> </li> </ul>"},{"location":"roadmap/#2008","title":"2008","text":"<ul> <li> <p>2.0.2 (announcement)</p> </li> <li> <p>2.0.1 (announcement)</p> </li> <li> <p>2.0.0 (announcement)</p> <ul> <li>New front-end and back-end cluster architecture</li> <li>Complete rewrite of the PubSub module</li> <li>New Proxy65 file transfer proxy</li> <li>BOSH support</li> <li>Many more improvements</li> </ul> </li> </ul>"},{"location":"roadmap/#2007","title":"2007","text":"<ul> <li> <p>1.1.4</p> </li> <li> <p>1.1.3</p> </li> </ul>"},{"location":"roadmap/#2006","title":"2006","text":"<ul> <li> <p>1.1.2 (announcement)</p> <ul> <li>LDAP improvements</li> <li>Microsoft SQL supported</li> <li>New Windows installer</li> </ul> </li> <li> <p>1.1.1 (announcement)</p> <ul> <li>Erlang/OTP R9C-2 required</li> </ul> </li> <li> <p>1.1.0 (announcement)</p> <ul> <li>JEP-0050: Ad-Hoc Commands</li> <li>JEP-0138: Stream Compression</li> <li>JEP-0175: SASL anonymous</li> <li>Native MySQL support</li> <li>MUC improvement: Chatroom logging</li> </ul> </li> </ul>"},{"location":"roadmap/#2005","title":"2005","text":"<ul> <li> <p>1.0.0 (announcement)</p> <ul> <li>S2S encryption: STARTTLS + SASL_EXTERNAL and STARTTLS + Dialback</li> <li>Different certificates can be defined for each virtual host.</li> <li>Support for vCard storage in ODBC</li> <li>New tool to convert Mnesia to ODBC</li> <li>Native PostgreSQL support</li> </ul> </li> <li> <p>0.9.8 (announcement)</p> <ul> <li>Enhanced virtual hosting</li> <li>Enhanced PubSub</li> </ul> </li> <li> <p>0.9.1 (announcement)</p> </li> <li> <p>0.9 (announcement)</p> <ul> <li>Added support for virtual hosts</li> <li>New mod_shared_roster</li> <li>Added PostgreSQL support</li> </ul> </li> <li> <p>February: source code moved from SVN to Git, and the bug tracker from Bugzilla to JIRA</p> </li> <li> <p>Beginning of 2005, source code moved from JabberStudio CVS to ProcessOne SVN</p> </li> </ul>"},{"location":"roadmap/#2004","title":"2004","text":"<ul> <li> <p>October: website moved from JabberStudio to ejabberd.jabber.ru, and the bug tracker to Jabber.ru\u2019s Bugzilla</p> </li> <li> <p>0.7.5</p> <ul> <li>Support for STARTTLS with C2S connections</li> <li>Support for authentification via external script</li> <li>Added module which implement JUD and vCard services using LDAP</li> <li>Improvements in web-based administration interface (user creation/removal, roster and offline queue management)</li> <li>Support for message expiration (JEP-0023)</li> <li>Support for HTTPS in web interface</li> </ul> </li> <li> <p>0.7</p> <ul> <li>Support for LDAP authentification</li> <li>Support for HTTP Polling</li> <li>Support for web-based administration interface</li> <li>Added command-line administration utility \"ejabberdctl\"</li> <li>Support for history management in MUC rooms</li> </ul> </li> </ul>"},{"location":"roadmap/#2003","title":"2003","text":"<ul> <li> <p>16th November, 0.5</p> <ul> <li>First release</li> </ul> </li> <li> <p>January, initial documentation in LaTeX: Ejabberd Installation and Operation Guide</p> </li> </ul>"},{"location":"roadmap/#2002","title":"2002","text":"<ul> <li> <p>18th November, first commit to CVS</p> </li> <li> <p>16th November, first erlang modules written</p> </li> </ul>"},{"location":"tutorials/","title":"ejabberd and XMPP tutorials","text":"<p>Learning ejabberd and XMPP through videos and hands-on tutorials.</p>"},{"location":"tutorials/#text-tutorials","title":"Text tutorials","text":"<p>In the ProcessOne's blog you will find tutorials about:</p> <ul> <li> <p>How to setup MariaDB, MQTT, PubSub, STUN/TURN, WebSocket.</p> </li> <li> <p>Elixir: Part 1, Part 2, Embed in Phoenix, Embed in Elixir app.</p> </li> <li> <p>Useful configuration steps</p> </li> <li> <p>Configuration for Office IM</p> </li> <li> <p>Configuration for XMPP compliance test</p> </li> <li> <p>Using a local development trusted CA on MacOS</p> </li> </ul> <p>In the so-called ejabberd book there are also old archived ejabberd tutorials.</p>"},{"location":"tutorials/#architecture","title":"Architecture","text":"<ul> <li> <p>Understanding ejabberd SaaS architecture</p> <p>Excerpt from XMPP Academy #1 starting at 1m33s.</p> </li> <li> <p>What are ejabberd backends? What backends are available in ejabberd and how do they work?</p> <p>Excerpt from XMPP Academy #2 starting at 2m05s.</p> </li> <li> <p>ejabberd backends architecture</p> <p>Excerpt from XMPP Academy #2 starting at 14m00s.</p> </li> <li> <p>What are ejabberd session backends and how to use them to scale?</p> <p>Excerpt from XMPP Academy #2 starting at 19m42s.</p> </li> </ul>"},{"location":"tutorials/#xmpp-on-mobile-devices-smartphones","title":"XMPP on mobile devices (smartphones)","text":"<ul> <li> <p>Mobile XMPP support on ejabberd SaaS and Business Edition: Standby, push and detached modes</p> <p>Excerpt from XMPP Academy #1 starting at 16m44s.</p> </li> <li> <p>How does Apple and Google Push support work on ejabberd SaaS and ejabberd Business Edition?</p> <p>Excerpt from XMPP Academy #3 starting at 1m20s.</p> </li> <li> <p>What is the relationship between ejabberd Push support and XEP-0357: Push Notifications?</p> <p>Excerpt from XMPP Academy #3 starting at 22m34s.</p> </li> <li> <p>What are message carbons and how do they work?</p> <p>Excerpt from XMPP Academy #2 starting at 27m30s.</p> </li> <li> <p>Demo: learning message carbons with Psi XMPP console</p> <p>Excerpt from XMPP Academy #2 starting at 29m51s.</p> </li> </ul>"},{"location":"tutorials/#xmpp-for-the-web","title":"XMPP for the Web","text":"<ul> <li> <p>ejabberd roadmap: announcing OAuth2 support</p> <p>Excerpt from XMPP Academy #1 starting at 27m43s.</p> </li> <li> <p>What is the impact of Websocket on Web chat performance?</p> <p>Excerpt from XMPP Academy #3 starting at 25m02s.</p> </li> </ul>"},{"location":"tutorials/#multi-user-chat","title":"Multi-User Chat","text":"<ul> <li>Why do avatars / carbons not work in MUC rooms? What is special about MUC rooms? <p>Excerpt from XMPP Academy #2 starting at 34m15s.</p> </li> </ul>"},{"location":"tutorials/#developer-tools-and-techniques","title":"Developer tools and techniques","text":"<ul> <li>What are the typical tools for quick XMPP prototyping?</li> </ul>"},{"location":"tutorials/#ejabberd-and-xmpp-server-side-implementation","title":"ejabberd and XMPP server-side implementation","text":"<ul> <li> <p>How does ejabberd internally store messages which are not yet delivered?</p> </li> <li> <p>How are privacy lists managed in ejabberd?</p> </li> <li> <p>Why do we seem to find duplicate in Message Archive Management backend?</p> <p>Excerpt from XMPP Academy #3 starting at 32m20s.</p> </li> </ul>"},{"location":"tutorials/mix-010/","title":"Getting started with MIX","text":"<p>MIX stands for Mediated Information eXchange and defined in MIX-CORE (XEP-0369), MIX-PRESENCE (XEP-0403) and MIX-PAM (XEP-0405). More concretely, ejabberd supports MIX 0.14.1.</p> <p>It is a work in progress extension for the XMPP protocol to build a group messaging protocol that does not rely on the presence mechanism. It is designed to overcome the limitation of Multi-User Chat (XEP-0045) , in a context where most clients are mobile clients.</p> <p>To do so, MIX is built on top of PubSub (XEP-0060) and use different nodes per channel to separate event types. There is five nodes to support five different types of event for each MIX channel:</p> <ul> <li>Messages</li> <li>Presence</li> <li>Participant list changes</li> <li>Subject update</li> <li>Conversion configuration changes</li> </ul> <p>This is a work in progress, but this is a very important task and we are happy to provide the very first server implementation of the Mix protocol to get up to speed on that specification.</p> <p>Here is a short walk through what can already be done.</p> <p>Also note that the specification can (and will) change significantly before it becomes stable. These examples are based on XEP-0369 v0.1.</p>"},{"location":"tutorials/mix-010/#configuration","title":"Configuration","text":"<p>Configuration is simple:</p> <ul> <li> <p>Install a recent ejabberd version (19.02 or newer)</p> </li> <li> <p>You need to add mod_mix and mod_mix_pam in ejabberd configuration, modules section:</p> <pre><code>modules:\n  mod_mix: {}\n  mod_mix_pam: {}\n</code></pre> </li> <li> <p>Make sure you have PubSub enabled. Default configuration is fine:</p> <pre><code>modules:\n  mod_pubsub:\n    access_createnode: pubsub_createnode\n    plugins:\n      - \"flat\"\n      - \"pep\"\n</code></pre> </li> <li> <p>The examples assume you have this virtual host:</p> <pre><code>hosts:\n  - shakespeare.example\n</code></pre> </li> </ul>"},{"location":"tutorials/mix-010/#usage","title":"Usage","text":"<p>There is no client supporting MIX yet so here is how it works directly at XMPP stream level.</p> <p>Here are real-life examples from playing with our MIX implementation:</p>"},{"location":"tutorials/mix-010/#creating-a-mix-channel","title":"Creating a MIX Channel","text":"<p>First of all, create a new MIX channel following 7.3.2 Creating a Channel:</p> <pre><code>&lt;iq id='lx09df27'\n    to='mix.shakespeare.example'\n    type='set'&gt;\n  &lt;create channel='coven' xmlns='urn:xmpp:mix:core:0'/&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"tutorials/mix-010/#joining-a-mix-channel","title":"Joining a MIX Channel","text":"<p>Now tell your server that you want your account to join that MIX channel, using MIX-PAM: 2.7 Joining a Channel:</p> <pre><code>&lt;iq type='set'\n    to='hag66@shakespeare.example'\n    id='E6E10350-76CF-40C6-B91B-1EA08C332FC7'&gt;\n  &lt;client-join xmlns='urn:xmpp:mix:pam:0'\n               channel='coven@mix.shakespeare.example'&gt;\n    &lt;join xmlns='urn:xmpp:mix:core:0'&gt;\n      &lt;nick&gt;third witch&lt;/nick&gt;\n      &lt;subscribe node='urn:xmpp:mix:nodes:messages'&gt;&lt;/subscribe&gt;\n      &lt;subscribe node='urn:xmpp:mix:nodes:presence'&gt;&lt;/subscribe&gt;\n      &lt;subscribe node='urn:xmpp:mix:nodes:participants'&gt;&lt;/subscribe&gt;\n      &lt;subscribe node='urn:xmpp:mix:nodes:subject'&gt;&lt;/subscribe&gt;\n      &lt;subscribe node='urn:xmpp:mix:nodes:config'&gt;&lt;/subscribe&gt;\n    &lt;/join&gt;\n  &lt;/client-join&gt;\n&lt;/iq&gt;\n</code></pre> <p>You receive IQ that confirms success:</p> <pre><code>&lt;iq type=\"result\"\n    from=\"hag66@shakespeare.example\"\n    to=\"hag66@shakespeare.example/MacBook-Pro-de-Mickael\"\n    id=\"E6E10350-76CF-40C6-B91B-1EA08C332FC7\"&gt;\n  &lt;client-join xmlns='urn:xmpp:mix:pam:0'&gt;\n    &lt;join xmlns=\"urn:xmpp:mix:core:0\"\n          jid='d79d011852b97adfaad6#coven@mix.shakespeare.example'&gt;\n      &lt;nick&gt;third witch&lt;/nick&gt;\n      &lt;subscribe node=\"urn:xmpp:mix:nodes:messages\"&gt;&lt;/subscribe&gt;\n      &lt;subscribe node=\"urn:xmpp:mix:nodes:presence\"&gt;&lt;/subscribe&gt;\n      &lt;subscribe node=\"urn:xmpp:mix:nodes:participants\"&gt;&lt;/subscribe&gt;\n      &lt;subscribe node=\"urn:xmpp:mix:nodes:subject\"&gt;&lt;/subscribe&gt;\n      &lt;subscribe node=\"urn:xmpp:mix:nodes:config\"&gt;&lt;/subscribe&gt;\n   &lt;/join&gt;\n  &lt;/client-join&gt;\n&lt;/iq&gt;\n</code></pre> <p>Subscribers on the participants node for that channel will also receive the new list of participants (so, including ourselves in that case):</p> <pre><code>&lt;message from=\"coven@mix.shakespeare.example\"\n         type=\"headline\"\n         to=\"hag66@shakespeare.example/MacBook-Pro-de-Mickael\"&gt;\n &lt;event xmlns=\"http://jabber.org/protocol/pubsub#event\"&gt;\n  &lt;items node=\"urn:xmpp:mix:nodes:participants\"&gt;\n   &lt;item id=\"3d1766e2bd1b02167104f350f84b0668f850ef92\"&gt;\n    &lt;participant xmlns=\"urn:xmpp:mix:core:0\" jid=\"hag66@shakespeare.example\"&gt;&lt;/participant&gt;\n   &lt;/item&gt;\n  &lt;/items&gt;\n &lt;/event&gt;\n&lt;/message&gt;\n</code></pre>"},{"location":"tutorials/mix-010/#setting-a-nick","title":"Setting a nick","text":"<p>You may want to set a nick for this channel (see 7.1.4 Setting a Nick):</p> <pre><code>&lt;iq type='set'\n    to='coven@mix.shakespeare.example'\n    id='7nve413p'&gt;\n  &lt;setnick xmlns='urn:xmpp:mix:core:0'&gt;\n    &lt;nick&gt;thirdwitch&lt;/nick&gt;\n  &lt;/setnick&gt;\n&lt;/iq&gt;\n</code></pre> <p>Note: Support for MIX nickname registration is not implemented in ejabberd.</p>"},{"location":"tutorials/mix-010/#sending-and-receiving-messages","title":"Sending and receiving messages","text":"<p>You can now start chatting with your peers, by publishing on the message node (see 7.1.6 Sending a Message):</p> <pre><code>&lt;message to='coven@mix.shakespeare.example'\n         id='92vax143g'\n         type='groupchat'&gt;\n  &lt;body&gt;Harpier cries: 'tis time, 'tis time.&lt;/body&gt;\n&lt;/message&gt;\n</code></pre> <p>The message is received by all subscribers on the message node on that MIX channel:</p> <pre><code>&lt;message\n to='hag77@shakespeare.example'\n from='coven@mix.shakespeare.example/19be8c262ed618e078b7'\n type='groupchat'\n id='1625493702877370'&gt;\n  &lt;mix xmlns='urn:xmpp:mix:core:0'&gt;\n    &lt;nick&gt;thirdwitch&lt;/nick&gt;\n    &lt;jid&gt;hag66@shakespeare.example&lt;/jid&gt;\n  &lt;/mix&gt;\n  &lt;body&gt;Harpier cries: &amp;apos;tis time, &amp;apos;tis time.&lt;/body&gt;\n&lt;/message&gt;\n</code></pre>"},{"location":"tutorials/mix-010/#querying-participants-list","title":"Querying participants list","text":"<p>A participant can always get list of participants with a PubSub query on node items for the channel (see 6.6 Determining the Participants in a Channel):</p> <pre><code>&lt;iq type='get'\n    to='coven@mix.shakespeare.example'\n    id='mix4'&gt;\n  &lt;pubsub xmlns='http://jabber.org/protocol/pubsub'&gt;\n    &lt;items node='urn:xmpp:mix:nodes:participants'&gt;&lt;/items&gt;\n  &lt;/pubsub&gt;\n&lt;/iq&gt;\n</code></pre> <p>The channel will reply with list of participants:</p> <pre><code>&lt;iq to='hag66@shakespeare.example/tka1'\n    from='coven@mix.shakespeare.example'\n    type='result'\n    id='kl2fax27'&gt;\n  &lt;pubsub xmlns='http://jabber.org/protocol/pubsub'&gt;\n    &lt;items node='urn:xmpp:mix:nodes:participants'&gt;\n      &lt;item id='19be8c262ed618e078b7'&gt;\n        &lt;participant nick='thirdwitch'\n jid='hag66@shakespeare.example'\n xmlns='urn:xmpp:mix:core:0'/&gt;\n      &lt;/item&gt;\n      &lt;item id='6be2b26cbf4d7108f1fb'&gt;\n        &lt;participant jid='hag77@shakespeare.example'\n xmlns='urn:xmpp:mix:core:0'/&gt;\n      &lt;/item&gt;\n    &lt;/items&gt;\n  &lt;/pubsub&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"tutorials/mix-010/#caveats","title":"Caveats","text":"<p>At the moment it is unclear from XEP-0369 example how you match a message you receive to a participant. We are going to improve our implementation in the following way:</p> <ol> <li>Add a participant id on the item tag when broadcasting new participant.</li> <li>Add the participant id on the published items.</li> <li>Add the participant id in participants list on the publisher</li> </ol> <p>Another issue is that the current specification and implementation will have trouble scaling and offer plenty of opportunities for \"Denial of Service\" attacks. This is something that will change in the future as the specification matures. However, currently, do not deploy or rely on this implementation for large-scale production services. The work is still an experiment to progress on the specifications by offering client developers to give real life feedback on a reference implementation of the current specification.</p>"},{"location":"tutorials/mix-010/#conclusion","title":"Conclusion","text":"<p>We are only at the beginning of MIX. However, we are excited to have reached a point where it is already usable in some cases.</p> <p>It is still missing on administrative tasks, right management, user invitations, relationship with MAM archiving and probably a lot more. And we need consolidations on participants message attribution. However, we want to iterate fast with client developers to prototype implementation changes and have meaningful and real life feedback to improve XEP-0359.</p> <p>Send us your feedback !</p>"},{"location":"tutorials/muc-hats/","title":"MUC Hats","text":"<p> improved in 25.03</p> <p>ejabberd implements support for XEP-0317 Hats since version 21.12, as implemented in commit 5d0e599. In ejabberd 25.03, support has been improved to XEP v0.2.0, with some minor differences to the examples in the protocol, which are described here.</p>"},{"location":"tutorials/muc-hats/#configuration","title":"Configuration","text":"<p>To test those examples, let's apply some configuration changes to the default ejabberd configuration file:</p> <pre><code>diff --git a/ejabberd.yml.example b/ejabberd.yml.example\nindex 0964afa06..ae782dde0 100644\n--- a/ejabberd.yml.example\n+++ b/ejabberd.yml.example\n@@ -16,6 +16,7 @@\n\n hosts:\n   - localhost\n+  - example.edu\n\n loglevel: info\n\n@@ -188,6 +189,7 @@ modules:\n     default: always\n   mod_mqtt: {}\n   mod_muc:\n+    host: \"courses.@HOST@\"\n     access:\n       - allow\n     access_admin:\n@@ -198,6 +200,8 @@ modules:\n       - allow\n     default_room_options:\n       mam: true\n+      enable_hats: true\n+      persistent: true\n   mod_muc_admin: {}\n   mod_muc_occupantid: {}\n   mod_offline:\n</code></pre>"},{"location":"tutorials/muc-hats/#adding-a-hat","title":"Adding a Hat","text":"<p>When adding a hat as documented in 3.2 Adding a Hat there are a few differences:</p> <ul> <li>the form provided by ejabberd is slightly different to the examples,   consequently the form filling must be updated.</li> <li>form submission in example 5 should have in the <code>command</code> element <code>action='complete'</code></li> </ul> <p>In summary, the flow is:</p>"},{"location":"tutorials/muc-hats/#admin-requests-to-add-a-hat","title":"Admin Requests to Add a Hat","text":"<p>Identical to Example 3:</p> <pre><code>&lt;iq from='professor@example.edu/office'\n    id='fdi3n2b6'\n    to='physicsforpoets@courses.example.edu'\n    type='set'\n    xml:lang='en'&gt;\n  &lt;command xmlns='http://jabber.org/protocol/commands'\n           action='execute'\n           node='urn:xmpp:hats:commands:don'/&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"tutorials/muc-hats/#service-returns-form-to-admin","title":"Service Returns Form to Admin","text":"<p>The formulary provided by ejabberd is slightly different than the one in Example 4:</p> <pre><code>&lt;iq from='physicsforpoets@courses.example.edu'\n    id='fdi3n2b6'\n    to='professor@example.edu/office'\n    type='result'\n    xml:lang='end'&gt;\n  &lt;command xmlns='http://jabber.org/protocol/commands'\n           node='urn:xmpp:hats:commands:don'\n           sessionid='2025-02-14T12:23:47.445692Z'\n           status='executing'&gt;\n    &lt;actions execute='complete'&gt;\n      &lt;complete/&gt;\n    &lt;/actions&gt;\n    &lt;x type='form' xmlns='jabber:x:data'&gt;\n      &lt;title&gt;Add a hat to a user&lt;/title&gt;\n      &lt;field var='jid'\n             type='jid-single'\n             label='Jabber ID'&gt;\n        &lt;required/&gt;\n      &lt;/field&gt;\n      &lt;field var='hat_title'\n             type='text-single'\n             label='Hat title'/&gt;\n      &lt;field var='hat_uri'\n             type='text-single'\n             label='Hat URI'&gt;\n        &lt;required/&gt;\n      &lt;/field&gt;\n    &lt;/x&gt;\n  &lt;/command&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"tutorials/muc-hats/#admin-submits-form","title":"Admin Submits Form","text":"<p>Compared to Example 5, the <code>command</code> element includes <code>action='complete'</code>, and the form fields are different:</p> <pre><code>&lt;iq from='professor@example.edu/office'\n    id='9fens61z'\n    to='physicsforpoets@courses.example.edu'\n    type='set'\n    xml:lang='en'&gt;\n  &lt;command xmlns='http://jabber.org/protocol/commands'\n           node='urn:xmpp:hats:commands:don'\n           action='complete'\n           sessionid='2025-02-14T12:23:47.445692Z'&gt;\n    &lt;x xmlns='jabber:x:data' type='submit'&gt;\n      &lt;field type='hidden' var='FORM_TYPE'&gt;\n        &lt;value&gt;urn:xmpp:hats:commands&lt;/value&gt;\n      &lt;/field&gt;\n      &lt;field var='jid'&gt;\n        &lt;value&gt;terry.anderson@example.edu&lt;/value&gt;\n      &lt;/field&gt;\n      &lt;field var='hat_title'&gt;\n        &lt;value&gt;Teacher Assistant title&lt;/value&gt;\n      &lt;/field&gt;\n      &lt;field var='hat_uri'&gt;\n        &lt;value&gt;http://tech.example.edu/hats#TeacherAssistant&lt;/value&gt;\n      &lt;/field&gt;\n    &lt;/x&gt;\n  &lt;/command&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"tutorials/muc-hats/#service-informs-admin-of-completion","title":"Service Informs Admin of Completion","text":"<p>The result stanza is similar to Example 6:</p> <pre><code>&lt;iq from='physicsforpoets@courses.example.edu'\n    id='9fens61z'\n    to='professor@example.edu/office'\n    type='result'\n    xml:lang='en'&gt;\n  &lt;command status='completed'\n           sessionid='2025-02-14T12:23:47.445692Z'\n           node='urn:xmpp:hats:commands:don'\n           xmlns='http://jabber.org/protocol/commands'/&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"tutorials/muc-hats/#listing-hats","title":"Listing Hats","text":"<p>It's useful to be able to list the existing room hats, but the XEP doesn't document that possibility, so a custom method is implemented in ejabberd: sending a command query to node <code>urn:xmpp:hats:commands:dlist</code>:</p>"},{"location":"tutorials/muc-hats/#admin-requests-to-list-hats","title":"Admin Requests to List Hats","text":"<pre><code>&lt;iq from='professor@example.edu/office'\n    id='fdi3n2b6'\n    to='physicsforpoets@courses.example.edu'\n    type='set'\n    xml:lang='en'&gt;\n  &lt;command xmlns='http://jabber.org/protocol/commands'\n           action='execute'\n           node='urn:xmpp:hats:commands:dlist'/&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"tutorials/muc-hats/#service-returns-list-of-hats","title":"Service Returns List of Hats","text":"<pre><code>&lt;iq xml:lang='en'\n    to='professor@example.edu/office'\n    from='physicsforpoets@courses.example.edu'\n    type='result'\n    id='fdi3n2b6'&gt;\n  &lt;command status='completed'\n           sessionid='2025-02-14T12:27:33.414328Z'\n           node='urn:xmpp:hats:commands:dlist'\n           xmlns='http://jabber.org/protocol/commands'&gt;\n    &lt;x type='result' xmlns='jabber:x:data'&gt;\n      &lt;title&gt;List of users with hats&lt;/title&gt;\n      &lt;reported&gt;\n        &lt;field var='jid' label='Jabber ID'/&gt;\n        &lt;field var='hat_title' label='Hat title'/&gt;\n        &lt;field var='hat_uri' label='Hat URI'/&gt;\n      &lt;/reported&gt;\n      &lt;item&gt;\n        &lt;field var='jid'&gt;\n          &lt;value&gt;terry.anderson@example.edu&lt;/value&gt;\n        &lt;/field&gt;\n        &lt;field var='hat_title'&gt;\n          &lt;value&gt;http://tech.example.edu/hats#TeacherAssistant&lt;/value&gt;\n        &lt;/field&gt;\n        &lt;field var='hat_uri'&gt;\n          &lt;value&gt;Teacher Assistant title&lt;/value&gt;\n        &lt;/field&gt;\n      &lt;/item&gt;\n    &lt;/x&gt;\n  &lt;/command&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"tutorials/muc-hats/#including-a-hat-in-presence","title":"Including a Hat in Presence","text":"<p>In the previous examples, <code>professor</code> added a hat to <code>terry.anderson</code>. Then let's imagine <code>terry.anderson</code> joins the room. Finally, when any client joins the room, for example <code>steve</code>, he receives a stanza like the one in Example 1:</p> <pre><code>&lt;presence from='physicsforpoets@courses.example.edu/Terry'\n          id='34:271777'\n          to='steve@example.edu/tablet'\n          xml:lang='es'&gt;\n  &lt;x xmlns='http://jabber.org/protocol/muc#user'&gt;\n    &lt;item role='participant' affiliation='none'/&gt;\n  &lt;/x&gt;\n  &lt;hats xmlns='urn:xmpp:hats:0'&gt;\n    &lt;hat uri='http://tech.example.edu/hats#TeacherAssistant'\n         title='Teacher Assistant title'/&gt;\n  &lt;/hats&gt;\n  &lt;status&gt;status user1&lt;/status&gt;\n&lt;/presence&gt;\n</code></pre>"},{"location":"tutorials/muc-hats/#removing-a-hat","title":"Removing a Hat","text":"<p>This works similarly to the examples in 3.3 Removing a Hat</p>"},{"location":"tutorials/muc-hats/#admin-requests-to-remove-a-hat","title":"Admin Requests to Remove a Hat","text":"<p>Remember that the form for the hat is different than the one in Example 7.</p> <pre><code>&lt;iq from='professor@example.edu/office'\n    id='9fens61z'\n    to='physicsforpoets@courses.example.edu'\n    type='set'\n    xml:lang='en'&gt;\n  &lt;command xmlns='http://jabber.org/protocol/commands'\n           node='urn:xmpp:hats:commands:doff'\n           action='complete'\n           sessionid='2025-02-14T12:23:47.445692Z'&gt;\n    &lt;x xmlns='jabber:x:data' type='submit'&gt;\n      &lt;field type='hidden' var='FORM_TYPE'&gt;\n        &lt;value&gt;urn:xmpp:hats:commands&lt;/value&gt;\n      &lt;/field&gt;\n      &lt;field var='jid'&gt;\n        &lt;value&gt;terry.anderson@example.edu&lt;/value&gt;\n      &lt;/field&gt;\n      &lt;field var='hat_title'&gt;\n        &lt;value&gt;Teacher Assistant title&lt;/value&gt;\n      &lt;/field&gt;\n      &lt;field var='hat_uri'&gt;\n        &lt;value&gt;http://tech.example.edu/hats#TeacherAssistant&lt;/value&gt;\n      &lt;/field&gt;\n    &lt;/x&gt;\n  &lt;/command&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"tutorials/muc-hats/#service-informs-admin-of-completion_1","title":"Service Informs Admin of Completion","text":"<p>The response is similar to Example 8:</p> <pre><code>&lt;iq from='physicsforpoets@courses.example.edu'\n    id='9fens61z'\n    to='professor@example.edu/office'\n    type='result'\n    xml:lang='en'&gt;\n  &lt;command xmlns='http://jabber.org/protocol/commands'\n           node='urn:xmpp:hats:commands:doff'\n           sessionid='2025-02-14T12:23:47.445692Z'\n           status='completed'/&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"tutorials/muc-vcard/","title":"Setting vCards / Avatars for MUC rooms","text":"<p>ejabberd supports the ability to set vCard for MUC rooms. One of the most common use case is to be able to define an avatar for your own MUC room.</p>"},{"location":"tutorials/muc-vcard/#how-does-it-work","title":"How does it work?","text":"<p>To be allowed to set vCard for a given room, you need to be owner of that room.</p> <p>To set up vCard avatar for your MUC room, you first need to make sure you convert your avatar image to base64 encoding, so that you can pass it on XMPP stream.</p> <p>If you want to convert it manually from command line, you can use <code>base64</code> tool. For example:</p> <pre><code>base64 muc_logo.png &gt; muc_logo.b64\n</code></pre> <p>However, when coding the client, you can more likely directly do the proper image base64 encoding in your code.</p>"},{"location":"tutorials/muc-vcard/#setting-up-muc-vcard","title":"Setting up MUC vCard","text":"<p>To set the MUC vCard, you can send a vcard-temp set request, as defined in XEP-0054: vcard-temp, but directly addressed to your MUC room. For example, assuming my room id is <code>test@conference.localhost</code>:</p> <pre><code>&lt;iq id='set1'\n    type='set'\n    to='test@conference.localhost'&gt;\n&lt;vCard xmlns='vcard-temp'&gt;\n    &lt;PHOTO&gt;\n      &lt;TYPE&gt;image/png&lt;/TYPE&gt;\n      &lt;BINVAL&gt;\niVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAAAsTAAALEwEAmpwYAAAB1WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjE8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+MjwvdGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KAtiABQAADkVJREFUeAHtWgtwVNUZ/nY3m0022bxIyItAIBBArZRUUbCoKCgVnWJxxlataO1rlKl2amec1urUdmrp2KE6nXFgGIWpQGmlzCDaoTDUBwoMVcFCeOQFhDwhCXlsNrub3fT7z7l3H8kmm4RUWsNJ7uvcc//zf//r/OectfSxYBwX6zjGrqBfEcDltID/Be+7rBZgsVgup/yvuIBI4LJawGVX//gUQB8iY0/C56EFlWj0Szfi+7+Znow8ThAi5N84GRA1Hek3MvRY/huJkEg4Eq90GAuwtItVbypFayosCM14bIFo0LqtxTK0ZweDfvZr5WHDmAogGAwq3q3W2AwEg33weHrQ6fYgM90Fh8OuzHGgEARILKBh840E2dcXVIBMwcm1t7cbXn8LvN4L8PnOwx+4yLo2+PwNSHfNx8QJi2C1JuKSXUBrW2syErinx4uW1nY0NLbgXP0FNDS34ejJelTVd+Cplbfi9lvKIvlV96ZFuD3n0Ni8DclJ03kUIcmRB0diFhm2hyxGQGsTF01qgXt9LejoOonOrk/g7j5AsJsQCOhW0pzyx6T8LcjJukWBF6sZtQA0cA4jVvEpra229k5UVdfhyLEaHPi0BusPngM+7BR98GjEzKVzsGX1A5h7bWkUYPWga3i2INDrRlPLj9UQJcaUkHA1BXEXUlPmIS31GqQ6i2GzJYU+c3fX4nzrbrS1vw6vb5+ql+/IGr8tQV+wCn18nlp0EBMy5+meDPcbsQuYGje1HQgEUVFVi/f3H8Xf9hzFrjfq2IGXhwNZC11o9VP0B9x4ee1teORbS5DmSoliQD0YJ9OUO7sqcLK6lIIt4RsfgsFapT2JKzYCSU56FJkZy5Hhmou2jkO0lhXopablndVazO8cdC0RvIXXOvXttKL9yM66Ubmc2IRpNSMSgPi4aFsOAX74aAXefOsAfrvuCFDrAaY6YS9woCTVDpfDhkO7W4A5Tux+cQUW33qdghkgDatBw8AdupgC6Og6hZNVM9kPIViy+F5M30XmAzxqKBBt1gJY7qWdzVbKd262reNV6sQqC+j3dSgq2IGC3HtYL7HFfKduh+8CAt7U+qnKs9j4l3fxm58fFHKwLEjD5Bkp8NLJnAlW1Lt70bGrHt9/ugzPrFqOqVPyVW9CwzZIgNTsxDoTNFqJuEm9FIHYbC7e+wiogfc5vE/g/SnjY0oFoqgS+P2VyMpcrcDrl2HNG43jCyDS5Ls9Xry54z2sfGYXcLoHhYsy4aAaznl6UdsTwLSUBFTWUAuVXry++T7cf++tNFcHtaQtxxSg2flwr6JLEbTWO4UhAiHrFksGr208JMZIEZOXvopooZWwJ85FUf531BvTutRDxGnIIGiajDBeW9eEF9Zsw/rfHwZumIDS0hRUU9O9dL4JNPf0RAsqd1/A9cvz8cet92Fe2WzVjbiKTWx1BIU2pfFGfaPNN1wloC+GH3kn/Fosibzz8J4RP+9ljiDZhlBi8zCoAEzw4kv/Lq/Csic3onZPK2bekYcL1PapDr/qPD/ZhgY+t7zfgmdfXIhVjy1Dbo74rfjnyMHLdzqp4Y1WvVQNr6j2Wey3kdF/FlwperTRlhObREwBRIL/9LNTKFuxjlYWxKw7J+CEAZyiRq7DioaabnFHbH/7Ydxz5wKl7cFMXmsoPiplAbH5HbJWU25krMqjC5xATe1qTC9+Hon29EGtIKZdmIyeZLAre2i9BGHMmJGKE+0+wa00k51oRVNjD+5dXIhj//wRlt/1VQVeRXm6jI7CYX5NoYRr4tzFl9MQBEQIhWjvXIPqs6sRCHrJj1UJof9HAwQgjIrPt7R1YNXzm4EzPpQWOVFBzUvSozyRp2QbOTzhw5T8dMwunaLoKn/vF+WFnqTAZgAMSGoWp6g+4rSJ/7qZ2eMsXGx/EbX1m1RzLYRo6lECEM2bjG7Y8g/s2VyD2fPTlb9bCZhDri7E3uILIp2Jzh9+fRgHPy43OtCvhY6ANoGL4BqbWrD+T++g+YIOXCKYwcolKV9zQm37eTTBbs9A04XH0HrxU6O7OAKQVuL3Tz/xPjIXZuMsI73klP3Z7Q70IZNuIGXb2weZiQWU8OQq5i+g5ejodGPnrv248aGX8b2VHD6HUUJBcBhtYzfRc5O+vjbG0WwVS+ubXlETpP6uELIAU/tiolt3fES6QWRxeHNzGBustNIK7Del4aUXjuDY8RrVLMFmU9e2i534+56D+PaTr+KepW/gzLvtmPd1MnPp6h2MnX71phAqGZtK0NW9Aa3tH/drI9mEUczAV326Hqs3HOVY70KbT/w1NscCpIN5/gyXHRVBH3bsOoRZjAVi6h9wXvD69kPY++fTQKETVy3NRnlzDy4yYZLx+XMt5FPsV/htbdvJmeAC3ouShBGLFoAJXhg7cqwaqOpAaUkeTnXKwoER+ORlRFE4aOK1BIXr07HunXLUNa3H2v3ngH3NQEkapi/ORReHz4teCtJD11B/EUT+67da2pJKSy7m9ryEbs8qpDiLqAhtISEXEKAyhH1WfpZsyUIFL/r7IdlkDsRoy3S4uxdr15wAuvwovSMfhZOTUcn40SgNVIltSbGIjzYPiEVL1/VQkdmMU0F09wi+cFEuIDiFPQ9z/eM154G8RPQwyKnKcNuYd2JaXoYJO0eJgpvTqOg+ZTnSWFvP8IGbHaggaD6MyVXS5iSl1B5vQxRFHQMMCXi9PtS1MLNLt8HHYUwkIOehinpPjH7enKGZq0KpCOx43w5Od+RCG5yWvJFAzuSM50CvHoZFOcJhyAX4pCTkF83Tt0cVrISmwfvowYdICEtjXpidGDQ1o1oABtN2uw05LocKWHb15lJgjJ73Me1VEROA2rH0WoIoW14wVxE2Dfxq7j69KINzfb+a54sNm++k3edXxlAECoB4Okc0nh32iQYM3UeUCyQm2nHtrEls4IOdbnDZy5ixkEiNc4LE4T85eXIULG0BDAhmbj7nmmlsYEebt5dWED8IRlEb64exMARFI10tjCY7VsKZLAqWoqUbZQFSPWvGZHzju9PQfLwbeUkU2aiioVAafQnlAZdsAZwCk4YsqAY5QGWmL0eCLVn5vx4FZGwwiswCZfbmSnXi0fvmA83d6qU0vGQ+zE54HY5SQ3nAcBpH0I6+Fa6ZAqNQLY44HGXcE7jJaBImHBJA5MeLFs7Fg09cjZp9HVzp5oqrzOcjG4z03ugv3O1ICYymve7NAiczXOZ22b/i+mBOlPaFahQumb5KLEhxJuGZJ+5m1gBUM7UVVxDriGcJ8j6FNFyMHebBJUMk8hkJFgZW0/OGBqRsjp9YLFyKYgZHqjzSeCTzGE7RsctiuQq+3gruBf6U65RLjA9FMGEkUQKQFip9pd9fM3sa3tr5Te7qnIed7TPIvZpAGGRiXYS0m4LqZDJlHpIcqqyytw/8H6YLkJC05aIG0CNUeXTw4OZL3CJJHC3WMovz/3JuwC5E8aSfcG1C5jcyK4yGrFPhCKKmAKTq7jvnY8PmDjzywF+BBRORyilV1yBzBFFygOBR6yWvtDlRnkiEAqifQDOo9uAkJ006ARHqQxQyKmYrI7HF0h4SmujNahWWJbfvX+StdCirWrMJ/jhsCXmYPvk15je5McELhUG3xvRylpbmlm178eAvdyEpPUElkj7pJ6KkE317ux9fKU7FKz+7l8EmjTuzvWpFyGwWFK0QUUlxIZK4WaKsSeXjZgu5CmEL/L2d6HKf5p2SgGLeZnVwUaMSdY3LSEe0KILgcrQyZ5MhFwVWxO/LuRRWhulTtnIzdfqg4PlxeEFEHiKLMCvLW7LCc8ei6zBl3Xs4w0WNrHQ7WsWWI4pDVNUdQLrTji9z59eZzHR6iBIbvHygtWhPcHHI+tIAClbuCJ9rlOpIAQgvifyykOJr5G8ByjmS/YA7wc+RjwIDvNCNXQa4gNlMmDT38d7ZfRBnuNE5aVEW6mRxo1/xsy1Fr1ygmz+AEAHIjpEIUYnKkJcoXA2rAzQfSVBbnZ7BSb08y0p1AoczjxKRthTOWvlkQTH78FJZNYpI/sTXUJh/PxXnHFLzqjFPgwpAXEC2tCqqz2HlC7uBualq81OwGlyYFovc5AS0pYpfWkJCk28F7GiK/o5xo18JB7BU0s4jQI8CLjylpvwQhbmPI8OwnFgBrx859RhTADIUCgBZH1izdidwvAfTFmdyL5BRWUAZGpWdIRkhTvyrXdbJkTg7M9SHYRSh57G6Ud33tRM4+yQfTufD/LnLI9z7564U44SU4YKXtgMEoIOfHio2vbkXr/7uMGYsmYgKrg+qQsAFBJ7CYbGijsNSuRtPPVuGMw3t2H7kQmhOoRuP7VmA+cgG52zISHsOEzKWUuNzlLlLT/L7AbGSsKXE7z9qFBDNmxsjsqR915KNyL45U632OCW54TDm4zB4up5j83H+AmNeJrb94mtquPR6/TjFX4rIXCLFGZ1vx2dj6BZm0HR76rjB8RED8TzGmaIQUBGMlJEAN3sMCcAc9uTF3g8+we0Pb8LUEieS+IMHWR0ONHF8r5LAwyRpWT4eX1GGZUvmYfKkXJNW6GoyHKoYk5vI4KMJXgpwkyUlAJPhHvr81u3v8rc8G/k+lYe4AqVbkMJfdU3EbdcX44ayGcwSpyJ3ot4Cl29N1kw6ow1+JlNDXU3QEnDHoh8Lzb5PCLVzC2v72x9i977jmFmcw2QmlYcL+bmZPLKQk5NJv5NEI8xepMuEa/+/7iiAPgqAS9vUvp9jt/ykZahfdCiNU+sitLHQwOUWV5QL9GfGBKvqBbDR4IsA3MQaCoICtn/5IgHtj818DuUB4wGsCTryqjOeyJpxdn9FAONM4QPgXrGAASIZZxVXLGCcKXwA3CsWMEAk46ziP3wnyrgPINtbAAAAAElFTkSuQmCC\n      &lt;/BINVAL&gt;\n    &lt;/PHOTO&gt;\n&lt;/vCard&gt;\n&lt;/iq&gt;\n</code></pre> <p>Please, note that you have to set the mime type of the image properly to help the client displaying it.</p> <p>You can of course add other fields to the vCard if needed.</p> <p>After that IQ <code>set</code> stanza, the server will reply with success:</p> <pre><code>&lt;iq from=\"test@conference.localhost\"\n    type=\"result\"\n    to=\"owner@localhost/r\"\n    id=\"set1\"&gt;\n &lt;vCard xmlns=\"vcard-temp\"/&gt;\n&lt;/iq&gt;\n</code></pre> <p>The MUC room also broadcasts a notification about non-privacy related configuration change to users that are currently in the room:</p> <pre><code>&lt;message from=\"test@conference.localhost\"\n         type=\"groupchat\"\n         to=\"owner@localhost/r\"\n         id=\"17095969463368094420\"&gt;\n &lt;x xmlns=\"http://jabber.org/protocol/muc#user\"&gt;\n  &lt;status code=\"104\"/&gt;\n &lt;/x&gt;\n&lt;/message&gt;\n</code></pre>"},{"location":"tutorials/muc-vcard/#retrieving-a-muc-room-vcard","title":"Retrieving a MUC room vCard","text":"<p>Any user can retrieve the MUC vCard but sending a vcard-temp get IQ to the room itself:</p> <pre><code>&lt;iq to='test@conference.localhost'\n    id='get1'\n    type='get'&gt;\n  &lt;vCard xmlns='vcard-temp'/&gt;\n&lt;/iq&gt;\n</code></pre> <p>Server will reply by sending back the vCard:</p> <pre><code>&lt;iq from=\"test@conference.localhost\"\n    type=\"result\"\n    to=\"user@localhost/r\"\n    id=\"get1\"&gt;\n &lt;vCard xmlns=\"vcard-temp\"&gt;\n    &lt;PHOTO&gt;\n      &lt;TYPE&gt;image/png&lt;/TYPE&gt;\n      &lt;BINVAL&gt;\niVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAAAsTAAALEwEAmpwYAAAB1WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXByZXNzaW9uPjE8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+MjwvdGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KAtiABQAADkVJREFUeAHtWgtwVNUZ/nY3m0022bxIyItAIBBArZRUUbCoKCgVnWJxxlataO1rlKl2amec1urUdmrp2KE6nXFgGIWpQGmlzCDaoTDUBwoMVcFCeOQFhDwhCXlsNrub3fT7z7l3H8kmm4RUWsNJ7uvcc//zf//r/OectfSxYBwX6zjGrqBfEcDltID/Be+7rBZgsVgup/yvuIBI4LJawGVX//gUQB8iY0/C56EFlWj0Szfi+7+Znow8ThAi5N84GRA1Hek3MvRY/huJkEg4Eq90GAuwtItVbypFayosCM14bIFo0LqtxTK0ZweDfvZr5WHDmAogGAwq3q3W2AwEg33weHrQ6fYgM90Fh8OuzHGgEARILKBh840E2dcXVIBMwcm1t7cbXn8LvN4L8PnOwx+4yLo2+PwNSHfNx8QJi2C1JuKSXUBrW2syErinx4uW1nY0NLbgXP0FNDS34ejJelTVd+Cplbfi9lvKIvlV96ZFuD3n0Ni8DclJ03kUIcmRB0diFhm2hyxGQGsTF01qgXt9LejoOonOrk/g7j5AsJsQCOhW0pzyx6T8LcjJukWBF6sZtQA0cA4jVvEpra229k5UVdfhyLEaHPi0BusPngM+7BR98GjEzKVzsGX1A5h7bWkUYPWga3i2INDrRlPLj9UQJcaUkHA1BXEXUlPmIS31GqQ6i2GzJYU+c3fX4nzrbrS1vw6vb5+ql+/IGr8tQV+wCn18nlp0EBMy5+meDPcbsQuYGje1HQgEUVFVi/f3H8Xf9hzFrjfq2IGXhwNZC11o9VP0B9x4ee1teORbS5DmSoliQD0YJ9OUO7sqcLK6lIIt4RsfgsFapT2JKzYCSU56FJkZy5Hhmou2jkO0lhXopablndVazO8cdC0RvIXXOvXttKL9yM66Ubmc2IRpNSMSgPi4aFsOAX74aAXefOsAfrvuCFDrAaY6YS9woCTVDpfDhkO7W4A5Tux+cQUW33qdghkgDatBw8AdupgC6Og6hZNVM9kPIViy+F5M30XmAzxqKBBt1gJY7qWdzVbKd262reNV6sQqC+j3dSgq2IGC3HtYL7HFfKduh+8CAt7U+qnKs9j4l3fxm58fFHKwLEjD5Bkp8NLJnAlW1Lt70bGrHt9/ugzPrFqOqVPyVW9CwzZIgNTsxDoTNFqJuEm9FIHYbC7e+wiogfc5vE/g/SnjY0oFoqgS+P2VyMpcrcDrl2HNG43jCyDS5Ls9Xry54z2sfGYXcLoHhYsy4aAaznl6UdsTwLSUBFTWUAuVXry++T7cf++tNFcHtaQtxxSg2flwr6JLEbTWO4UhAiHrFksGr208JMZIEZOXvopooZWwJ85FUf531BvTutRDxGnIIGiajDBeW9eEF9Zsw/rfHwZumIDS0hRUU9O9dL4JNPf0RAsqd1/A9cvz8cet92Fe2WzVjbiKTWx1BIU2pfFGfaPNN1wloC+GH3kn/Fosibzz8J4RP+9ljiDZhlBi8zCoAEzw4kv/Lq/Csic3onZPK2bekYcL1PapDr/qPD/ZhgY+t7zfgmdfXIhVjy1Dbo74rfjnyMHLdzqp4Y1WvVQNr6j2Wey3kdF/FlwperTRlhObREwBRIL/9LNTKFuxjlYWxKw7J+CEAZyiRq7DioaabnFHbH/7Ydxz5wKl7cFMXmsoPiplAbH5HbJWU25krMqjC5xATe1qTC9+Hon29EGtIKZdmIyeZLAre2i9BGHMmJGKE+0+wa00k51oRVNjD+5dXIhj//wRlt/1VQVeRXm6jI7CYX5NoYRr4tzFl9MQBEQIhWjvXIPqs6sRCHrJj1UJof9HAwQgjIrPt7R1YNXzm4EzPpQWOVFBzUvSozyRp2QbOTzhw5T8dMwunaLoKn/vF+WFnqTAZgAMSGoWp6g+4rSJ/7qZ2eMsXGx/EbX1m1RzLYRo6lECEM2bjG7Y8g/s2VyD2fPTlb9bCZhDri7E3uILIp2Jzh9+fRgHPy43OtCvhY6ANoGL4BqbWrD+T++g+YIOXCKYwcolKV9zQm37eTTBbs9A04XH0HrxU6O7OAKQVuL3Tz/xPjIXZuMsI73klP3Z7Q70IZNuIGXb2weZiQWU8OQq5i+g5ejodGPnrv248aGX8b2VHD6HUUJBcBhtYzfRc5O+vjbG0WwVS+ubXlETpP6uELIAU/tiolt3fES6QWRxeHNzGBustNIK7Del4aUXjuDY8RrVLMFmU9e2i534+56D+PaTr+KepW/gzLvtmPd1MnPp6h2MnX71phAqGZtK0NW9Aa3tH/drI9mEUczAV326Hqs3HOVY70KbT/w1NscCpIN5/gyXHRVBH3bsOoRZjAVi6h9wXvD69kPY++fTQKETVy3NRnlzDy4yYZLx+XMt5FPsV/htbdvJmeAC3ouShBGLFoAJXhg7cqwaqOpAaUkeTnXKwoER+ORlRFE4aOK1BIXr07HunXLUNa3H2v3ngH3NQEkapi/ORReHz4teCtJD11B/EUT+67da2pJKSy7m9ryEbs8qpDiLqAhtISEXEKAyhH1WfpZsyUIFL/r7IdlkDsRoy3S4uxdr15wAuvwovSMfhZOTUcn40SgNVIltSbGIjzYPiEVL1/VQkdmMU0F09wi+cFEuIDiFPQ9z/eM154G8RPQwyKnKcNuYd2JaXoYJO0eJgpvTqOg+ZTnSWFvP8IGbHaggaD6MyVXS5iSl1B5vQxRFHQMMCXi9PtS1MLNLt8HHYUwkIOehinpPjH7enKGZq0KpCOx43w5Od+RCG5yWvJFAzuSM50CvHoZFOcJhyAX4pCTkF83Tt0cVrISmwfvowYdICEtjXpidGDQ1o1oABtN2uw05LocKWHb15lJgjJ73Me1VEROA2rH0WoIoW14wVxE2Dfxq7j69KINzfb+a54sNm++k3edXxlAECoB4Okc0nh32iQYM3UeUCyQm2nHtrEls4IOdbnDZy5ixkEiNc4LE4T85eXIULG0BDAhmbj7nmmlsYEebt5dWED8IRlEb64exMARFI10tjCY7VsKZLAqWoqUbZQFSPWvGZHzju9PQfLwbeUkU2aiioVAafQnlAZdsAZwCk4YsqAY5QGWmL0eCLVn5vx4FZGwwiswCZfbmSnXi0fvmA83d6qU0vGQ+zE54HY5SQ3nAcBpH0I6+Fa6ZAqNQLY44HGXcE7jJaBImHBJA5MeLFs7Fg09cjZp9HVzp5oqrzOcjG4z03ugv3O1ICYymve7NAiczXOZ22b/i+mBOlPaFahQumb5KLEhxJuGZJ+5m1gBUM7UVVxDriGcJ8j6FNFyMHebBJUMk8hkJFgZW0/OGBqRsjp9YLFyKYgZHqjzSeCTzGE7RsctiuQq+3gruBf6U65RLjA9FMGEkUQKQFip9pd9fM3sa3tr5Te7qnIed7TPIvZpAGGRiXYS0m4LqZDJlHpIcqqyytw/8H6YLkJC05aIG0CNUeXTw4OZL3CJJHC3WMovz/3JuwC5E8aSfcG1C5jcyK4yGrFPhCKKmAKTq7jvnY8PmDjzywF+BBRORyilV1yBzBFFygOBR6yWvtDlRnkiEAqifQDOo9uAkJ006ARHqQxQyKmYrI7HF0h4SmujNahWWJbfvX+StdCirWrMJ/jhsCXmYPvk15je5McELhUG3xvRylpbmlm178eAvdyEpPUElkj7pJ6KkE317ux9fKU7FKz+7l8EmjTuzvWpFyGwWFK0QUUlxIZK4WaKsSeXjZgu5CmEL/L2d6HKf5p2SgGLeZnVwUaMSdY3LSEe0KILgcrQyZ5MhFwVWxO/LuRRWhulTtnIzdfqg4PlxeEFEHiKLMCvLW7LCc8ei6zBl3Xs4w0WNrHQ7WsWWI4pDVNUdQLrTji9z59eZzHR6iBIbvHygtWhPcHHI+tIAClbuCJ9rlOpIAQgvifyykOJr5G8ByjmS/YA7wc+RjwIDvNCNXQa4gNlMmDT38d7ZfRBnuNE5aVEW6mRxo1/xsy1Fr1ygmz+AEAHIjpEIUYnKkJcoXA2rAzQfSVBbnZ7BSb08y0p1AoczjxKRthTOWvlkQTH78FJZNYpI/sTXUJh/PxXnHFLzqjFPgwpAXEC2tCqqz2HlC7uBualq81OwGlyYFovc5AS0pYpfWkJCk28F7GiK/o5xo18JB7BU0s4jQI8CLjylpvwQhbmPI8OwnFgBrx859RhTADIUCgBZH1izdidwvAfTFmdyL5BRWUAZGpWdIRkhTvyrXdbJkTg7M9SHYRSh57G6Ud33tRM4+yQfTufD/LnLI9z7564U44SU4YKXtgMEoIOfHio2vbkXr/7uMGYsmYgKrg+qQsAFBJ7CYbGijsNSuRtPPVuGMw3t2H7kQmhOoRuP7VmA+cgG52zISHsOEzKWUuNzlLlLT/L7AbGSsKXE7z9qFBDNmxsjsqR915KNyL45U632OCW54TDm4zB4up5j83H+AmNeJrb94mtquPR6/TjFX4rIXCLFGZ1vx2dj6BZm0HR76rjB8RED8TzGmaIQUBGMlJEAN3sMCcAc9uTF3g8+we0Pb8LUEieS+IMHWR0ONHF8r5LAwyRpWT4eX1GGZUvmYfKkXJNW6GoyHKoYk5vI4KMJXgpwkyUlAJPhHvr81u3v8rc8G/k+lYe4AqVbkMJfdU3EbdcX44ayGcwSpyJ3ot4Cl29N1kw6ow1+JlNDXU3QEnDHoh8Lzb5PCLVzC2v72x9i977jmFmcw2QmlYcL+bmZPLKQk5NJv5NEI8xepMuEa/+/7iiAPgqAS9vUvp9jt/ykZahfdCiNU+sitLHQwOUWV5QL9GfGBKvqBbDR4IsA3MQaCoICtn/5IgHtj818DuUB4wGsCTryqjOeyJpxdn9FAONM4QPgXrGAASIZZxVXLGCcKXwA3CsWMEAk46ziP3wnyrgPINtbAAAAAElFTkSuQmCC\n      &lt;/BINVAL&gt;\n    &lt;/PHOTO&gt;\n &lt;/vCard&gt;\n&lt;/iq&gt;\n</code></pre>"},{"location":"tutorials/mysql/","title":"Using ejabberd with MySQL","text":"<p>ejabberd is bundled with a native Erlang driver to use MySQL as a backend for persistent storage. Using MySQL as backend is thus extremely straightforward.</p>"},{"location":"tutorials/mysql/#ejabberd-installation","title":"ejabberd installation","text":"<p>ejabberd packages and binary installers contain all the modules needed to connect to your MySQL server. You have no extra module to install anymore.</p> <p>If you are building ejabberd from source, make sure that you configure ejabberd to include MySQL module. It can be done by passing option <code>--enable-mysql</code> to <code>configure</code> script. For example:</p> <pre><code>cd ejabberd-source\n./configure --enable-mysql\n</code></pre>"},{"location":"tutorials/mysql/#mysql-installation","title":"MySQL installation","text":"<p>You need a MySQL server that you can point your ejabberd configuration to. The database does not have to be on the same server than ejabberd.</p>"},{"location":"tutorials/mysql/#requirements","title":"Requirements","text":"<p>ejabberd uses FULLTEXT indexes with InnoDB. Thus, you need MySQL 5.6 or greater to use with ejabberd.</p> <p>Note: If you do not store message archive in database however, you can try using older 5.5 version. You may need to adapt MySQL database schema to cope with those older MySQL versions.</p>"},{"location":"tutorials/mysql/#mysql-on-linux","title":"MySQL on Linux","text":"<p>This documentation will not get into the details of making MySQL running on Linux for production. It is dependent on Linux distribution and system administrators preferences and habits.</p> <p>It is also well documented, so it should not be an issue.</p>"},{"location":"tutorials/mysql/#amazon-rds-compliance","title":"Amazon RDS compliance","text":"<p>ejabberd is fully compliant with MySQL on Amazon RDS.</p> <p>You just need to make sure to use MySQL version 5.6 or greater when you create your database.</p>"},{"location":"tutorials/mysql/#mysql-on-osx-with-homebrew","title":"MySQL on OSX with Homebrew","text":"<p>For testing / development, it is common to start experimenting with MySQL with Homebrew installation.</p> <p>Here is how to get started to help with setup up environment.</p> <p>With Homebrew properly installed, you can use the following command to install MySQL:</p> <pre><code>brew install mysql\n</code></pre> <p>You can then follow instruction to finish the installation, for example by running <code>mysql_secure_installation</code>.</p> <p>You can manually start server with:</p> <pre><code>mysql.server start\n</code></pre> <p>To connect to your local MySQL server using <code>mysql</code> command-line, assuming you kept the default set up, use:</p> <pre><code>mysql -uroot\n</code></pre> <p>To stop it, use:</p> <pre><code>mysql.server stop\n</code></pre>"},{"location":"tutorials/mysql/#mysql-on-windows-with-bash","title":"MySQL on Windows with Bash","text":"<p>On Windows you can install MySQL easily like on Linux using Ubuntu Bash:</p> <pre><code>sudo apt-get install mysql-server-5.6\n</code></pre> <p>After configuration, you can start MySQL with:</p> <pre><code>sudo /etc/init.d/mysql start\n</code></pre> <p>You can connect on the database with your created admin password:</p> <pre><code>mysql -uroot -ppassword\n</code></pre>"},{"location":"tutorials/mysql/#mysql-database-creation","title":"MySQL database creation","text":""},{"location":"tutorials/mysql/#create-ejabberd-user-and-database","title":"Create ejabberd user and database","text":"<p>MySQL admins should use this procedure and grant rights to a dedicated <code>ejabberd</code> user (replace password with your desired password):</p> <pre><code>echo \"GRANT ALL ON ejabberd.* TO 'ejabberd'@'localhost' IDENTIFIED BY 'password';\" | mysql -h localhost -u root\n</code></pre> <p>You can then create a dedicated ejabberd database (use password created earlier):</p> <pre><code>echo \"CREATE DATABASE ejabberd;\" | mysql -h localhost -u ejabberd -p\n</code></pre> <p>You should now be able to connect to ejabberd database with user <code>ejabberd</code> (use password defined on GRANT command):</p> <pre><code>mysql -h localhost -u ejabberd -p -D ejabberd\n\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 5.7.11 Homebrew\n\nCopyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt;\n</code></pre>"},{"location":"tutorials/mysql/#decide-which-sql-schema-to-use","title":"Decide which SQL schema to use","text":"<p>Read carefully the Default and New Schemas section and decide which schema is preferable in your case: the default or the new schema.</p> <p>Then modify the <code>ejabberd.yml</code> configuration file to setup your desired option value:</p> <pre><code>new_sql_schema: true\n</code></pre>"},{"location":"tutorials/mysql/#use-automatic-schema-update","title":"Use automatic schema update","text":"<p>Since ejabberd 23.10, ejabberd can take care to create the tables automatically the first time it starts with an empty database, and also takes care to update the database schema when you upgrade ejabberd to a newer version.</p> <p>That feature works both for default and new SQL schema, for MySQL, PostgreSQL and SQLite.</p> <p>To enable automatic database schema creation and update, simply add in your <code>ejabberd.yml</code> configuration file:</p> <pre><code>update_sql_schema: true\n</code></pre> <p>In that case, you don't need to load the database schema manually: no need to read the next section.</p>"},{"location":"tutorials/mysql/#load-database-schema-manually","title":"Load database schema manually","text":"<p>MySQL default schema is defined in a file called <code>mysql.sql</code>, and the new schema is <code>mysql.new.sql</code>. Some tables of the schema are described in: ejabberd SQL database schema documentation.</p> <p>Those schema files can be found:</p> <ul> <li> <p>Git repository and source code package: <code>/sql/</code> directory</p> </li> <li> <p>When installed from source code or binary installer, the SQL schemas are copied to   <code>PREFIX/lib/ejabberd-VERSION/priv/sql</code></p> </li> </ul> <p>Load the schema in your ejabberd database with the command:</p> <pre><code>mysql -h localhost -D ejabberd -u ejabberd -p &lt; mysql.sql\n</code></pre> <p>To make sure all looks fine, you can show the list of SQL tables:</p> <pre><code>echo \"SHOW TABLES;\" | mysql -h localhost -D ejabberd -u ejabberd -p --table\n\nmysql: [Warning] Using a password on the command line interface can be insecure.\n+-------------------------+\n| Tables_in_ejabberd      |\n+-------------------------+\n| archive                 |\n| archive_prefs           |\n| caps_features           |\n| last                    |\n| motd                    |\n| muc_registered          |\n| muc_room                |\n| privacy_default_list    |\n| privacy_list            |\n| privacy_list_data       |\n| private_storage         |\n| pubsub_item             |\n| pubsub_node             |\n| pubsub_node_option      |\n| pubsub_node_owner       |\n| pubsub_state            |\n| pubsub_subscription_opt |\n| roster_version          |\n| rostergroups            |\n| rosterusers             |\n| sm                      |\n| spool                   |\n| sr_group                |\n| sr_user                 |\n| users                   |\n| vcard                   |\n| vcard_search            |\n| vcard_xupdate           |\n+-------------------------+\n</code></pre> <p>Your database is now ready to connect with ejabberd.</p>"},{"location":"tutorials/mysql/#ejabberd-configuration","title":"ejabberd configuration","text":""},{"location":"tutorials/mysql/#setup-mysql-connection","title":"Setup MySQL connection","text":"<p>In <code>ejabberd.yml</code>, define your database parameters:</p> <pre><code>sql_type: mysql\nsql_server: \"localhost\"\nsql_database: \"ejabberd\"\nsql_username: \"ejabberd\"\nsql_password: \"password\"\n## If you want to specify the port:\nsql_port: 3306\n</code></pre> <p>Those parameters are mandatory if you want to use MySQL with ejabberd.</p>"},{"location":"tutorials/mysql/#authentication-use-mysql","title":"Authentication use MySQL","text":"<p>If you decide to store user password in ejabberd, you need to tell ejabberd to use MySQL instead of internal database for authentication.</p> <p>You thus need to change ejabberd configuration <code>auth_method</code> to replace <code>internal</code> authentication with <code>sql</code>:</p> <pre><code>auth_method: sql\n</code></pre> <p>If you restart ejabberd, it should connect to your database for authentication. In case it does not work as expected, check your config file syntax and log files (<code>ejabberd.log</code>, <code>error.log</code>, <code>crash.log</code>)</p> <p>For example, you can create a user in database with <code>ejabberdctl</code>:</p> <pre><code>/sbin/ejabberdctl register \"testuser\" \"localhost\" \"passw0rd\"\n\nUser testuser@localhost successfully registered\n</code></pre> <p>You should now be able to connect XMPP users based on MySQL user base.</p>"},{"location":"tutorials/mysql/#modules-use-mysql","title":"Modules use MySQL","text":"<p>At this stage, only the authentication / user base has been moved to MySQL. For data managed by modules, ejabberd still uses the Mnesia internal database by default; you can decide to use MySQL on a module-by-module basis.</p> <p>For each modules that support SQL backend, you can pass option <code>db_type: sql</code> to use your configured MySQL database. Switch can be done on a module by module basis. For example, if you want to store contact list in MySQL, you can do:</p> <pre><code>modules:\n  mod_roster:\n    db_type: sql\n</code></pre> <p>However, if you want to use MySQL for all modules that support MySQL, you can simply use global option <code>default_db: sql</code>:</p> <pre><code>default_db: sql\n</code></pre> <p>Note: even if you move all the persistent data you can to MySQL, Mnesia will still be started and used to manage clustering.</p>"},{"location":"tutorials/mysql/#migrating-data-from-internal-to-mysql","title":"Migrating data from internal to MySQL","text":"<p>To migrate your data, once you have setup your sql service, you can move most of the data to your database.</p> <p>You need to take precautions before you launch the migration:</p> <ol> <li> <p>Before you launch migration from internal database, make sure you have made a proper backup.</p> </li> <li> <p>Always try the migration first on an instance created from your data backup, to make sure the migration script will work fine on your dataset.</p> </li> <li> <p>Then, when doing final migration, make sure your instance is not accepting connections by blocking incoming connections, for example with firewall rules (block port 5222, 5269 and 5280 as default).</p> </li> </ol> <p>When you are ready, you can:</p> <ol> <li> <p>Connect to a running ejabberd:</p> <pre><code>./ejabberdctl debug\n</code></pre> </li> <li> <p>Alternatively, use <code>ejabberdctl live</code> to launch ejabberd with an Erlang shell attached.</p> </li> <li> <p>Launch the migration command <code>ejd2sql:export/2</code> from Erlang shell. First parameter is the XMPP domain name you want to migrate (i.e <code>localhost</code>). Second parameter <code>sql</code> tells ejabberd to export to configured MySQL database. For example:</p> <pre><code>ejd2sql:export(&lt;&lt;\"localhost\"&gt;&gt;, sql).\n</code></pre> </li> </ol> <p>You should be set now.</p>"},{"location":"tutorials/mysql/#converting-database-from-default-to-new-schema","title":"Converting database from default to new schema","text":"<p>Please check the section Default and New Schemas.</p>"},{"location":"tutorials/mysql/#getting-further","title":"Getting further","text":"<p>To get further you can read the ejabberd Configuration section about Databases.</p>"},{"location":"use-cases/","title":"ejabberd Use Cases","text":"<p>ejabberd is very versatile and is a solid choice to build messaging services across a large number of industries:</p>"},{"location":"use-cases/#ejabberd","title":"ejabberd","text":""},{"location":"use-cases/#mobile-messaging","title":"Mobile messaging","text":"<p>ejabberd's massive scalability makes it the most solid choice as the backbone for a very large number of mobile messaging services.</p> <p>This includes:</p> <ul> <li>Chaatz</li> <li>Libon</li> <li>Nokia OVI Chat</li> <li>Roo Kids : Safe &amp; fun instant messaging app for kids with minimum yet critical parental controls.</li> <li>Swisscom IO</li> <li>Versapp</li> <li>Whatsapp</li> </ul>"},{"location":"use-cases/#gaming","title":"Gaming","text":"<ul> <li>Electronic Arts</li> <li>FACEIT</li> <li>Kixeye</li> <li>Machine Zone (Game of War)</li> <li>Nokia nGage</li> <li>Riot Games (League of Legends)</li> </ul>"},{"location":"use-cases/#voice-and-video-messaging","title":"Voice and video messaging","text":"<ul> <li>Nimbuzz</li> <li>ooVoo</li> <li>Sipphone</li> <li>WowApp</li> </ul>"},{"location":"use-cases/#internet-of-things","title":"Internet of Things","text":"<ul> <li>AeroFS</li> <li>IMA Teleassistance</li> <li>Nabaztag (Violet, Mindscape, then Aldebaran Robotics)</li> </ul>"},{"location":"use-cases/#telecom-hosting","title":"Telecom / Hosting","text":"<ul> <li>Fastmail</li> <li>GMX</li> <li>Mailfence</li> <li>Orange</li> <li>SAPO - Portugal Telecom</li> </ul>"},{"location":"use-cases/#customer-chat-crm","title":"Customer chat / CRM","text":"<ul> <li>CoBrowser.net: Coder Interview.</li> <li>iAdvize</li> <li>LiveHelpercChat: Blog post: Full XMPP chat support for ejabberd</li> </ul>"},{"location":"use-cases/#media","title":"Media","text":"<ul> <li>AFP</li> <li>BBC</li> </ul>"},{"location":"use-cases/#social-media","title":"Social media","text":"<ul> <li>Facebook</li> <li>Nasza Klasa (NKTalk messenger)</li> <li>StudiVZ</li> <li>Sify</li> <li>Tuenti</li> </ul>"},{"location":"use-cases/#sport","title":"Sport","text":"<ul> <li>Major League of Baseball (MLB)</li> </ul>"},{"location":"use-cases/#education","title":"Education","text":"<ul> <li>Apollo group</li> <li>Laureate</li> </ul>"},{"location":"use-cases/#push-alerts","title":"Push alerts","text":"<ul> <li>Nokia push notifications</li> <li>Notify.me)</li> </ul>"},{"location":"use-cases/#dating","title":"Dating","text":"<ul> <li>Grindr</li> <li>Meetic</li> </ul>"},{"location":"use-cases/#community-sites","title":"Community sites","text":"<ul> <li>Jabber.at</li> <li>Talkr.im</li> </ul>"},{"location":"use-cases/#xmpp-use-cases","title":"XMPP Use Cases","text":"<p>XMPP is a very versatile protocol designed to address many use cases of modern real-time messaging needs. However, it is also a very large protocol and it is difficult to understand at first sight all the use cases that XMPP adequately addresses.</p> <p>This page is gathering XMPP specifications that make XMPP a good fit for a given use case of industry.</p>"},{"location":"use-cases/#realtime-web","title":"Realtime web","text":"<p>XMPP was designed before the advent of realtime web. However, it managed to adapt thanks to the following specifications:</p> <ul> <li> <p>XMPP PubSub is defined in   XEP-0060. This is a   very powerful mechanism that defines channel based communication on   top of the XMPP protocol itself. A server can handle millions of   channels, called Pubsub nodes. Users interested in specific channels   can subscribe to nodes. When data needs to be send to a given   channel, authorized publishers can send data to that node. The XMPP   server will then broadcast the content to all subscribers. This is   very adequate for realtime web as it allows you to broadcast   relevant events to web pages.</p> </li> <li> <p>WebSocket: XMPP over WebSocket is defined in   RFC 7395. It is more   efficient and more scalable than XMPP for web's previous   specifications called   BOSH. WebSocket being a   true bidirectional channel, it allows lower latency messaging and is   very reliable. Note that BOSH can still be used transparently along   with WebSocket to support old web browsers.</p> </li> </ul> <p>Use cases: News, interactive web page, web chat, web games.</p> <p>Supported by ejabberd: Yes.</p>"}]}